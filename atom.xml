<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hacp🍉</title>
  
  
  <link href="https://www.hacp.top/atom.xml" rel="self"/>
  
  <link href="https://www.hacp.top/"/>
  <updated>2024-05-10T14:19:03.000Z</updated>
  <id>https://www.hacp.top/</id>
  
  <author>
    <name>Hacp🍉</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>排序算法</title>
    <link href="https://www.hacp.top/posts/6.html"/>
    <id>https://www.hacp.top/posts/6.html</id>
    <published>2024-05-10T14:19:03.000Z</published>
    <updated>2024-05-10T14:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-冒泡排序">1.冒泡排序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function bubbleSort(arr) &#123;</span><br><span class="line">    let len = arr.length;</span><br><span class="line">    for (let i = 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">        for (let j = 0; j &lt; len - 1 - i; j++) &#123;</span><br><span class="line">            if (arr[j] &gt; arr[j + 1]) &#123;        // 相邻元素两两对比</span><br><span class="line">                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-插入排序">2.插入排序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function insertionSort(arr) &#123;</span><br><span class="line">    let len = arr.length;</span><br><span class="line">    let preIndex, current;</span><br><span class="line">    for (let i = 1; i &lt; len; i++) &#123;</span><br><span class="line">        preIndex = i - 1;</span><br><span class="line">        current = arr[i];</span><br><span class="line">        while (preIndex &gt;= 0 &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">            arr[preIndex + 1] = arr[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[preIndex + 1] = current;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-选择排序">3.选择排序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function selectionSort(arr) &#123;</span><br><span class="line">    let len = arr.length;</span><br><span class="line">    let minIndex, temp;</span><br><span class="line">    for (let i = 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        for (let j = i + 1; j &lt; len; j++) &#123;</span><br><span class="line">            if (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        arr[i] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-快速排序">4.快速排序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">function quickSort(arr, left, right) &#123;</span><br><span class="line">    let len = arr.length,</span><br><span class="line">        partitionIndex,</span><br><span class="line">        left = typeof left != &#x27;undefined&#x27; ? left : 0,</span><br><span class="line">        right = typeof right != &#x27;undefined&#x27; ? right : len - 1;</span><br><span class="line"> </span><br><span class="line">    if (left &lt; right) &#123;</span><br><span class="line">        partitionIndex = partition(arr, left, right);</span><br><span class="line"> </span><br><span class="line">        quickSort(arr, left, partitionIndex - 1);</span><br><span class="line">        quickSort(arr, partitionIndex + 1, right);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function partition(arr, left, right) &#123;</span><br><span class="line">    let pivot = arr[right],</span><br><span class="line">        partitionIndex = left;</span><br><span class="line"> </span><br><span class="line">    for (let i = left; i &lt; right; i++) &#123;</span><br><span class="line">        if (arr[i] &lt; pivot) &#123;</span><br><span class="line">            swap(arr, i, partitionIndex);</span><br><span class="line">            partitionIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, right, partitionIndex);</span><br><span class="line">    return partitionIndex;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function swap(arr, i, j) &#123;</span><br><span class="line">    let temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-归并排序">5.归并排序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function mergeSort(arr) &#123;</span><br><span class="line">    let len = arr.length;</span><br><span class="line">    if (len &lt; 2) &#123;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">    let middle = Math.floor(len / 2),</span><br><span class="line">        left = arr.slice(0, middle),</span><br><span class="line">        right = arr.slice(middle);</span><br><span class="line">    return merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function merge(left, right) &#123;</span><br><span class="line">    let result = [];</span><br><span class="line">    while (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">        if (left[0] &lt;= right[0]) &#123;</span><br><span class="line">            result.push(left.shift());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            result.push(right.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while (left.length)</span><br><span class="line">        result.push(left.shift());</span><br><span class="line">    while (right.length)</span><br><span class="line">        result.push(right.shift());</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-堆排序">6.堆排序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">function heapSort(arr) &#123;</span><br><span class="line">    // 建堆</span><br><span class="line">    buildHeap(arr);</span><br><span class="line"></span><br><span class="line">    let len = arr.length;</span><br><span class="line">    let temp;</span><br><span class="line"></span><br><span class="line">    // 堆调整排序</span><br><span class="line">    for (let i = len - 1; i &gt; 0; i--) &#123;</span><br><span class="line">        // 将当前未排序序列中最大（或最小）元素放到序列的起始位置</span><br><span class="line">        temp = arr[0];</span><br><span class="line">        arr[0] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line"></span><br><span class="line">        // 重新对剩余未排序元素进行最大堆调整</span><br><span class="line">        heapify(arr, 0, i);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 建堆</span><br><span class="line">function buildHeap(arr) &#123;</span><br><span class="line">    let len = arr.length;</span><br><span class="line">    // 从最后一个非叶子节点开始调整</span><br><span class="line">    for (let i = Math.floor(len / 2) - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">        heapify(arr, i, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 堆调整</span><br><span class="line">function heapify(arr, i, len) &#123;</span><br><span class="line">    let largest = i;</span><br><span class="line">    let left = 2 * i + 1;</span><br><span class="line">    let right = 2 * i + 2;</span><br><span class="line"></span><br><span class="line">    if (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (largest != i) &#123;</span><br><span class="line">        let swap = arr[i];</span><br><span class="line">        arr[i] = arr[largest];</span><br><span class="line">        arr[largest] = swap;</span><br><span class="line"></span><br><span class="line">        // 递归调整子树</span><br><span class="line">        heapify(arr, largest, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">排序算法专题</summary>
    
    
    
    <category term="算法" scheme="https://www.hacp.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://www.hacp.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>爱心</title>
    <link href="https://www.hacp.top/posts/5.html"/>
    <id>https://www.hacp.top/posts/5.html</id>
    <published>2024-01-03T10:19:03.000Z</published>
    <updated>2024-01-03T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-实现构思">1.实现构思</h2><p>最开始想用缩小图片然后使用曲线的方式遍历循环形成爱心，实际测试下来，性能耗损太大，以至于实现难度更高，位置和速度不可控</p><p>思索良久后，还是决定用画布</p><p>Particle 和 ParticlePool 类定义了粒子和粒子池，用于绘制和管理粒子。</p><p>pointOnHeart 函数返回一个位于桃心曲线上的点，用来初始化粒子的位置。</p><p>然后使用 canvas 绘制小粒子创造一个形状为桃心的动态效果。</p><p>代码中 render 函数是主要的渲染函数，用于更新粒子状态、绘制粒子以及创建新的粒子。</p><p>最后通过延迟一段时间调用 onResize 函数，设置画布大小并开始渲染。</p><h2 id="2-先确定页面的布局，分为左右布局">2.先确定页面的布局，分为左右布局</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;mainDiv&quot;&gt;</span><br><span class="line">&lt;div id=&quot;content&quot;&gt;</span><br><span class="line">&lt;div id=&quot;code&quot;&gt;</span><br><span class="line">&lt;span class=&quot;comments&quot;&gt;人生至少该有一次&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;span class=&quot;comments&quot;&gt;为了某一个人而忘了自己&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;span class=&quot;keyword&quot;&gt;不求结果，不求同行，&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;span class=&quot;keyword&quot;&gt;不求曾经拥有，甚至不求你爱我，&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;span class=&quot;keyword&quot;/&gt;只求在我最美的年华里&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;span class=&quot;keyword&quot;/&gt;遇到你&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;loveHeart&quot;&gt;</span><br><span class="line">&lt;canvas id=&quot;garden&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">&lt;div id=&quot;words&quot;&gt;</span><br><span class="line">&lt;div id=&quot;messages&quot;&gt;</span><br><span class="line">亲爱的，这是我们相识的时光。</span><br><span class="line">&lt;div id=&quot;elapseClock&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;loveu&quot;&gt;</span><br><span class="line">爱你的。&lt;br/&gt;</span><br><span class="line">&lt;div class=&quot;signature&quot;&gt;- 侯先生&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="3-确定板块样式">3.确定板块样式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family: digit;</span><br><span class="line">    src: url(&#x27;digital-7_mono.ttf&#x27;) format(&quot;truetype&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    background: #ffe;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    overflow: auto</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">mainDiv &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">loveHeart &#123;</span></span><br><span class="line">    float: left;</span><br><span class="line">    width: 670px;</span><br><span class="line">    height: 625px</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">garden &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">elapseClock &#123;</span></span><br><span class="line">    text-align: right;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    margin-bottom: 10px</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">words &#123;</span></span><br><span class="line">    font-family: &quot;sans-serif&quot;;</span><br><span class="line">    width: 500px;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">    color: #666</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">messages &#123;</span></span><br><span class="line">    display: none</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">elapseClock .digit &#123;</span></span><br><span class="line">    font-family: &quot;digit&quot;;</span><br><span class="line">    font-size: 36px</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">loveu &#123;</span></span><br><span class="line">    padding: 5px;</span><br><span class="line">    font-size: 22px;</span><br><span class="line">    margin-top: 80px;</span><br><span class="line">    margin-right: 120px;</span><br><span class="line">    text-align: right;</span><br><span class="line">    display: none</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">loveu .signature &#123;</span></span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">    font-style: italic</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">clickSound &#123;</span></span><br><span class="line">    display: none</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">code &#123;</span></span><br><span class="line">    float: left;</span><br><span class="line">    width: 440px;</span><br><span class="line">    height: 400px;</span><br><span class="line">    color: #333;</span><br><span class="line">    font-family: &quot;Consolas&quot;, &quot;Monaco&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, &quot;sans-serif&quot;;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    line-height: 35px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">code .string &#123;</span></span><br><span class="line">    color: #2a36ff</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">code .keyword &#123;</span></span><br><span class="line">    color: #7f0055;</span><br><span class="line">    font-weight: bold</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">code .placeholder &#123;</span></span><br><span class="line">    margin-left: 15px</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">code .space &#123;</span></span><br><span class="line">    margin-left: 7px</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">code .comments &#123;</span></span><br><span class="line">    color: #3f7f5f</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">copyright &#123;</span></span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    width: 100%;</span><br><span class="line">    color: #666</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">errorMsg &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 100px;</span><br><span class="line">    left: 0</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">copyright a &#123;</span></span><br><span class="line">    color: #666</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-实现爱心粒子逻辑">4.实现爱心粒子逻辑</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function Vector(x, y) &#123;</span><br><span class="line">    this.x = x;</span><br><span class="line">    this.y = y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vector.prototype = &#123;</span><br><span class="line">rotate: function (theta) &#123;</span><br><span class="line">    var x = this.x;</span><br><span class="line">    var y = this.y;</span><br><span class="line">    this.x = Math.cos(theta) * x - Math.sin(theta) * y;</span><br><span class="line">    this.y = Math.sin(theta) * x + Math.cos(theta) * y;</span><br><span class="line">    return this;</span><br><span class="line">&#125;,</span><br><span class="line">mult: function (f) &#123;</span><br><span class="line">    this.x *= f;</span><br><span class="line">    this.y *= f;</span><br><span class="line">    return this;</span><br><span class="line">&#125;,</span><br><span class="line">clone: function () &#123;</span><br><span class="line">    return new Vector(this.x, this.y);</span><br><span class="line">&#125;,</span><br><span class="line">length: function () &#123;</span><br><span class="line">    return Math.sqrt(this.x * this.x + this.y * this.y);</span><br><span class="line">&#125;,</span><br><span class="line">subtract: function (v) &#123;</span><br><span class="line">    this.x -= v.x;</span><br><span class="line">    this.y -= v.y;</span><br><span class="line">    return this;</span><br><span class="line">&#125;,</span><br><span class="line">set: function (x, y) &#123;</span><br><span class="line">    this.x = x;</span><br><span class="line">    this.y = y;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function Petal(stretchA, stretchB, startAngle, angle, growFactor, bloom) &#123;</span><br><span class="line">    this.stretchA = stretchA;</span><br><span class="line">    this.stretchB = stretchB;</span><br><span class="line">    this.startAngle = startAngle;</span><br><span class="line">    this.angle = angle;</span><br><span class="line">    this.bloom = bloom;</span><br><span class="line">    this.growFactor = growFactor;</span><br><span class="line">    this.r = 1;</span><br><span class="line">    this.isfinished = false;</span><br><span class="line">    //this.tanAngleA = Garden.random(-Garden.degrad(Garden.options.tanAngle), Garden.degrad(Garden.options.tanAngle));</span><br><span class="line">    //this.tanAngleB = Garden.random(-Garden.degrad(Garden.options.tanAngle), Garden.degrad(Garden.options.tanAngle));</span><br><span class="line">&#125;</span><br><span class="line">Petal.prototype = &#123;</span><br><span class="line">draw: function () &#123;</span><br><span class="line">    var ctx = this.bloom.garden.ctx;</span><br><span class="line">    var v1, v2, v3, v4;</span><br><span class="line">    v1 = new Vector(0, this.r).rotate(Garden.degrad(this.startAngle));</span><br><span class="line">    v2 = v1.clone().rotate(Garden.degrad(this.angle));</span><br><span class="line">    v3 = v1.clone().mult(this.stretchA); //.rotate(this.tanAngleA);</span><br><span class="line">    v4 = v2.clone().mult(this.stretchB); //.rotate(this.tanAngleB);</span><br><span class="line">    ctx.strokeStyle = this.bloom.c;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(v1.x, v1.y);</span><br><span class="line">    ctx.bezierCurveTo(v3.x, v3.y, v4.x, v4.y, v2.x, v2.y);</span><br><span class="line">    ctx.stroke();</span><br><span class="line">&#125;,</span><br><span class="line">render: function () &#123;</span><br><span class="line">    if (this.r &lt;= this.bloom.r) &#123;</span><br><span class="line">        this.r += this.growFactor; // / 10;</span><br><span class="line">        this.draw();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        this.isfinished = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Bloom(p, r, c, pc, garden) &#123;</span><br><span class="line">    this.p = p;</span><br><span class="line">    this.r = r;</span><br><span class="line">    this.c = c;</span><br><span class="line">    this.pc = pc;</span><br><span class="line">    this.petals = [];</span><br><span class="line">    this.garden = garden;</span><br><span class="line">    this.init();</span><br><span class="line">    this.garden.addBloom(this);</span><br><span class="line">&#125;</span><br><span class="line">Bloom.prototype = &#123;</span><br><span class="line">draw: function () &#123;</span><br><span class="line">    var p, isfinished = true;</span><br><span class="line">    this.garden.ctx.save();</span><br><span class="line">    this.garden.ctx.translate(this.p.x, this.p.y);</span><br><span class="line">    for (var i = 0; i &lt; this.petals.length; i++) &#123;</span><br><span class="line">        p = this.petals[i];</span><br><span class="line">        p.render();</span><br><span class="line">        isfinished *= p.isfinished;</span><br><span class="line">    &#125;</span><br><span class="line">    this.garden.ctx.restore();</span><br><span class="line">    if (isfinished == true) &#123;</span><br><span class="line">        this.garden.removeBloom(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">init: function () &#123;</span><br><span class="line">    var angle = 360 / this.pc;</span><br><span class="line">    var startAngle = Garden.randomInt(0, 90);</span><br><span class="line">    for (var i = 0; i &lt; this.pc; i++) &#123;</span><br><span class="line">        this.petals.push(new Petal(Garden.random(Garden.options.petalStretch.min, Garden.options.petalStretch.max), Garden.random(Garden.options.petalStretch.min, Garden.options.petalStretch.max), startAngle + i * angle, angle, Garden.random(Garden.options.growFactor.min, Garden.options.growFactor.max), this));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Garden(ctx, element) &#123;</span><br><span class="line">    this.blooms = [];</span><br><span class="line">    this.element = element;</span><br><span class="line">    this.ctx = ctx;</span><br><span class="line">&#125;</span><br><span class="line">Garden.prototype = &#123;</span><br><span class="line">render: function () &#123;</span><br><span class="line">    for (var i = 0; i &lt; this.blooms.length; i++) &#123;</span><br><span class="line">        this.blooms[i].draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">addBloom: function (b) &#123;</span><br><span class="line">    this.blooms.push(b);</span><br><span class="line">&#125;,</span><br><span class="line">removeBloom: function (b) &#123;</span><br><span class="line">    var bloom;</span><br><span class="line">    for (var i = 0; i &lt; this.blooms.length; i++) &#123;</span><br><span class="line">        bloom = this.blooms[i];</span><br><span class="line">        if (bloom === b) &#123;</span><br><span class="line">            this.blooms.splice(i, 1);</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">createRandomBloom: function (x, y) &#123;</span><br><span class="line">    this.createBloom(x, y, Garden.randomInt(Garden.options.bloomRadius.min, Garden.options.bloomRadius.max), Garden.randomrgba(Garden.options.color.rmin, Garden.options.color.rmax, Garden.options.color.gmin, Garden.options.color.gmax, Garden.options.color.bmin, Garden.options.color.bmax, Garden.options.color.opacity), Garden.randomInt(Garden.options.petalCount.min, Garden.options.petalCount.max));</span><br><span class="line">&#125;,</span><br><span class="line">createBloom: function (x, y, r, c, pc) &#123;</span><br><span class="line">    new Bloom(new Vector(x, y), r, c, pc, this);</span><br><span class="line">&#125;,</span><br><span class="line">clear: function () &#123;</span><br><span class="line">    this.blooms = [];</span><br><span class="line">    this.ctx.clearRect(0, 0, this.element.width, this.element.height);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Garden.options = &#123;</span><br><span class="line">petalCount: &#123;</span><br><span class="line">    min: 8,</span><br><span class="line">    max: 15</span><br><span class="line">&#125;,</span><br><span class="line">petalStretch: &#123;</span><br><span class="line">    min: 0.1,</span><br><span class="line">    max: 3</span><br><span class="line">&#125;,</span><br><span class="line">growFactor: &#123;</span><br><span class="line">    min: 0.1,</span><br><span class="line">    max: 1</span><br><span class="line">&#125;,</span><br><span class="line">bloomRadius: &#123;</span><br><span class="line">    min: 8,</span><br><span class="line">    max: 10</span><br><span class="line">&#125;,</span><br><span class="line">density: 10,</span><br><span class="line">growSpeed: 1000 / 60,</span><br><span class="line">color: &#123;</span><br><span class="line">    rmin: 128,</span><br><span class="line">    rmax: 255,</span><br><span class="line">    gmin: 0,</span><br><span class="line">    gmax: 128,</span><br><span class="line">    bmin: 0,</span><br><span class="line">    bmax: 128,</span><br><span class="line">    opacity: 0.1</span><br><span class="line">&#125;,</span><br><span class="line">tanAngle: 60</span><br><span class="line">&#125;;</span><br><span class="line">Garden.random = function (min, max) &#123;</span><br><span class="line">return Math.random() * (max - min) + min;</span><br><span class="line">&#125;;</span><br><span class="line">Garden.randomInt = function (min, max) &#123;</span><br><span class="line">return Math.floor(Math.random() * (max - min + 1)) + min;</span><br><span class="line">&#125;;</span><br><span class="line">Garden.circle = 2 * Math.PI;</span><br><span class="line">Garden.degrad = function (angle) &#123;</span><br><span class="line">return Garden.circle / 360 * angle;</span><br><span class="line">&#125;;</span><br><span class="line">Garden.raddeg = function (angle) &#123;</span><br><span class="line">return angle / Garden.circle * 360;</span><br><span class="line">&#125;;</span><br><span class="line">Garden.rgba = function (r, g, b, a) &#123;</span><br><span class="line">return &#x27;rgba(&#x27; + r + &#x27;,&#x27; + g + &#x27;,&#x27; + b + &#x27;,&#x27; + a + &#x27;)&#x27;;</span><br><span class="line">&#125;;</span><br><span class="line">Garden.randomrgba = function (rmin, rmax, gmin, gmax, bmin, bmax, a) &#123;</span><br><span class="line">var r = Math.round(Garden.random(rmin, rmax));</span><br><span class="line">var g = Math.round(Garden.random(gmin, gmax));</span><br><span class="line">var b = Math.round(Garden.random(bmin, bmax));</span><br><span class="line">var limit = 5;</span><br><span class="line">if (Math.abs(r - g) &lt;= limit &amp;&amp; Math.abs(g - b) &lt;= limit &amp;&amp; Math.abs(b - r) &lt;= limit) &#123;</span><br><span class="line">    return Garden.rgba(rmin, rmax, gmin, gmax, bmin, bmax, a);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    return Garden.rgba(r, g, b, a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-构造画布大小和运动轨迹">5.构造画布大小和运动轨迹</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var $window = $(window), gardenCtx, gardenCanvas, $garden, garden;</span><br><span class="line">var clientWidth = $(window).width();</span><br><span class="line">var clientHeight = $(window).height();</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="function"><span class="title">function</span></span> () &#123;</span></span><br><span class="line">    // setup garden</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">loveHeart = $(<span class="string">&quot;#loveHeart&quot;</span>);</span></span><br><span class="line">var offsetX = $loveHeart.width() / 2;</span><br><span class="line">var offsetY = $loveHeart.height() / 2 - 55;</span><br><span class="line">    $garden = $(&quot;#garden&quot;);</span><br><span class="line">    gardenCanvas = $garden[0];</span><br><span class="line">gardenCanvas.width = $(&quot;#loveHeart&quot;).width();</span><br><span class="line">    gardenCanvas.height = $(&quot;#loveHeart&quot;).height()</span><br><span class="line">    gardenCtx = gardenCanvas.getContext(&quot;2d&quot;);</span><br><span class="line">    gardenCtx.globalCompositeOperation = &quot;lighter&quot;;</span><br><span class="line">    garden = new Garden(gardenCtx, gardenCanvas);</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&quot;#content&quot;</span>).css(<span class="string">&quot;width&quot;</span>, <span class="variable">$loveHeart</span>.width() + $(<span class="string">&quot;#code&quot;</span>).width());</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&quot;#content&quot;</span>).css(<span class="string">&quot;height&quot;</span>, Math.max(<span class="variable">$loveHeart</span>.height(), $(<span class="string">&quot;#code&quot;</span>).height()));</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&quot;#content&quot;</span>).css(<span class="string">&quot;margin-top&quot;</span>, Math.max((<span class="variable">$window</span>.height() - $(&quot;#content&quot;).height()) / 2, 10));</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&quot;#content&quot;</span>).css(<span class="string">&quot;margin-left&quot;</span>, Math.max((<span class="variable">$window</span>.width() - $(&quot;#content&quot;).width()) / 2, 10));</span></span><br><span class="line"></span><br><span class="line">    // renderLoop</span><br><span class="line">    setInterval(function () &#123;</span><br><span class="line">        garden.render();</span><br><span class="line">    &#125;, Garden.options.growSpeed);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(window).resize(<span class="function"><span class="title">function</span></span>() &#123;</span></span><br><span class="line">    var newWidth = $(window).width();</span><br><span class="line">    var newHeight = $(window).height();</span><br><span class="line">    if (newWidth != clientWidth &amp;&amp; newHeight != clientHeight) &#123;</span><br><span class="line">        location.replace(location);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function getHeartPoint(angle) &#123;</span><br><span class="line">var t = angle / Math.PI;</span><br><span class="line">var x = 19.5 * (16 * Math.pow(Math.sin(t), 3));</span><br><span class="line">var y = - 20 * (13 * Math.cos(t) - 5 * Math.cos(2 * t) - 2 * Math.cos(3 * t) - Math.cos(4 * t));</span><br><span class="line">return new Array(offsetX + x, offsetY + y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function startHeartAnimation() &#123;</span><br><span class="line">var interval = 50;</span><br><span class="line">var angle = 10;</span><br><span class="line">var heart = new Array();</span><br><span class="line">var animationTimer = setInterval(function () &#123;</span><br><span class="line">var bloom = getHeartPoint(angle);</span><br><span class="line">var draw = true;</span><br><span class="line">for (var i = 0; i &lt; heart.length; i++) &#123;</span><br><span class="line">var p = heart[i];</span><br><span class="line">var distance = Math.sqrt(Math.pow(p[0] - bloom[0], 2) + Math.pow(p[1] - bloom[1], 2));</span><br><span class="line">if (distance &lt; Garden.options.bloomRadius.max * 1.3) &#123;</span><br><span class="line">draw = false;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (draw) &#123;</span><br><span class="line">heart.push(bloom);</span><br><span class="line">garden.createRandomBloom(bloom[0], bloom[1]);</span><br><span class="line">&#125;</span><br><span class="line">if (angle &gt;= 30) &#123;</span><br><span class="line">clearInterval(animationTimer);</span><br><span class="line">showMessages();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">angle += 0.2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, interval);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">(function($</span><span class="language-bash">) &#123;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">.fn.typewriter = <span class="function"><span class="title">function</span></span>() &#123;</span></span><br><span class="line">this.each(function() &#123;</span><br><span class="line">var $ele = $(this), str = $ele.html(), progress = 0;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ele.html(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line">var timer = setInterval(function() &#123;</span><br><span class="line">var current = str.substr(progress, 1);</span><br><span class="line">if (current == &#x27;&lt;&#x27;) &#123;</span><br><span class="line">progress = str.indexOf(&#x27;&gt;&#x27;, progress) + 1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">progress++;</span><br><span class="line">&#125;</span><br><span class="line">$ele.html(str.substring(0, progress) + (progress &amp; 1 ? &#x27;_&#x27; : &#x27;&#x27;));</span><br><span class="line">if (progress &gt;= str.length) &#123;</span><br><span class="line">clearInterval(timer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, 75);</span><br><span class="line">&#125;);</span><br><span class="line">return this;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br><span class="line">function timeElapse(date)&#123;</span><br><span class="line">var current = Date();</span><br><span class="line">var seconds = (Date.parse(current) - Date.parse(date)) / 1000;</span><br><span class="line">var days = Math.floor(seconds / (3600 * 24));</span><br><span class="line">seconds = seconds % (3600 * 24);</span><br><span class="line">var hours = Math.floor(seconds / 3600);</span><br><span class="line">if (hours &lt; 10) &#123;</span><br><span class="line">hours = &quot;0&quot; + hours;</span><br><span class="line">&#125;</span><br><span class="line">seconds = seconds % 3600;</span><br><span class="line">var minutes = Math.floor(seconds / 60);</span><br><span class="line">if (minutes &lt; 10) &#123;</span><br><span class="line">minutes = &quot;0&quot; + minutes;</span><br><span class="line">&#125;</span><br><span class="line">seconds = seconds % 60;</span><br><span class="line">if (seconds &lt; 10) &#123;</span><br><span class="line">seconds = &quot;0&quot; + seconds;</span><br><span class="line">&#125;</span><br><span class="line">var result = &quot;&lt;span class=\&quot;digit\&quot;&gt;&quot; + days + &quot;&lt;/span&gt; days &lt;span class=\&quot;digit\&quot;&gt;&quot; + hours + &quot;&lt;/span&gt; hours &lt;span class=\&quot;digit\&quot;&gt;&quot; + minutes + &quot;&lt;/span&gt; minutes &lt;span class=\&quot;digit\&quot;&gt;&quot; + seconds + &quot;&lt;/span&gt; seconds&quot;; </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&quot;#elapseClock&quot;</span>).html(result);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function showMessages() &#123;</span><br><span class="line">adjustWordsPosition();</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&#x27;#messages&#x27;</span>).fadeIn(5000, <span class="function"><span class="title">function</span></span>() &#123;</span></span><br><span class="line">showLoveU();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function adjustWordsPosition() &#123;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&#x27;#words&#x27;</span>).css(<span class="string">&quot;position&quot;</span>, <span class="string">&quot;absolute&quot;</span>);</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&#x27;#words&#x27;</span>).css(<span class="string">&quot;top&quot;</span>, $(<span class="string">&quot;#garden&quot;</span>).position().top + 195);</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&#x27;#words&#x27;</span>).css(<span class="string">&quot;left&quot;</span>, $(<span class="string">&quot;#garden&quot;</span>).position().left + 70);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function adjustCodePosition() &#123;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&#x27;#code&#x27;</span>).css(<span class="string">&quot;margin-top&quot;</span>, ($(<span class="string">&quot;#garden&quot;</span>).height() - $(<span class="string">&quot;#code&quot;</span>).height()) / 2);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function showLoveU() &#123;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&#x27;#loveu&#x27;</span>).fadeIn(3000);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-效果展示">6.效果展示</h2><ul><li><p class='p blue'>请使用电脑端查看效果</p></li></ul><div class="tag link"><a class="link-card" title="爱心效果演示" href="/assets/heart.html"><div class="left"><img src="https://tuchuang.voooe.cn/images/2024/05/10/1715347320685.png"/></div><div class="right"><p class="text">爱心效果演示</p><p class="url">/assets/heart.html</p></div></a></div>]]></content>
    
    
    <summary type="html">电子版爱心代码</summary>
    
    
    
    <category term="代码" scheme="https://www.hacp.top/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="代码" scheme="https://www.hacp.top/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>《且听风吟》</title>
    <link href="https://www.hacp.top/posts/3.html"/>
    <id>https://www.hacp.top/posts/3.html</id>
    <published>2023-09-15T10:50:00.000Z</published>
    <updated>2023-09-15T10:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size="4px"><b>导读 📝</b></font></p><p>《且听风吟》是村上春树的代表作，也是无数人的青春回忆，每个人的青春里都有一个浪漫邂逅却无法相守的人，这个人，或许是遗憾，也可以是美好，折射着感情里最温情的一面。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/imageaa531157e524a4d6.png" alt="" /></p><p>村上春树作为知名作家，用一支笔写尽了人间的悲欢离合，他将青春的色彩、爱情的悲喜、人性的不同都刻画的深入人心。</p><p>也因此，每次读他的文字，都给人一种沁人心脾的感觉，而他首次提笔就得奖的代表作《且听风吟》，以一场回忆为开始的故事，在邂逅一个小女孩之后，若隐若现的爱情和无疾而终的结果，讲透了青春时代里的无奈与迷茫，也体现了人性对感情最初善良的一面。</p><p>也许，青春时代的爱情是最纯粹的，也是最浪漫和不掺杂任何杂念的，一个男孩真正动了心之后，是不会以任何方式伤害女孩的。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/imageafd7f6c59f1e9898.png" alt="" /></p></div><h2 id="1、不会趁机占有。">1、不会趁机占有。</h2><p>《且听风吟》里，男主在酒吧里邂逅了喝得烂醉如泥的女主。</p><p>这是一个左手没有小指的少女，那晚，她的心情差到了极点，试图用酒精麻痹自己，恰巧遇到了正义的男主。</p><p>出于怜爱之心，男主大费周章地将女主送回了家。</p><p>好人做到底的男主，让女主安全着床后没有马上离去，而是开始了无言的守护。</p><p>女主不省人事地在酣睡，不自觉中脱掉了自己的衣服，而男主，自始至终守护在身边，没有任何非分之想，也没有做什么出格的事。</p><p>等到第二天醒来，女主看着赤裸的自己，以为被男主占了便宜，骂了男主。</p><p>但男主解释了一番后，便不再理会了，他知道，清者自清。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image2d1f261677390016.png" alt="" /></p><p>对于女主，男主是有好感的，但他没有选择趁机占有，这样的行为，才是君子作风。</p><p>每个人都会有情绪低落的时刻，而去酒吧放松也是解压的一种方式，可在生活中，大部分女孩子根本不敢这么做，因为一旦被酒精弄迷糊了，就有可能被坏男孩占了便宜。</p><p>而书中的男主，纵然对女孩有好感，也没有伺机而动，这样的行为，不免让他的喜欢上升了一个档次。</p><p><b>喜欢是占有，爱是保护。</b></p><p><b>一个深爱你的男人，懂得保护脆弱的你，懂得在你需要的时候，给予守护和陪伴，这样的男人，才是值得托付终身的。</b></p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image9d205a4f5df770ba.png" alt="" /></p><h2 id="2、愿意把选择权交给你。">2、愿意把选择权交给你。</h2><p>《且听风吟》里，在和女主分别后，男主开启了疯狂的想念模式。</p><p>那一夜的邂逅，在他心里埋下了爱情的种子，却没有机会让它生根发芽，因为他连女孩叫什么都不知道。</p><p>百无聊赖之际，男孩去一家唱片店挑选歌曲，令人意外的是，女主就是唱片店的售卖员。</p><p>男主喜出望外，邀约女主一起吃饭。</p><p>但因为之前的误会，女主有点不情愿，而男主在看出了女主的为难之后，并没有强迫，他把吃饭的选择权交给了女主。</p><p>这一举动很是暖心。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/imaged56e59c7d3babf99.png" alt="" /></p><p>现实中，很少有男孩子懂得照顾喜欢的人的意愿，只习惯把自己的想法强加在爱人身上。</p><p>而男主，却把选择权交给了女主，从内心深处尊重女主的意愿。</p><p>也是他的尊重，赢得了女主的好感，最终，女主主动邀请他，和他共进晚餐，两人的感情更近了一步。</p><p>尊重一个人的意愿，是爱情里最基本的常识，却也是最难做到的一点。</p><p><b>大部分的男孩，都喜欢用自己的观念定义两个人相处方式，不注重对方意愿，不在乎对方感受；殊不知，细节成就爱情，感情也败给细节。</b></p><p>每个女孩都希望在爱情里有一点选择的独立空间，可大多数的女孩都失望了。</p><p>所以在感情里，遇到一个会把选择权交给你的男孩，一定要懂得珍惜，因为那个人，才是用心爱你的人。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image6cadacf86215f7e1.png" alt="" /></p><h2 id="3、尊重彼此的选择。">3、尊重彼此的选择。</h2><p>村上春树并没有在《且听风吟》里留下有情人终成眷属的完美结局。</p><p>这段真挚而美好的感情只存在了18天，18天后，女主离开了男主的生活，从此，男主再也没有见过女孩。</p><p>他等待过女孩，也期待过两人的重逢，可始终都没有等到。最后，男主将这份爱，埋藏于心中，尘封于记忆，带着美好的回忆，走向了余生。</p><p>不是所有的爱情，都一定要占为己有；驻足于回忆的感情，更加弥足珍贵。</p><p>原来，在感情里，相爱不一定能相守，相守不一定能相伴一辈子。正如作家周国平曾说：“爱的价值在于它自身，而不在于它的结果。”<p><p>生活有太多不确定性，有些人，注定只是彼此生命中的过客。</p><p>既然没有能力决定两个人的幸福，不如尊重彼此的选择，给对方留下一句美好的祝福，给自己一个重新开始的可能。</p><p>爱情，不一定要相守才美好；留在回忆里的爱人，也值得缅怀一生。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/imageff5767fd16acdd2c.png" alt="" /></p>]]></content>
    
    
    <summary type="html">你会懂一个男人最高级的爱</summary>
    
    
    
    <category term="阅读" scheme="https://www.hacp.top/categories/%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="书籍" scheme="https://www.hacp.top/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>《活着》</title>
    <link href="https://www.hacp.top/posts/4.html"/>
    <id>https://www.hacp.top/posts/4.html</id>
    <published>2023-09-09T10:19:03.000Z</published>
    <updated>2023-09-09T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size="4px"><b>导读 📝</b></font></p><p>身处荒诞的世界，每个人都该读读余华。</p><p>余华的代表作《活着》风靡全球，打动一代又一代读者。</p><p>生命不能承受之轻，能接受之痛，愿我们都能从中找到力量。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/10/image5613326d3feb6eb4.png" alt="" /></p><p>作家余华说：</p><p>“人是为活着本身而活着的，而不是为了活着之外的任何事物所活着。”</p><p>《活着》的主人公徐福贵，少年时赌光家产，气死父亲；中年丧子又丧妻，老年时又失去了唯一的外孙。</p><p>然而这一切不幸，并没有让他倒下。</p><p>他在承受了巨大的痛苦之后，学会了坚强面对一切，活出了生命应有的深度和厚度。</p><p>读完《活着》，你会发现韧性是徐福贵的人生底色。</p><p>正是这份韧性承载着他的使命，决定了他能走多远。</p></div><h2 id="1-韧性，是认清现实后的复原力">1.韧性，是认清现实后的复原力</h2><p>徐老爷有一百多亩田地，是方圆几十里的大户。</p><p>福贵是他唯一的独苗，爷俩儿是远近闻名的阔老爷和阔少爷。</p><p>徐老爷为了让福贵好好读书，还专门给他请了私塾先生。</p><p>可他天生不是读书的那块料，先生让他念书时，他居然狂妄地对先生说：“好好听着，爹给你念一段。”</p><p>私塾先生被他气得半死，忍不住在徐老爷面前告状：“你家少爷长大了准能当个二流子。”</p><p>没想到，老先生一语成齑。</p><p>长大后的福贵，吃喝嫖样样俱全，后来他还迷上了赌博。</p><p>一开始赌输了，他就会偷母亲、老婆的首饰去还债。后来他嫌麻烦，干脆开始赊账。</p><p>这一赊账，他就不清楚自己究竟输了多少。而且他还天真地认为，能从赌场赢回徐老爷年轻时输掉的家产。</p><p>直到有一天，开赌局的龙二不再让他赊账。他才知道自己不仅输光了家里的一百多亩田地，还有家产。</p><p>福贵像生了一场大病，他脸色苍白，跌跌撞撞地回到家里。</p><p>徐老爷得知这个消息，没过多久就被气死了。怀着身孕的家珍，也被他的老丈人接回城里去。</p><p>原本幸福的一家人被弄得七零八散，而造成这一悲剧的根源就是福贵的赌博。</p><p>福贵一家人搬到茅草屋去居住，年迈的母亲为了生计挎着篮子、扭着小脚去田里劳作，还有年幼的女儿凤霞跟着他挨饿受苦。</p><p>一向在浑浑噩噩中度日的福贵，他的心突然被什么东西刺了一下，很疼很疼。</p><p>福贵对自己说：“我想想再不能像从前那样过日子，我得养活我娘和凤霞。”</p><p>他的觉醒就在一瞬间，唤醒他的是深植于内心深处的韧性，也可以说是他与生俱来的复原力。</p><p>是的，人生的道路不会一帆风顺，必然会伴随着挫折、磨难。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/10/image5b1c7894dfc53ac6.png" alt="" /></p><p>如果我们能在考验中清醒找到自己的定位，重新开始，才会立于不败之地。</p><p>有句话说得好：</p><p>“具有复原力的人，能够在面临困境时不抱怨，并且迅速平复内心的焦躁不安，从容地面对现实，灵活应对。”</p><p>由此可见，复原力是一个人迅速走向成熟，承担责任的一种体现。</p><p>韧性，是面对困境的坚忍不拔</p><h2 id="2-心之所向，素履以往。">2.心之所向，素履以往。</h2><p>福贵勇敢地迈出了行动的第一步，他想凭借自己的双手养活母亲和女儿。</p><p>很快，他从龙二手里租来了五亩地。</p><p>对于从小娇生惯养，没有干过农活的他来说，这项工作难度可不小。</p><p>为了让庄稼赶上播种季节，有个好收成。</p><p>他常常起早贪黑，有时手脚擦破皮流血了，他就把泥巴糊到伤口处加速愈合。</p><p>这样的日子很苦很累，福贵却睡得非常踏实。他甚至幻想着，老徐家还会慢慢发达起来。</p><p>空闲时，徐福贵会惦记家珍和她肚子里的孩子。在忐忑不安的等待中，家珍带着儿子有庆回来了。</p><p>福贵看到家珍回来，非常开心。这回，他知道心疼家珍了，脏活、累活他都抢着干，这个家正在朝着好的方向去发展。<p>然而命运的走向，从来都是不以人的意志为转移。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/10/image1821714d105e4f05.png" alt="" /></p><p>娘病了，福贵去城里请郎中。阴差阳错，却被国军抓了壮丁。</p><p>当壮丁的日子里，他几次与死神擦肩而过。那时支撑着他活下去的唯一信念就是回家。</p><p>两年后，福贵回到家里时，娘已离世，凤霞也在一次重病中变成了聋哑女孩。</p><p>面对这一切变故，福贵没有任何怨言，而是坦然接受。</p><p>因为福贵经历战争的考验，激发了他与生俱来的韧性，还有他对生活坚忍不拔的毅力。他相信一切都会好起来。</p><p>当福贵看到贪婪的龙二被枪毙后，他更是对未来充满了信心。他对自己说，这下可要好好活了。</p><p> “向着长期的目标，坚持自己的激情，即便经历失败，依然能够坚持不懈地努力下去，这种品质就叫做坚毅。”</p><p>福贵正是凭借着这份坚持和毅力，承受了常人所不能承受的苦难，走出了属于自己的那份天地。</p><p>因为他坚信只有好好活着，才是人生最大的赢家。</p><h2 id="3-韧性，是历经磨难的云淡风轻">3.韧性，是历经磨难的云淡风轻</h2><p>清贫的日子里，福贵一家人其乐融融。<p>转眼间，凤霞已是大姑娘，出落得亭亭玉立，有庆也到了读书的年龄。</p><p>有庆是个懂事的孩子，他不仅帮衬着福贵干家务活儿，他还因为长跑成绩优秀，给家里挣来了荣誉。</p><p>看似平静的生活，实际上是暗流汹涌。</p><p>县长的女人生孩子大出血，学校组织孩子们去献血。有庆的血型最匹配，谁知下手不知轻重的医生，抽干了有庆的血。</p><p>福贵想不明白，早上还是活蹦乱跳的儿子，到了晚上就变成一具没有温度的躯体。</p><p>福贵的心在滴血，深入骨髓的痛撕扯着他，连带着身上的每寸肌肤。</p><p>有庆走了，福贵认为得了软骨病的家珍肯定经受不住打击，也会离他而去。</p><p>就在所有人对家珍的病不抱任何希望时，家珍居然奇迹般的挺了过来。</p><p>凤霞也嫁给了城里的搬运工二喜。二喜长得很一般，对凤霞却是实打实地好。</p><p>没过多久，凤霞怀孕的好消息给这个多灾多难的家庭带来了一丝丝喜悦。</p><p>“十月怀胎，一朝分娩。”在一个雪下得很大的日子里，凤霞生下了儿子。</p><p>谁知福贵前脚刚走，凤霞就大出血，不到天黑就断了气。</p><p>家珍给凤霞的儿子取名——苦根。凤霞走后不到三个月，家珍也走了。</p><p>福贵只有二喜和苦根两个亲人了。二喜既当爹又当妈，照看苦根很辛苦。</p><p>在苦根四岁那年，二喜被两排水泥板夹死了。</p><p>福贵已经没有眼泪了，他已经被生活磨平了棱角。</p><p>面对亲人一个个的离去，他已经习惯了面对。</p><p>他对自己说，只要有苦根在比什么都强，香火还会往下传，这日子还得好好过下去。</p><p>苦根是他的命根子，更是他希望的拐杖。福贵虽然很累，可是心里很高兴。有了苦根，他活着就有了奔头。</p><p>看着苦根一天比一天懂事，福贵睡觉都能咧着嘴笑醒。</p><p>就在福贵对未来充满希望时，苦根却因吃炒豆子撑死了。这时的福贵，已经不会哭了。</p><p>他的眼泪流在了心底，化为应对生活的勇气。</p><p> 尼采说：</p><p>“凡杀不死我的，必将让我更强大。”</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/10/image42d3586c40a57402.png" alt="" /></p><p>福贵痛定思痛，他深知要想活下去，就必须承受这一切。</p><p>在苦根死后的第二年，福贵买了一头和他一样老的牛。</p><p>他给老牛取名叫福贵。他每天都会和老牛像知心朋友一样，说说话，唠唠家常。</p><p>有时，他和别人谈起他所经历的过往，也是不悲不喜，淡定从容。</p><p>作家白落梅说，走过平湖烟雨，岁月山河，那些历尽劫数，尝遍百味的人，会更加生动而干净。</p><p>福贵就是这样的人，苦难让他学会面对，让他淡定从容。</p><p>他的生命有了韧性，他的人生更加厚重。</p>]]></content>
    
    
    <summary type="html">心理韧性，决定了一个人能走多远</summary>
    
    
    
    <category term="阅读" scheme="https://www.hacp.top/categories/%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="书籍" scheme="https://www.hacp.top/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>《天黑以后》</title>
    <link href="https://www.hacp.top/posts/2.html"/>
    <id>https://www.hacp.top/posts/2.html</id>
    <published>2023-08-15T10:40:03.000Z</published>
    <updated>2023-08-15T10:40:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size="4px"><b>导读 📝</b></font></p><p>《天黑以后》讲述了入夜后的生活，用真实又无奈的心路历程，解开了烦恼的根源，让人明白，若想从心灵的伤害中解脱，唯有先面对自己的痛苦。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/imagee81cf66452274d68.png" alt="" /></p><p>烦恼，是每个人有的，它像影子一样，如影随形。</p><p>以前的时代，电子设备还没有普及的时候，亲朋好友聚在一起聊聊天，烦恼好像就能得到释放；可如今，越来越多的高科技方便了生活，却也阻碍了人们的沟通。</p><p>于是乎，大部分的人在白天里光鲜亮丽，在夜晚间黯然神伤，到处寻找鸡汤试图安慰自己受伤的心灵，却也抑郁的情绪贯穿始终。</p><p>其实，说到底，是没有学会与自己和解。而《天黑以后》这本书，精准地表达了人们的困惑，让读者了解到：原来做个开心的人，也没那么难。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/imageef274f2aa9608d63.png" alt="" /></p></div><h2 id="1、人人都有不同的战场。">1、人人都有不同的战场。</h2><p>《天黑以后》是日本作家村上春树迈向新小说的标志性杰作，讲述了冬日，东京，深夜11点到清晨6点的故事。</p><p>19岁的玛丽，是外语大学里学中文的学生，她有着与众不同之处，那就是“身为日本人，讲中国话的次数多于讲日本话。”</p><p>同时，她也是个双面人物，外表高傲，内心自卑，有着不为人知的烦恼，对生活和周围的事物模棱两可。</p><p>她与同在屋檐下的姐姐爱丽从来没有过推至心腹地谈心交意，也从来没有过一次争吵与矛盾，各过各的的生活，各自思想。</p><p>书中有这么一句话：</p><blockquote><p>“人人都有不同的战场。”</p></blockquote><p>我想玛丽和爱丽姐妹俩人便是如此各自面对着战场硝烟。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image073c6c44e175599d.png" alt="" /></p><p>姐姐爱丽长得美丽动人，初中上电视节目，大学读贵族大学，在他人眼里这便是所说的“别人家的孩子”的标准。</p><p>可是在这光鲜亮丽的外表之下，却有难以言说的苦楚：过敏症，药物依赖症，以及一些不便对人提及的个人问题。</p><p>各自的内心战争便是如此，每个人都有自己的黑夜，而别人却总是只看见她的光芒四射的晴天。说不出口的秘密，是一场发酵的情绪，随时会在黑夜里崩溃瓦解。</p><p>所以，与人洽谈和沟通，推心置腹地交流，才有可能获得内心的宁静。</p><p>可大多数的人，包括玛丽和爱丽，都若无其事地将心事掩埋在心底，任由情绪泛滥。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image6da25e190b0a7b6d.png" alt="" /></p><p>最后，姐姐爱丽在这场黑暗中，进入了长达两个月的无休无止、无缘无故地“长眠”，她用长眠来对抗她的烦恼对抗那无尽黑暗。</p><p>面对姐姐无休无止地昏睡，无法忍受的玛丽离开了家，去餐饮馆看书抽烟，打发时间，她用彻夜不眠来排遣烦恼，试图在这一夜之旅中寻找心灵的安慰。</p><p>玛丽在和与熏、蟋蟀等人一起救助中国女孩的过程中，渐渐地向他们说出自己的心事，最终解开心结。</p><p>原来“恶”只是困境的一种出口，他们心底善良并没有“恶”，只是困境让“恶”给逃出牢笼肆虐那些心中硝烟战场的人们罢了。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image2a794954b44642fc.png" alt="" /></p><h2 id="2、每个人都有自己的弱点">2、每个人都有自己的弱点</h2><p>生活中，有太多的人，戴着虚伪的面具生活，用否定的语气拒绝着自己的懦弱，伪装自己快乐幸福，却把所有的狼狈都压抑在心底。</p><p>这么做的结果，并不能得到救赎，反而会郁郁寡欢，更有甚者，还会患上抑郁症。</p><p>生活即使再不容易，也要城市的面对自己的心，面对自己内心那份咆哮怒吼的另一面，然后找到解决的办法。</p><p>唯有如此，才能在黑夜里奋力前行。</p><p>在书中，不止爱丽与玛丽姐妹俩，百川表面上过着波澜不惊的规律生活，其实他努力压抑自己的需求、欲望、情绪。</p><p>在他把那个女孩打得遍体鳞伤并拿走她的衣物时，这一阴暗且疯狂的自己连他都不认识了，原来“黑暗”到来之时才真正地明白自己内心的波涛汹涌。</p><p>那些私人的情绪或秘密就像浓郁的黑夜，透不进日光。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image6968224526161673.png" alt="" /></p><p>是啊，每个人都有自己的烦恼，每个人都有自己的弱点。</p><p>但细细思来，我们都应该要正确地认识自己，并不只是光明的那个自己，也应该有黑暗下的那个自己。</p><p>当我们顿悟了与自己运用非暴力沟通交流内心深处时，我们就不会害怕黑暗的到来，从而具有自我疗伤，自我认知的意味。</p><p>若因为逃避黑暗，而不断地变换自己的工作生活环境，内心的不安与害怕在黑夜来临时开始发酵，平静也就渐行渐远。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image280c55b663f4e829.png" alt="" /></p><h2 id="3、要学会与自己和解">3、要学会与自己和解</h2><p>刘若英曾说过：“人这一生终究要学会与自己和解。”</p><p>我们赢过了漂泊，跑赢的时间，分辨了黑白，也要学会接受这个黑夜，虽说白天之光岂说黑夜之深，但当太阳照耀时才叫光芒万丈。</p><p>每个人，都独自怀有各种各样的烦恼，无言呻吟，无法顺利前行需要帮助，需要像白天那样光明的照耀。</p><p>每个人都并非无病呻吟，村上春树的笔法清淡而又浓郁，在他的笔下，每一个人都用自己的一言一行的烦恼。</p><p>或许人与人之间的交流，和自己与内心的交流，才能从这无尽黑暗中找到灯火，会发现爱与恶并非对立；只是黑暗让恶有了出口，但并不妨碍爱的存在，于是表达成为了渡过黑暗的舟，和解成为了桨。<p><p>在书里，村上春树站在高桥的角度说：</p><blockquote><p>“一个人一生中只要做过一次孤儿，那他到死都是孤儿。”</p></blockquote><p>人生就是从今天走向明天，我们只需平淡地活下去，我们慢慢走路，多多喝水。</p><p>书中的爱丽最终还是想明白了，她抱住了躺在床上长眠的姐姐，她们相互传递身体的暖意，她也满怀信心地等着姐姐的苏醒。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image55a75f07137432c3.png" alt="" /></p><p>在书里，有这么一句话：</p><blockquote><p>“新的一天已经迫在眉睫，而旧的一天却拖拽着沉重的衣裾有未离开。”</p></blockquote><p>这对应了现代人每到晚上就抑郁难过的心态，是因为旧的包袱里情绪在泛滥，过去的伤害如影随形，只能伪装坚强，用力挤出笑容，其实撕开伪装，谁都过得不快乐。</p><p>或许每个人遇到的烦恼并不一样，但我们需要的是相互倾述、相互理解、相互帮助，新的一天就要到来，无论过去的黑暗多么不堪，我们终将冲破黑暗迎来光明。</p><p>人类的双手为何为双，因为一只手握现在另一只手握未来，他们终在黎明到来的那一刻将清晨崭新的光芒从容地膨胀开。</p><p>我们若迎来了黑暗，那便是光明到来前的预兆。</p>]]></content>
    
    
    <summary type="html">解决成长的烦恼，只需要做对一件事</summary>
    
    
    
    <category term="阅读" scheme="https://www.hacp.top/categories/%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="书籍" scheme="https://www.hacp.top/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>《云边有个小卖部》</title>
    <link href="https://www.hacp.top/posts/1.html"/>
    <id>https://www.hacp.top/posts/1.html</id>
    <published>2023-08-09T10:19:03.000Z</published>
    <updated>2023-08-09T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size="4px"><b>导读 📝</b></font></p><p>张嘉佳作品《云边有个小卖部》。云边镇的刘十三，从小与开小卖部的外婆王莺莺相依为命。刘十三，各方面都很平凡，幸运的是，在他失意的时候，总有在意他的人陪伴在身边。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image.png" alt="" /></p><p>总有那么一些时刻，我们爱的人会与我们不辞而别，爱我们的人会离我们而去，互相陪伴的人会突然失散。</p><p>历经世事沧桑，曾经无数次想逃离的故乡，不管最终是否重新回去，都会在人生中留下不可磨灭的印记。</p><p>《云边有个小卖部》，云边镇的刘十三，各方面都很平凡，幸运的是，在他失意的时候，总有在意他的人陪伴在身边。</p><p>在这个世界上，活得轰轰烈烈的人终归是极少数，大多数的人，平凡如你我，简简单单的生活，从年少时的好好学习，到后来埋头苦读迎战高考，再到后来削尖脑袋般地找工作，之后又兢兢业业的朝九晚五甚至开启996的工作模式。从校园时代遇到怦然心动的人，到后来在挣扎、眼泪和痛苦中分开，最后遇到携手步入婚姻的人。</p><p><b>我们都很平凡，但平凡的你我，身边也会有这样一个人，TA也平凡，但TA犹如明亮的光，温暖着我们孤独的心，也照亮着我们的人生。平凡如你我，也会不经意间成为一束光，温暖着别人，照亮着别人。</b></p><p>犹如刘十三的外婆王莺莺，犹如刘十三。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image54f8458af0bb9e0a.png" alt="" /></p></div><h2 id="1、笔记本知道一切心事。">1、笔记本知道一切心事。</h2><p>刘十三，像许许多多的小镇青年一样，计划好好学习，渴望上清华北大，远离故乡，看看大城市是否真的比院子里的桃树还美，想去大城市工作生活。</p><p>当同龄人都在娱乐玩耍时，刘十三自律地沉迷于知识的王国。</p><p>刘十三有个笔记本，记下的都是自己的计划。</p><p>刘十三预习复习补习，努力学习，高考分数并没有如愿，刘十三明白了：很多事情，不是仅靠计划、毅力就能做到。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image3034204124edaada.png" alt="" /></p><p>年少时，每个人都有一个笔记本，或有形或无形，里面收藏着所有的心事。</p><p>起初是一项又一项必须完成的任务，随着定下的任务越来越难以完成，就变成了自己一个又一个的愿望，不是所有的愿望都能实现，我们渐渐接受了现实。</p><p>我以前也认为，写下的每一项目标都应该完成，不达标的时候总会沮丧、自我怀疑，后来才明白，不能总是执着于“没有打钩”的事项，那些“被打钩”的事项，是自己踏踏实实付出、没有虚度时光的证明，落笔写下每一个目标的瞬间都是极其郑重认真的。</p><p>翻看一路走来的证据，那些都是自己一个人默默忍受的救赎。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image2ea225aeb42c7999.png" alt="" /></p><h2 id="2、没有放不下的人。">2、没有放不下的人。</h2><p>刘十三大学时喜欢的女生是牡丹。刘十三明白爱情必须给予，可他能拿得出手的，只有尚未到来的未来。</p><p>刘十三一直被蒙在鼓里，当了牡丹两年有名无实的男朋友，牡丹真正的男友另有他人。</p><p>失去爱情，刘十三偶尔还是会想起牡丹。刘十三明白的，牡丹不爱刘十三。</p><p>分开后，刘十三很多次想给牡丹打电话，但都忍住了，最后终于拨通时才知是空号。</p><p>刘十三恍惚时想，他拼尽全力，不过是在重复等待，他本可以发现她并不爱他的事实，等待不能称作努力。</p><p>刘十三由始至终没有埋怨过牡丹。有一天，刘十三突然发现，自己已经不知上次想念牡丹是什么时候了。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image9930ee262d7aefc0.png" alt="" /></p><p>“找一个爱你的人结婚，幸福生活”是多少人的憧憬。在一无所有的年纪，遇上了以为可以携手一生的人，而那个你愿意为其倾尽全力、付出所有的人，最终还是与你分开了。</p><p>过来人会告诉你：爱情终究敌不过现实。可我总认为，<b>千万个分开的理由，归根到底都是因为不够爱，“现实”不过是“不够爱”的一个表面。</b></p><p>你说你要去追求梦想了，或许猴年马月都不可能功成名就，你让对方不要等了，你怕耽误对方的大好前程，可是你有没有想过，对方的梦想里面，恰恰就包含了你。</p><p>你说你不够优秀，给不了对方想要的生活，对方如你所愿和你分手了，你想果然又是一个现实的人，可是你有没有想过，对方早就准备好并肩作战，是你自我放弃的态度，令对方一次又一次感到失望。</p><p>你说你要求不多，然而你总是为对方偶尔的忽略感到不满意，可是你有没有想过，对方已经在自己的能力范围内，尽力做到最好了。</p><p><b>幸好，分手时的痛彻心扉，最终会被时间慢慢治愈，没有放不下的人。缓缓跳动的心，没有死，却不再轻易心动了，不是因为不再相信爱情，而是更加清楚自己想要的是什么样的爱情。</b></p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image391c255f1a6d2e61.png" alt="" /></p><h2 id="3、你再普通，也有人爱你。">3、你再普通，也有人爱你。</h2><blockquote><p>舍友智哥对刘十三的印象：“智哥觉得此人虽然无聊，但脾气甚好。后面一项优点随着熟悉变成了缺点，现在想来，如果想要这样的朋友，只要到天桥往下望，行走的全是刘十三。”</p></blockquote><p>刘十三大学补考、重修都失败，导师帮他争取学位证，千辛万苦总算毕业了。</p><p>刘十三找到了一份卖保险的工作，试用期一事无成，业绩单经常倒数第一。</p><p>刘十三不想让单位领导和同事冷嘲热讽，信誓旦旦立下了卖出一千零一张保单的目标。</p><p>程霜，小学四年级时在云边镇第一次和刘十三相遇，一个得病随时会死去的女孩。</p><p>在刘十三失恋时重逢，鼓励刘十三，与刘十三结伴打车一百六十公里去找牡丹；听到刘十三的保单目标，程霜没有打击他这是一个难于登天的任务，而是出谋划策、收集资料、整理情报，帮助刘十三一步步向一千零一张保单靠近<p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image968ef14f591da3d8.png" alt="" /></p><p>在程霜心中，云边镇最好的是刘十三，童年时，总是给“打劫”的小程霜带东西。</p><p>哪怕刘十三“又懒，又傻，脾气怪，说话难听，心肠软，腿短，没魄力，也就作文写得好点，土了巴叽”，可“这么差劲，一无是处”的刘十三，程霜就是喜欢。</p><blockquote><p>程霜最后留给刘十三几行字：“生命是有光的。在我熄灭以前，能够照亮你一点，就是我所有能做的了。我爱你，你要记得我。”</p></blockquote><p>天赋异禀的幻想，每个人都有过；一鸣惊人、羡煞旁人的美梦，每个人都有过。大家都想成为天才，成为举世无双的存在。</p><p>事实是，埋藏在心里的自卑，时不时就会出现：这么普通的我，真的有人会发自内心爱我吗？</p><p>主角永远只有一个，但从来没有一个剧本，能少得了配角。你再普通，也有人爱你。你再普通，也值得被爱。如果你感受不到被爱，可能只是因为你未曾察觉，那些隐藏的爱。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/imagee4003ca21dcffc5c.png" alt="" /></p><h2 id="4、永远的山，永远的海。">4、永远的山，永远的海。</h2><p>刘十三原本希望大学毕业后，说服外婆王莺莺盘掉铺子，他到大城市付个首付，每天带王莺莺吃鸡蛋灌饼，让王莺莺使用电动麻将桌。</p><p>得知刘十三失恋失业悲伤至极，七十岁的王莺莺，跑到刘十三的城市，灌醉刘十三，一来一去两百公里，开着拖拉机，将七八十斤的行李和一百三的刘十三，拖回了云边镇。</p><p>颠簸一路，喝醉的刘十三一直吐，王莺莺时不时下车替他擦。“艰难，辛苦。”王莺莺的自我感慨，不过是心疼自己的外孙。</p><p><img src="https://tuchuang.voooe.cn/image/z8eKehttps://tuchuang.voooe.cn/image/z8vag" alt="" /></p><p>面对镇里三姑六婆的盘问，王莺莺眉飞色舞，把刘十三塑造成大城市精英的形象。</p><p>刘十三执意要重回城市，王莺莺说出了心里话：“从小到大，你都要去城里，我也没拦着，但你总得让我放心啊……”</p><p>王莺莺厨艺了得，经常做许多好吃的：豇豆炒肉丝、月饼、红烧鲫鱼、蹄髈烧面筋、上汤苋菜、宫保虾球、葱油蛏子、冬瓜排骨汤……刘十三以前上学时，吃泡面的时候，就会放一个王莺莺准备的蛋饺。</p><blockquote><p>刘十三认为自己活得很没意义，想到的都得不到，王莺莺义正辞严：“你怎么能乱想！四肢健全，受过教育，我们家又不是穷到吃不上饭，怎么能说死字？年轻的时候就要走得远远的，吃好多苦，你怕什么！家里有人，我老太婆在，你就有家的，闯得出去，回得了家，才是硬邦邦的活法！”</p></blockquote><p>生老病死，外婆还是离刘十三而去了，最后对刘十三说的话都留在录音笔里。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image75a480e8b61cfdac.png" alt="" /></p><p>刘十三的成长离不开外婆的关怀与疼爱，尽管刘十三还来不及给外婆尽孝心，外婆就已离去，可刘十三也一直是外婆活着的希望啊。</p><p>如果说外婆是刘十三永远的靠山，那么刘十三就是外婆心里永远牵挂的海。</p><p>刘十三和外婆，彼此都是彼此的曙光。</p><p><b>成长就是一个逐渐失去、逐渐告别的过程，那些曾经以为过不去的坎儿，日后重新说起，不过是轻描淡写的两三句。</b></p><p><b>平凡如你我，在不知不觉的某个时刻，我们的存在，突然就照亮了另一个人的生活，因为悲伤不能埋没希望。</b></p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image54ab2177a076ac4f.png" alt="" /></p>]]></content>
    
    
    <summary type="html">平凡如你我，也终会照亮别人的人生</summary>
    
    
    
    <category term="阅读" scheme="https://www.hacp.top/categories/%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="书籍" scheme="https://www.hacp.top/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>Web Share API</title>
    <link href="https://www.hacp.top/posts/52.html"/>
    <id>https://www.hacp.top/posts/52.html</id>
    <published>2023-07-20T10:19:03.000Z</published>
    <updated>2023-07-20T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Web Share API</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><h2 id="概述">概述 <a href="about:blank#%E6%A6%82%E8%BF%B0">#</a></h2><p>网页内容如果要分享到其他应用，通常要自己实现分享接口，逐一给出目标应用的连接方式。这样很麻烦，也对网页性能有一定影响。Web Share API 就是为了解决这个问题而提出的，允许网页调用操作系统的分享接口，实质是 Web App 与本机的应用程序交换信息的一种方式。</p><p>这个 API 不仅可以改善网页性能，而且不限制分享目标的数量和类型。社交媒体应用、电子邮件、即时消息、以及本地系统安装的、且接受分享的应用，都会出现在系统的分享弹窗，这对手机网页尤其有用。另外，使用这个接口只需要一个分享按钮，而传统的网页分享有多个分享目标，就有多少个分享按钮。</p><p>目前，桌面的 Safari 浏览器，手机的安卓 Chrome 浏览器和 iOS Safari 浏览器，支持这个 API。</p><p>这个 API 要求网站必须启用 HTTPS 协议，但是本地 Localhost 开发可以使用 HTTP 协议。另外，这个 API 不能直接调用，只能用来响应用户的操作（比如<code>click</code>事件）。</p><h2 id="接口细节">接口细节 <a href="about:blank#%E6%8E%A5%E5%8F%A3%E7%BB%86%E8%8A%82">#</a></h2><p>该接口部署在<code>navigator.share</code>，可以用下面的代码检查本机是否支持该接口。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (navigator.share) &#123;</span><br><span class="line">  <span class="comment">// 支持</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 不支持</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>navigator.share</code>是一个函数方法，接受一个配置对象作为参数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">navigator.<span class="title function_ invoke__">share</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;WebShare API Demo&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;https://codepen.io/ayoisaiah/pen/YbNazJ&#x27;</span>,</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&#x27;我正在看《Web Share API》&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置对象有三个属性，都是可选的，但至少必须指定一个。</p><ul><li><code>title</code>：分享文档的标题。</li><li><code>url</code>：分享的 URL。</li><li><code>text</code>：分享的内容。</li></ul><p>一般来说，<code>url</code>是当前网页的网址，<code>title</code>是当前网页的标题，可以采用下面的写法获取。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="built_in">document</span>.title;</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">&#x27;link[rel=canonical]&#x27;</span>) ?</span><br><span class="line">  <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">&#x27;link[rel=canonical]&#x27;</span>).href :</span><br><span class="line">  <span class="built_in">document</span>.location.href;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>navigator.share</code>的返回值是一个 Promise 对象。这个方法调用之后，会立刻弹出系统的分享弹窗，用户操作完毕之后，Promise 对象就会变为<code>resolved</code>状态。</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">navigator.share(&#123;</span><br><span class="line">  <span class="name">title</span>: <span class="string">&#x27;WebShare API Demo&#x27;</span>,</span><br><span class="line">  <span class="name">url</span>: <span class="string">&#x27;https://codepen.io/ayoisaiah/pen/YbNazJ&#x27;</span></span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  console.log(<span class="string">&#x27;Thanks for sharing!&#x27;</span>);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">(<span class="built_in">error</span>)</span> =&gt;</span> &#123;</span><br><span class="line">  console.<span class="built_in">error</span>(<span class="string">&#x27;Sharing error&#x27;</span>, <span class="built_in">error</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于返回值是 Promise 对象，所以也可以使用<code>await</code>命令。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">shareButton.addEventListener(<span class="string">&#x27;click&#x27;</span>, async () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    await navigator.share(&#123; <span class="attr">title</span>: <span class="string">&#x27;Example Page&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span> &#125;);</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Data was shared successfully&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;Share failed:&#x27;</span>, err.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分享文件">分享文件 <a href="about:blank#%E5%88%86%E4%BA%AB%E6%96%87%E4%BB%B6">#</a></h2><p>这个 API 还可以分享文件，先使用<code>navigator.canShare()</code>方法，判断一下目标文件是否可以分享。因为不是所有文件都允许分享的，目前图像，视频，音频和文本文件可以分享2。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">if</span> (navigator.canShare &amp;&amp; navigator.<span class="built_in">canShare</span>(&#123; <span class="attribute">files</span>: filesArray &#125;)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，<code>navigator.canShare()</code>方法的参数对象，就是<code>navigator.share()</code>方法的参数对象。这里的关键是<code>files</code>属性，它的值是一个<code>FileList</code>实例对象。</p><p><code>navigator.canShare()</code>方法返回一个布尔值，如果为<code>true</code>，就可以使用<code>navigator.share()</code>方法分享文件了。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (navigator.canShare &amp;&amp; navigator.canShare(&#123; <span class="attr">files</span>: filesArray &#125;)) &#123;</span><br><span class="line">  navigator.share(&#123;</span><br><span class="line">    <span class="attr">files</span>: filesArray,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;Vacation Pictures&#x27;</span>,</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;Photos from September 27 to October 14.&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Share was successful.&#x27;</span>))</span><br><span class="line">  .<span class="keyword">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Sharing failed&#x27;</span>, error));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考链接">参考链接 <a href="about:blank#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">#</a></h2><ul><li><a href="https://css-tricks.com/how-to-use-the-web-share-api/">How to Use the Web Share API</a>, Ayooluwa Isaiah</li><li><a href="https://wicg.github.io/web-share/">Web Share API - Level 1</a>, W3C</li><li><a href="https://developers.google.com/web/updates/2016/09/navigator-share">Introducing the Web Share API</a>, Paul Kinlan, Sam Thorogood</li><li><a href="https://web.dev/web-share/">Share like a native app with the Web Share API</a>, Joe Medley</li></ul><p>本文转自 <a href="https://wangdoc.com/webapi/web-share-api">https://wangdoc.com/webapi/web-share-api</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">Web Share API</summary>
    
    
    
    <category term="webApi" scheme="https://www.hacp.top/categories/webApi/"/>
    
    
    <category term="webApi" scheme="https://www.hacp.top/tags/webApi/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket</title>
    <link href="https://www.hacp.top/posts/51.html"/>
    <id>https://www.hacp.top/posts/51.html</id>
    <published>2023-07-19T10:19:03.000Z</published>
    <updated>2023-07-19T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1>WebSocket</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><p>WebSocket 是一种网络通信协议，很多高级功能都需要它。</p><p>初次接触 WebSocket 的人，都会问同样的问题：我们已经有了 HTTP 协议，为什么还需要另一个协议？它能带来什么好处？</p><p>答案很简单，因为 HTTP 协议有一个缺陷：通信只能由客户端发起。举例来说，我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。HTTP 协议的这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用“轮询”：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。</p><p>轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。因此，工程师们一直在思考，有没有更好的方法。WebSocket 就是这样发明的。</p><h2 id="简介">简介 <a href="about:blank#%E7%AE%80%E4%BB%8B">#</a></h2><p>WebSocket 协议在2008年诞生，2011年成为国际标准。所有浏览器都已经支持了。</p><p>它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。WebSocket 允许服务器端与客户端进行全双工（full-duplex）的通信。举例来说，HTTP 协议有点像发电子邮件，发出后必须等待对方回信；WebSocket 则是像打电话，服务器端和客户端可以同时向对方发送数据，它们之间存着一条持续打开的数据通道。</p><p>其他特点包括：</p><p>（1）建立在 TCP 协议之上，服务器端的实现比较容易。</p><p>（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</p><p>（3）数据格式比较轻量，性能开销小，通信高效。</p><p>（4）可以发送文本，也可以发送二进制数据。</p><p>（5）没有同源限制，客户端可以与任意服务器通信，完全可以取代 Ajax。</p><p>（6）协议标识符是<code>ws</code>（如果加密，则为<code>wss</code>，对应 HTTPS 协议），服务器网址就是 URL。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ws:<span class="regexp">//</span>example.com:<span class="number">80</span><span class="regexp">/some/</span>path</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="WebSocket-握手">WebSocket 握手 <a href="about:blank#websocket-%E6%8F%A1%E6%89%8B">#</a></h2><p>浏览器发出的 WebSocket 握手请求类似于下面的样子：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Upgrade</span><br><span class="line"><span class="attribute">Upgrade</span><span class="punctuation">: </span>websocket</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>example.com</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>null</span><br><span class="line"><span class="attribute">Sec-WebSocket-Key</span><span class="punctuation">: </span>sN9cRrP/n9NdMgdcy2VJFQ==</span><br><span class="line"><span class="attribute">Sec-WebSocket-Version</span><span class="punctuation">: </span>13</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的头信息之中，有一个 HTTP 头是<code>Upgrade</code>。HTTP1.1 协议规定，<code>Upgrade</code>字段表示将通信协议从<code>HTTP/1.1</code>转向该字段指定的协议。<code>Connection</code>字段表示浏览器通知服务器，如果可以的话，就升级到 WebSocket 协议。<code>Origin</code>字段用于提供请求发出的域名，供服务器验证是否许可的范围内（服务器也可以不验证）。<code>Sec-WebSocket-Key</code>则是用于握手协议的密钥，是 Base64 编码的16字节随机字符串。</p><p>服务器的 WebSocket 回应如下。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">101</span> Switching Protocols</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Upgrade</span><br><span class="line"><span class="attribute">Upgrade</span><span class="punctuation">: </span>websocket</span><br><span class="line"><span class="attribute">Sec-WebSocket-Accept</span><span class="punctuation">: </span>fFBooB7FAkLlXgRSz0BT3v4hq5s=</span><br><span class="line"><span class="attribute">Sec-WebSocket-Origin</span><span class="punctuation">: </span>null</span><br><span class="line"><span class="attribute">Sec-WebSocket-Location</span><span class="punctuation">: </span>ws://example.com/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，服务器同样用<code>Connection</code>字段通知浏览器，需要改变协议。<code>Sec-WebSocket-Accept</code>字段是服务器在浏览器提供的<code>Sec-WebSocket-Key</code>字符串后面，添加 <a href="http://tools.ietf.org/html/rfc6455">RFC6456</a> 标准规定的“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”字符串，然后再取 SHA-1 的哈希值。浏览器将对这个值进行验证，以证明确实是目标服务器回应了 WebSocket 请求。<code>Sec-WebSocket-Location</code>字段表示进行通信的 WebSocket 网址。</p><p>完成握手以后，WebSocket 协议就在 TCP 协议之上，开始传送数据。</p><h2 id="客户端的简单示例">客户端的简单示例 <a href="about:blank#%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B">#</a></h2><p>WebSocket 的用法相当简单。</p><p>下面是一个网页脚本的例子，基本上一眼就能明白。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;wss://echo.websocket.org&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ws.onopen = <span class="keyword">function</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Connection open ...&#x27;</span>);</span><br><span class="line">  ws.send(<span class="string">&#x27;Hello WebSockets!&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onmessage = <span class="keyword">function</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Received Message: &#x27;</span> + evt.data);</span><br><span class="line">  ws.close();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onclose = <span class="keyword">function</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Connection closed.&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="客户端-API">客户端 API <a href="about:blank#%E5%AE%A2%E6%88%B7%E7%AB%AF-api">#</a></h2><p>浏览器对 WebSocket 协议的处理，无非就是三件事。</p><ul><li>建立连接和断开连接</li><li>发送数据和接收数据</li><li>处理错误</li></ul><h3 id="构造函数-WebSocket">构造函数 WebSocket <a href="about:blank#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-websocket">#</a></h3><p><code>WebSocket</code>对象作为一个构造函数，用于新建<code>WebSocket</code>实例。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://localhost:8080&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行上面语句之后，客户端就会与服务器进行连接。</p><h3 id="webSocket-readyState">webSocket.readyState <a href="about:blank#websocketreadystate">#</a></h3><p><code>readyState</code>属性返回实例对象的当前状态，共有四种。</p><ul><li>CONNECTING：值为0，表示正在连接。</li><li>OPEN：值为1，表示连接成功，可以通信了。</li><li>CLOSING：值为2，表示连接正在关闭。</li><li>CLOSED：值为3，表示连接已经关闭，或者打开连接失败。</li></ul><p>下面是一个示例。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (ws.readyState) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">WebSocket</span>.<span class="type">CONNECTING</span>:</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">WebSocket</span>.<span class="type">OPEN</span>:</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">WebSocket</span>.<span class="type">CLOSING</span>:</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">WebSocket</span>.<span class="type">CLOSED</span>:</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// this never happens</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="webSocket-onopen">webSocket.onopen <a href="about:blank#websocketonopen">#</a></h3><p>实例对象的<code>onopen</code>属性，用于指定连接成功后的回调函数。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ws.onopen = <span class="keyword">function</span> <span class="params">()</span> &#123;</span><br><span class="line">  ws.send(<span class="string">&#x27;Hello Server!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果要指定多个回调函数，可以使用<code>addEventListener</code>方法。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ws.addEventListener(<span class="string">&#x27;open&#x27;</span>, <span class="keyword">function</span> <span class="params">(event)</span> &#123;</span><br><span class="line">  ws.send(<span class="string">&#x27;Hello Server!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="webSocket-onclose">webSocket.onclose <a href="about:blank#websocketonclose">#</a></h3><p>实例对象的<code>onclose</code>属性，用于指定连接关闭后的回调函数。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ws<span class="variable">.onclose</span> = <span class="keyword">function</span>(<span class="keyword">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> code = <span class="keyword">event</span><span class="variable">.code</span>;</span><br><span class="line">  <span class="keyword">var</span> reason = <span class="keyword">event</span><span class="variable">.reason</span>;</span><br><span class="line">  <span class="keyword">var</span> wasClean = <span class="keyword">event</span><span class="variable">.wasClean</span>;</span><br><span class="line">  <span class="comment">// handle close event</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws<span class="variable">.addEventListener</span>(<span class="string">&quot;close&quot;</span>, <span class="keyword">function</span>(<span class="keyword">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> code = <span class="keyword">event</span><span class="variable">.code</span>;</span><br><span class="line">  <span class="keyword">var</span> reason = <span class="keyword">event</span><span class="variable">.reason</span>;</span><br><span class="line">  <span class="keyword">var</span> wasClean = <span class="keyword">event</span><span class="variable">.wasClean</span>;</span><br><span class="line">  <span class="comment">// handle close event</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="webSocket-onmessage">webSocket.onmessage <a href="about:blank#websocketonmessage">#</a></h3><p>实例对象的<code>onmessage</code>属性，用于指定收到服务器数据后的回调函数。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ws<span class="variable">.onmessage</span> = <span class="keyword">function</span>(<span class="keyword">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="keyword">event</span><span class="variable">.data</span>;</span><br><span class="line">  <span class="comment">// 处理数据</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws<span class="variable">.addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="keyword">function</span>(<span class="keyword">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="keyword">event</span><span class="variable">.data</span>;</span><br><span class="line">  <span class="comment">// 处理数据</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，服务器数据可能是文本，也可能是二进制数据（<code>blob</code>对象或<code>Arraybuffer</code>对象）。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ws.onmessage = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">typeOf</span> event.data === String) &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;Received data string&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(event.data instanceof ArrayBuffer)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">buffer</span> = event.data;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;Received arraybuffer&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>除了动态判断收到的数据类型，也可以使用<code>binaryType</code>属性，显式指定收到的二进制数据类型。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 收到的是 blob 数据</span><br><span class="line">ws.binaryType <span class="operator">=</span> <span class="string">&quot;blob&quot;</span><span class="comment">;</span></span><br><span class="line">ws.onmessage <span class="operator">=</span> function(e) &#123;</span><br><span class="line">  console.log(e.data.size)<span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// 收到的是 ArrayBuffer 数据</span><br><span class="line">ws.binaryType <span class="operator">=</span> <span class="string">&quot;arraybuffer&quot;</span><span class="comment">;</span></span><br><span class="line">ws.onmessage <span class="operator">=</span> function(e) &#123;</span><br><span class="line">  console.log(e.data.byteLength)<span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="webSocket-send">webSocket.send() <a href="about:blank#websocketsend">#</a></h3><p>实例对象的<code>send()</code>方法用于向服务器发送数据。</p><p>发送文本的例子。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ws.<span class="built_in">send</span>(<span class="string">&#x27;your message&#x27;</span>)<span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发送 Blob 对象的例子。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">file</span> = document</span><br><span class="line">  .querySelector(&#x27;<span class="keyword">input</span>[<span class="keyword">type</span>=<span class="string">&quot;file&quot;</span>]&#x27;)</span><br><span class="line">  .files[0];</span><br><span class="line">ws.send(<span class="keyword">file</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发送 ArrayBuffer 对象的例子。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sending canvas ImageData as ArrayBuffer</span></span><br><span class="line"><span class="keyword">var</span> img = canvas_context.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">320</span>);</span><br><span class="line"><span class="keyword">var</span> binary = <span class="keyword">new</span> Uint8Array(img.data.<span class="built_in">length</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; img.data.<span class="built_in">length</span>; i++) &#123;</span><br><span class="line">  binary[i] = img.data[i];</span><br><span class="line">&#125;</span><br><span class="line">ws.send(binary.<span class="built_in">buffer</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="webSocket-bufferedAmount">webSocket.bufferedAmount <a href="about:blank#websocketbufferedamount">#</a></h3><p>实例对象的<code>bufferedAmount</code>属性，表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">data</span> = <span class="literal">new</span> ArrayBuffer(<span class="number">10000000</span>);</span><br><span class="line">socket.send(<span class="built_in">data</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (socket.bufferedAmount === <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// 发送完毕</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 发送还没结束</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="webSocket-onerror">webSocket.onerror <a href="about:blank#websocketonerror">#</a></h3><p>实例对象的<code>onerror</code>属性，用于指定报错时的回调函数。</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">socket</span>.<span class="property">onerror</span> <span class="operator">=</span> <span class="title function_">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// handle error event</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable">socket</span>.<span class="property">addEventListener</span>(<span class="string">&quot;error&quot;</span>, <span class="title function_">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// handle error event</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="WebSocket-服务器">WebSocket 服务器 <a href="about:blank#websocket-%E6%9C%8D%E5%8A%A1%E5%99%A8">#</a></h2><p>WebSocket 协议需要服务器支持。各种服务器的实现，可以查看维基百科的<a href="https://en.wikipedia.org/wiki/Comparison_of_WebSocket_implementations">列表</a>。</p><p>常用的 Node 实现有以下三种。</p><ul><li><a href="https://github.com/uWebSockets/uWebSockets">µWebSockets</a></li><li><a href="http://socket.io/">Socket.IO</a></li><li><a href="https://github.com/theturtle32/WebSocket-Node">WebSocket-Node</a></li></ul><p>具体的用法请查看它们的文档，本教程不详细介绍了。</p><h2 id="参考链接">参考链接 <a href="about:blank#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">#</a></h2><ul><li>Ryan Stewart, <a href="http://www.adobe.com/devnet/html5/articles/real-time-data-exchange-in-html5-with-websockets.html">Real-time data exchange in HTML5 with WebSockets</a></li><li>Malte Ubl &amp; Eiji Kitamura，<a href="https://www.html5rocks.com/en/tutorials/websockets/basics/">Introducing WebSockets: Bringing Sockets to the Web</a></li><li>Jack Lawson, <a href="http://buildnewgames.com/websockets/">WebSockets: A Guide</a></li><li>Michael W., <a href="http://codular.com/node-web-sockets">Starting with Node and Web Sockets</a></li><li>Jesse Cravens, <a href="http://tech.pro/tutorial/1167/introduction-to-websockets">Introduction to WebSockets</a></li><li>Matt West, <a href="http://blog.teamtreehouse.com/an-introduction-to-websockets">An Introduction to WebSockets</a></li><li>Maciej Sopyło, <a href="http://net.tutsplus.com/tutorials/javascript-ajax/node-js-better-performance-with-socket-io-and-dot/">Node.js: Better Performance With Socket.IO and doT</a></li><li>Jos Dirksen, <a href="http://www.smartjava.org/content/capture-canvas-and-webgl-output-video-using-websockets">Capture Canvas and WebGL output as video using websockets</a></li><li>Fionn Kellehe, <a href="https://nodesource.com/blog/understanding-socketio">Understanding Socket.IO</a></li><li><a href="http://cjihrig.com/blog/how-to-use-websockets/">How to Use WebSockets</a></li><li><a href="https://www.tutorialspoint.com/websockets/websockets_send_receive_messages.htm">WebSockets - Send &amp; Receive Messages</a></li></ul><p>本文转自 <a href="https://wangdoc.com/webapi/websocket">https://wangdoc.com/webapi/websocket</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">WebSocket</summary>
    
    
    
    <category term="webApi" scheme="https://www.hacp.top/categories/webApi/"/>
    
    
    <category term="webApi" scheme="https://www.hacp.top/tags/webApi/"/>
    
  </entry>
  
  <entry>
    <title>URLSearchParams 对象</title>
    <link href="https://www.hacp.top/posts/50.html"/>
    <id>https://www.hacp.top/posts/50.html</id>
    <published>2023-07-18T10:19:03.000Z</published>
    <updated>2023-07-18T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1>URLSearchParams 对象</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><h2 id="简介">简介 <a href="about:blank#%E7%AE%80%E4%BB%8B">#</a></h2><p>URLSearchParams 对象表示 URL 的查询字符串（比如<code>?foo=bar</code>）。它提供一系列方法，用来操作这些键值对。URL 实例对象的<code>searchParams</code>属性，就是指向一个 URLSearchParams 实例对象。</p><p>URLSearchParams 实例对象可以用<code>for...of</code>进行遍历。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [<span class="built_in">key</span>, value] of mySearchParams) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="构造方法">构造方法 <a href="about:blank#%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95">#</a></h2><p>URLSearchParams 可以作为构造函数使用，生成一个实例对象。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">params</span> = <span class="keyword">new</span> URLSearchParams();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它可以接受一个查询字符串作为参数，将其转成对应的实例对象。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">params</span> = <span class="keyword">new</span> URLSearchParams(<span class="string">&#x27;?a=1&amp;b=2&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，它最多只能去除查询字符串的开头问号<code>?</code>，并不能解析完整的网址字符串。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const paramsString <span class="operator">=</span> <span class="string">&quot;http://example.com/search?query=%40&quot;</span><span class="comment">;</span></span><br><span class="line">const params <span class="operator">=</span> new URLSearchParams(paramsString)<span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，URLSearchParams 会认为键名是<code>http://example.com/search?query</code>，而不是<code>query</code>。</p><p>它也可以接受表示键值对的对象或数组作为参数。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数为数组</span></span><br><span class="line"><span class="keyword">const</span> params3 = <span class="keyword">new</span> URLSearchParams([</span><br><span class="line">  [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;1&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;bar&quot;</span>, <span class="string">&quot;2&quot;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数为对象</span></span><br><span class="line"><span class="keyword">const</span> params1 = <span class="keyword">new</span> URLSearchParams(&#123; foo: <span class="string">&quot;1&quot;</span>, bar: <span class="string">&quot;2&quot;</span> &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>浏览器向服务器发送表单数据时，可以直接使用 URLSearchParams 实例作为表单数据。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">params</span> = <span class="keyword">new</span> URLSearchParams(&#123;foo: <span class="number">1</span>, bar: <span class="number">2</span>&#125;);</span><br><span class="line">fetch(<span class="string">&#x27;https://example.com/api&#x27;</span>, &#123;</span><br><span class="line">  method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  body: <span class="keyword">params</span></span><br><span class="line">&#125;).then(...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，fetch 向服务器发送命令时，可以直接使用 URLSearchParams 实例对象作为数据体。</p><p>它还可以接受另一个 URLSearchParams 实例对象作为参数，等于复制了该对象。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> params1 = <span class="keyword">new</span> URLSearchParams(<span class="string">&#x27;?a=1&amp;b=2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> params2 = <span class="keyword">new</span> URLSearchParams(params1);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>params1</code>和<code>params2</code>是两个一模一样的实例对象，但是修改其中一个，不会影响到另一个。</p><p>URLSearchParams会对查询字符串自动编码。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const params = new URLSearchParams(&#123;<span class="string">&#x27;foo&#x27;</span>: <span class="string">&#x27;你好&#x27;</span>&#125;);</span><br><span class="line">params.toString() // <span class="string">&quot;foo=<span class="variable">%E</span>4%BD<span class="variable">%A</span>0<span class="variable">%E</span>5<span class="variable">%A</span>5<span class="variable">%BD</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>foo</code>的值是汉字，URLSearchParams 对其自动进行 URL 编码。</p><p>键名可以没有键值，这时 URLSearchParams 会认为键值等于空字符串。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const params1 <span class="operator">=</span> new URLSearchParams(<span class="string">&quot;foo&amp;bar=baz&quot;</span>)<span class="comment">;</span></span><br><span class="line">const params2 <span class="operator">=</span> new URLSearchParams(<span class="string">&quot;foo=&amp;bar=baz&quot;</span>)<span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>foo</code>是一个空键名，不管它后面有没有等号，URLSearchParams 都会认为它的值是一个空字符串。</p><h2 id="实例方法">实例方法 <a href="about:blank#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95">#</a></h2><h3 id="append">append() <a href="about:blank#append">#</a></h3><p><code>append()</code>用来添加一个查询键值对。如果同名的键值对已经存在，它依然会将新的键值对添加到查询字符串的末尾。</p><p>它的第一个参数是键名，第二个参数是键值，下面是用法示例。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">params</span> = <span class="keyword">new</span> URLSearchParams(<span class="string">&#x27;?a=1&amp;b=2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">params</span>.append(<span class="string">&#x27;a&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">params</span>.toString() <span class="comment">// &#x27;a=1&amp;b=2&amp;a=3&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，键名<code>a</code>已经存在，但是<code>append()</code>依然会将<code>a=3</code>添加在查询字符串的末尾。</p><h3 id="delete">delete() <a href="about:blank#delete">#</a></h3><p><code>delete()</code>删除给定名字的键值对。</p><h3 id="get">get() <a href="about:blank#get">#</a></h3><p><code>get()</code>返回指定键名所对应的键值。如果存在多个同名键值对，它只返回第一个键值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">params</span> = <span class="keyword">new</span> URLSearchParams(<span class="string">&#x27;?a=1&amp;b=2&#x27;</span>);</span><br><span class="line"><span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于不存在的键名，它会返回<code>null</code>。</p><p>注意，<code>get()</code>会将键值里面的加号转为空格。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">params</span> = <span class="keyword">new</span> URLSearchParams(`c=a+b`);</span><br><span class="line"><span class="keyword">params</span>.<span class="keyword">get</span>(<span class="string">&#x27;c&#x27;</span>) <span class="comment">// &#x27;a b&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>get()</code>将<code>a+b</code>转为<code>a b</code>。如果希望避免这种行为，可以先用<code>encodeURIComponent()</code>对键值进行转义。</p><h3 id="getAll">getAll() <a href="about:blank#getall">#</a></h3><p><code>getAll()</code>返回一个数组，里面是指定键名所对应的所有键值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">params</span> = <span class="keyword">new</span> URLSearchParams(<span class="string">&#x27;?a=1&amp;b=2&amp;a=3&#x27;</span>);</span><br><span class="line"><span class="keyword">params</span>.getAll(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// [ &#x27;1&#x27;, &#x27;3&#x27; ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="has">has() <a href="about:blank#has">#</a></h3><p><code>has()</code>返回一个布尔值，表示指定键名是否存在。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">params</span> = <span class="keyword">new</span> URLSearchParams(<span class="string">&#x27;?a=1&amp;b=2&#x27;</span>);</span><br><span class="line"><span class="keyword">params</span>.has(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="keyword">params</span>.has(<span class="string">&#x27;c&#x27;</span>) <span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="set">set() <a href="about:blank#set">#</a></h3><p><code>set()</code>用来设置一个键值对。如果相同键名已经存在，则会替换当前值，这是它与<code>append()</code>的不同之处。该方法适合用来修改查询字符串。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">params</span> = <span class="keyword">new</span> URLSearchParams(<span class="string">&#x27;?a=1&amp;b=2&#x27;</span>);</span><br><span class="line"><span class="keyword">params</span>.<span class="keyword">set</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">params</span>.toString() <span class="comment">// &#x27;a=3&amp;b=2&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>set()</code>修改了键<code>a</code>。</p><p>如果有多个的同名键，<code>set()</code>会移除现存所有的键，再添加新的键值对。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">params</span> = <span class="keyword">new</span> URLSearchParams(<span class="string">&#x27;?foo=1&amp;foo=2&#x27;</span>);</span><br><span class="line"><span class="keyword">params</span>.<span class="keyword">set</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">params</span>.toString() <span class="comment">// &quot;foo=3&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，有两个<code>foo</code>键，<code>set()</code>会将它们都删掉，再添加一个新的<code>foo</code>键。</p><h3 id="sort">sort() <a href="about:blank#sort">#</a></h3><p><code>sort()</code>按照键名（以 Unicode 码点为序）对键值对排序。如果有同名键值对，它们的顺序不变。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">params</span> = <span class="keyword">new</span> URLSearchParams(<span class="string">&#x27;?a=1&amp;b=2&amp;a=3&#x27;</span>);</span><br><span class="line"><span class="keyword">params</span>.sort();</span><br><span class="line"><span class="keyword">params</span>.toString() <span class="comment">// &#x27;a=1&amp;a=3&amp;b=2&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="entries">entries() <a href="about:blank#entries">#</a></h3><p><code>entries()</code>方法返回一个 iterator 对象，用来遍历键名和键值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="string">&quot;key1=value1&amp;key2=value2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> params.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>, <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key1, value1</span></span><br><span class="line"><span class="comment">// key2, value2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果直接对 URLSearchParams 实例进行<code>for...of</code>遍历，其实内部调用的就是<code>entries</code>接口。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="selector-tag">var</span> <span class="selector-tag">p</span> of params) &#123;&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">for</span> (<span class="selector-tag">var</span> <span class="selector-tag">p</span> of params<span class="selector-class">.entries</span>()) &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="forEach">forEach() <a href="about:blank#foreach">#</a></h3><p><code>forEach()</code>用来依次对每个键值对执行一个回调函数。</p><p>它接受两个参数，第一个参数<code>callback</code>是回调函数，第二个参数<code>thisArg</code>是可选的，用来设置<code>callback</code>里面的<code>this</code>对象。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">forEach</span><span class="params">(callback)</span></span></span><br><span class="line"><span class="function"><span class="title">forEach</span><span class="params">(callback, thisArg)</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>callback</code>函数可以接收到以下三个参数。</p><ul><li>value：当前键值。</li><li>key：当前键名。</li><li>searchParams：当前的 URLSearchParams 实例对象。</li></ul><p>下面是用法示例。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const params = <span class="keyword">new</span> URLSearchParams(<span class="string">&quot;key1=value1&amp;key2=value2&quot;</span>);</span><br><span class="line"></span><br><span class="line">params.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(value, key);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// value1 key1</span></span><br><span class="line"><span class="comment">// value2 key2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="keys">keys() <a href="about:blank#keys">#</a></h3><p><code>keys()</code>返回一个 iterator 对象，用来遍历所有键名。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">params</span> = <span class="keyword">new</span> URLSearchParams(<span class="string">&quot;key1=value1&amp;key2=value2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key of <span class="keyword">params</span>.keys()) &#123;</span><br><span class="line">  console.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key1</span></span><br><span class="line"><span class="comment">// key2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="values">values() <a href="about:blank#values">#</a></h3><p><code>values()</code>返回一个 iterator 对象，用来遍历所有键值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">params</span> = <span class="keyword">new</span> URLSearchParams(<span class="string">&quot;key1=value1&amp;key2=value2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">value</span> of <span class="keyword">params</span>.values()) &#123;</span><br><span class="line">  console.log(<span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// value1</span></span><br><span class="line"><span class="comment">// value2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个方法也可以用来将所有键值，转成一个数组。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Array</span>.<span class="keyword">from</span>(params.<span class="keyword">values</span>()) // [<span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="toString">toString() <a href="about:blank#tostring">#</a></h3><p><code>toString()</code>用来将 URLSearchParams 实例对象转成一个字符串。它返回的字符串不带问号，这一点与<code>window.location.search</code>不同。</p><h2 id="实例属性">实例属性 <a href="about:blank#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">#</a></h2><h3 id="size">size <a href="about:blank#size">#</a></h3><p><code>size</code>是一个只读属性，返回键值对的总数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">params</span> = <span class="keyword">new</span> URLSearchParams(<span class="string">&quot;c=4&amp;a=2&amp;b=3&amp;a=1&quot;</span>);</span><br><span class="line"><span class="keyword">params</span>.size; <span class="comment">// 4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，键名<code>a</code>在查询字符串里面有两个，<code>size</code>不会将它们合并。</p><p>如果想统计不重复的键名，可以将使用 Set 结构。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[</span><span class="params">...</span><span class="literal">new</span> <span class="built_in">Set</span>(<span class="keyword">params</span>.keys())<span class="meta">]</span>.length // 3</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>size</code>属性可以用来判别，某个网址是否有查询字符串。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">url</span> = <span class="keyword">new</span> URL(<span class="string">&quot;https://example.com?foo=1&amp;bar=2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">url</span>.searchParams.size) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;该 URL 有查询字符串&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本文转自 <a href="https://wangdoc.com/webapi/urlsearchparams">https://wangdoc.com/webapi/urlsearchparams</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">URLSearchParams 对象</summary>
    
    
    
    <category term="webApi" scheme="https://www.hacp.top/categories/webApi/"/>
    
    
    <category term="webApi" scheme="https://www.hacp.top/tags/webApi/"/>
    
  </entry>
  
  <entry>
    <title>URL 对象</title>
    <link href="https://www.hacp.top/posts/49.html"/>
    <id>https://www.hacp.top/posts/49.html</id>
    <published>2023-07-17T10:19:03.000Z</published>
    <updated>2023-07-17T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1>URL 对象</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><p>浏览器内置的 URL 对象，代表一个网址。通过这个对象，就能生成和操作网址。</p><h2 id="构造函数">构造函数 <a href="about:blank#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a></h2><p>URL 可以当作构造函数使用，生成一个实例对象。</p><p>它接受一个网址字符串作为参数。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">url</span> = <span class="keyword">new</span> URL(<span class="string">&#x27;https://example.com&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果网址字符串无法解析，它会报错，所以它要放在<code>try...catch</code>代码块里面。</p><p>如果这个参数只是一个网站路径，比如<code>/foo/index.html</code>，那么需要提供基准网址，作为第二个参数。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url1 = <span class="keyword">new</span> URL(<span class="string">&#x27;page2.html&#x27;</span>, <span class="string">&#x27;http://example.com/page1.html&#x27;</span>);</span><br><span class="line">url1.href <span class="comment">// &quot;http://example.com/page2.html&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url2 = <span class="keyword">new</span> URL(<span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;http://example.com/a/b.html&#x27;</span>)</span><br><span class="line">url2.href <span class="comment">// &quot;http://example.com/&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种写法很方便基于现有网址，构造新的 URL。</p><p><code>URL()</code>的参数也可以是另一个 URL 实例。这时，<code>URL()</code>会自动读取该实例的href属性，作为实际参数。</p><h2 id="实例属性">实例属性 <a href="about:blank#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">#</a></h2><p>一旦得到了 URL 实例对象，就可以从它的各种属性，方便地获取 URL 的各个组成部分。</p><ul><li>href：完整的网址</li><li>protocol：访问协议，带结尾冒号<code>:</code>。</li><li>search：查询字符串，以问号<code>?</code>开头。</li><li>hash：哈希字符串，以<code>#</code>开头。</li><li>username：需要认证的网址的用户名。</li><li>password：需要认证的网址的密码。</li><li>host：主机名，不带协议，但带有端口。</li><li>hostname：主机名，不带协议和端口。</li><li>port：端口。</li><li>origin：包括协议、域名和端口。</li><li>pathname：服务器路径，以根路径<code>/</code>开头，不带有查询字符串。</li><li>searchParams：指向一个 URLSearchParams 实例，方便用来构造和操作查询字符串。</li></ul><p>下面是用法示例。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">url</span> = <span class="keyword">new</span> URL(<span class="string">&#x27;http://user:pass@example.com:8080/resource/path?q=1#hash&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">url</span>.href <span class="comment">// http://user:pass@example.com:8080/resource/path?q=1#hash</span></span><br><span class="line"><span class="built_in">url</span>.protocol <span class="comment">// http:</span></span><br><span class="line"><span class="built_in">url</span>.username <span class="comment">// user</span></span><br><span class="line"><span class="built_in">url</span>.password <span class="comment">// pass</span></span><br><span class="line"><span class="built_in">url</span>.host <span class="comment">// example.com:8080</span></span><br><span class="line"><span class="built_in">url</span>.hostname <span class="comment">// example.com</span></span><br><span class="line"><span class="built_in">url</span>.port <span class="comment">// 8080</span></span><br><span class="line"><span class="built_in">url</span>.pathname <span class="comment">// /resource/path</span></span><br><span class="line"><span class="built_in">url</span>.search <span class="comment">// ?q=1</span></span><br><span class="line"><span class="built_in">url</span>.hash <span class="comment">// #hash</span></span><br><span class="line"><span class="built_in">url</span>.origin <span class="comment">// http://example.com:8080 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这些属性里面，只有<code>origin</code>属性是只读的，其他属性都可写，并且会立即生效。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">url</span> = <span class="keyword">new</span> URL(<span class="string">&#x27;http://example.com/index.html#part1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">url</span>.pathname = <span class="string">&#x27;index2.html&#x27;</span>;</span><br><span class="line"><span class="built_in">url</span>.href <span class="comment">// &quot;http://example.com/index2.html#part1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">url</span>.hash = <span class="string">&#x27;#part2&#x27;</span>;</span><br><span class="line"><span class="built_in">url</span>.href <span class="comment">// &quot;http://example.com/index2.html#part2&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，改变 URL 实例的<code>pathname</code>属性和<code>hash</code>属性，都会实时反映在 URL 实例当中。</p><p>下面是<code>searchParams</code>属性的用法示例，它的具体属性和方法介绍参见 《URLSearchParams》一章。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">url</span> = <span class="keyword">new</span> URL(<span class="string">&#x27;http://example.com/path?a=1&amp;b=2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">url</span>.searchParams.get(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">url</span>.searchParams.get(<span class="string">&#x27;b&#x27;</span>) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [k, v] <span class="keyword">of</span> <span class="built_in">url</span>.searchParams) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(k, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a 1</span></span><br><span class="line"><span class="comment">// b 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="静态方法">静态方法 <a href="about:blank#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95">#</a></h2><h3 id="URL-createObjectURL">URL.createObjectURL() <a href="about:blank#urlcreateobjecturl">#</a></h3><p><code>URL.createObjectURL()</code>方法用来为文件数据生成一个临时网址（URL 字符串），供那些需要网址作为参数的方法使用。该方法的参数必须是 Blob 类型（即代表文件的二进制数据）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;div id=&quot;display&quot;/&gt;</span></span><br><span class="line"><span class="comment">// &lt;input</span></span><br><span class="line"><span class="comment">//   type=&quot;file&quot;</span></span><br><span class="line"><span class="comment">//   id=&quot;fileElem&quot;</span></span><br><span class="line"><span class="comment">//   multiple</span></span><br><span class="line"><span class="comment">//   accept=&quot;image/*&quot;</span></span><br><span class="line"><span class="comment">//   onchange=&quot;handleFiles(this.files)&quot;</span></span><br><span class="line"><span class="comment">//  &gt;</span></span><br><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;display&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleFiles</span>(<span class="params">files</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; files.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">    img.<span class="property">src</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(files[i]);</span><br><span class="line">    div.<span class="title function_">appendChild</span>(img);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>URL.createObjectURL()</code>方法用来为上传的文件生成一个临时网址，作为<code>&lt;img&gt;</code>元素的图片来源。</p><p>该方法生成的 URL 就像下面的样子。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">blob</span>:http://localhost/c745ef73-ece9-<span class="number">46</span>da-<span class="number">8</span>f66-ebes574789b1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，每次使用<code>URL.createObjectURL()</code>方法，都会在内存里面生成一个 URL 实例。如果不再需要该方法生成的临时网址，为了节省内存，可以使用<code>URL.revokeObjectURL()</code>方法释放这个实例。</p><p>下面是生成 Worker 进程的一个示例。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&#x27;code&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;text/plain&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">postMessage</span>(<span class="string">&#x27;foo&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> code = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;code&#x27;</span>).<span class="property">textContent</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([code], &#123; <span class="attr">type</span>: <span class="string">&#x27;application/javascript&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> url = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(url);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  worker.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;worker returned: &#x27;</span>, e.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="URL-revokeObjectURL">URL.revokeObjectURL() <a href="about:blank#urlrevokeobjecturl">#</a></h3><p><code>URL.revokeObjectURL()</code>方法用来释放<code>URL.createObjectURL()</code>生成的临时网址。它的参数就是<code>URL.createObjectURL()</code>方法返回的 URL 字符串。</p><p>下面为上一小节的示例加上<code>URL.revokeObjectURL()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;display&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleFiles</span>(<span class="params">files</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">    img.<span class="property">src</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(files[i]);</span><br><span class="line">    div.<span class="title function_">appendChild</span>(img);</span><br><span class="line">    img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(<span class="variable language_">this</span>.<span class="property">src</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，一旦图片加载成功以后，为本地文件生成的临时网址就没用了，于是可以在<code>img.onload</code>回调函数里面，通过<code>URL.revokeObjectURL()</code>方法释放资源。</p><h3 id="URL-canParse">URL.canParse() <a href="about:blank#urlcanparse">#</a></h3><p><code>URL()</code>构造函数解析非法网址时，会抛出错误，必须用<code>try...catch</code>代码块处理，这样终究不是非常方便。因此，URL 对象又引入了<code>URL.canParse()</code>方法，它返回一个布尔值，表示当前字符串是否为有效网址。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">URL</span>.canParse(url)</span><br><span class="line"><span class="built_in">URL</span>.canParse(url, base)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>URL.canParse()</code>可以接受两个参数。</p><ul><li><code>url</code>：字符串或者对象（比如<code>&lt;a&gt;</code>元素的 DOM 对象），表示 URL。</li><li><code>base</code>：字符串或者 URL 实例对象，表示 URL 的基准位置。它是可选参数，当第一个参数<code>url</code>为相对 URL 时，会使用这个参数，计算出完整的 URL，再进行判断。</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">URL</span>.canParse(<span class="string">&quot;https://developer.mozilla.org/&quot;</span>)<span class="comment"> // true</span></span><br><span class="line"><span class="built_in">URL</span>.canParse(<span class="string">&quot;/en-US/docs&quot;</span>)<span class="comment"> // false</span></span><br><span class="line"><span class="built_in">URL</span>.canParse(<span class="string">&quot;/en-US/docs&quot;</span>, <span class="string">&quot;https://developer.mozilla.org/&quot;</span>)<span class="comment"> // true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，如果第一个参数是相对 URL，这时必须要有第二个参数，否则返回<code>false</code>。</p><p>下面的示例是第二个参数为 URL 实例对象。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> baseUrl = <span class="keyword">new</span> URL(<span class="string">&quot;https://developer.mozilla.org/&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="built_in">url</span> = <span class="string">&quot;/en-US/docs&quot;</span>;</span><br><span class="line"></span><br><span class="line">URL.canParse(<span class="built_in">url</span>, baseUrl) <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该方法内部使用<code>URL()</code>构造方法相同的解析算法，因此可以用<code>URL()</code>构造方法代替。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isUrlValid</span>(<span class="params"><span class="keyword">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title function_ invoke__">URL</span>(<span class="keyword">string</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，给出了<code>URL.canParse()</code>的替代实现<code>isUrlValid()</code>。</p><h3 id="URL-parse">URL.parse() <a href="about:blank#urlparse">#</a></h3><p><code>URL.parse()</code>是一个新添加的方法，Chromium 126 和 Firefox 126 开始支持。</p><p>它的主要目的就是，改变<code>URL()</code>构造函数解析非法网址抛错的问题。这个新方法不会抛错，如果参数是有效网址，则返回 URL 实例对象，否则返回<code>null</code>。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const urlstring <span class="operator">=</span> <span class="string">&quot;this is not a URL&quot;</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">const not_a_url <span class="operator">=</span> URL.parse(urlstring)<span class="comment">; // null</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>URL.parse()</code>的参数不是有效网址，所以返回<code>null</code>。</p><h2 id="实例方法">实例方法 <a href="about:blank#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95">#</a></h2><h3 id="toString">toString() <a href="about:blank#tostring">#</a></h3><p>URL 实例对象的<code>toString()</code>返回<code>URL.href</code>属性，即整个网址。</p><p>本文转自 <a href="https://wangdoc.com/webapi/url">https://wangdoc.com/webapi/url</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">URL 对象</summary>
    
    
    
    <category term="webApi" scheme="https://www.hacp.top/categories/webApi/"/>
    
    
    <category term="webApi" scheme="https://www.hacp.top/tags/webApi/"/>
    
  </entry>
  
  <entry>
    <title>SVG 图像</title>
    <link href="https://www.hacp.top/posts/48.html"/>
    <id>https://www.hacp.top/posts/48.html</id>
    <published>2023-07-16T10:19:03.000Z</published>
    <updated>2023-07-16T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1>SVG 图像</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><h2 id="概述">概述 <a href="about:blank#%E6%A6%82%E8%BF%B0">#</a></h2><p>SVG 是一种基于 XML 语法的图像格式，全称是可缩放矢量图（Scalable Vector Graphics）。其他图像格式都是基于像素处理的，SVG 则是属于对图像的形状描述，所以它本质上是文本文件，体积较小，且不管放大多少倍都不会失真。</p><p>SVG 文件可以直接插入网页，成为 DOM 的一部分，然后用 JavaScript 和 CSS 进行操作。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;mysvg&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">viewBox</span>=<span class="string">&quot;0 0 800 600&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">preserveAspectRatio</span>=<span class="string">&quot;xMidYMid meet&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">id</span>=<span class="string">&quot;mycircle&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;400&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;300&quot;</span> <span class="attr">r</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面是 SVG 代码直接插入网页的例子。</p><p>SVG 代码也可以写在一个独立文件中，然后用<code>&lt;img&gt;</code>、<code>&lt;object&gt;</code>、<code>&lt;embed&gt;</code>、<code>&lt;iframe&gt;</code>等标签插入网页。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;circle.svg&quot;</span>&gt;</span><br><span class="line">&lt;object <span class="attribute">id</span>=<span class="string">&quot;object&quot;</span> <span class="attribute">data</span>=<span class="string">&quot;circle.svg&quot;</span> <span class="attribute">type</span>=<span class="string">&quot;image/svg+xml&quot;</span>&gt;&lt;/object&gt;</span><br><span class="line">&lt;embed <span class="attribute">id</span>=<span class="string">&quot;embed&quot;</span> <span class="attribute">src</span>=<span class="string">&quot;icon.svg&quot;</span> <span class="attribute">type</span>=<span class="string">&quot;image/svg+xml&quot;</span>&gt;</span><br><span class="line">&lt;iframe <span class="attribute">id</span>=<span class="string">&quot;iframe&quot;</span> <span class="attribute">src</span>=<span class="string">&quot;icon.svg&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>CSS 也可以使用 SVG 文件。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">icon.svg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SVG 文件还可以转为 BASE64 编码，然后作为 Data URI 写入网页。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;data:image/svg+xml;base64,[data]&quot;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="语法">语法 <a href="about:blank#%E8%AF%AD%E6%B3%95">#</a></h2><h3 id="svg-标签"><code>&lt;svg&gt;</code>标签 <a href="about:blank#svg%E6%A0%87%E7%AD%BE">#</a></h3><p>SVG 代码都放在顶层标签<code>&lt;svg&gt;</code>之中。下面是一个例子。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg width<span class="operator">=</span><span class="string">&quot;100%&quot;</span> height<span class="operator">=</span><span class="string">&quot;100%&quot;</span>&gt;</span><br><span class="line">  &lt;circle id<span class="operator">=</span><span class="string">&quot;mycircle&quot;</span> cx<span class="operator">=</span><span class="string">&quot;50&quot;</span> cy<span class="operator">=</span><span class="string">&quot;50&quot;</span> r<span class="operator">=</span><span class="string">&quot;50&quot;</span> /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>&lt;svg&gt;</code>的<code>width</code>属性和<code>height</code>属性，指定了 SVG 图像在 HTML 元素中所占据的宽度和高度。除了相对单位，也可以采用绝对单位（单位：像素）。如果不指定这两个属性，SVG 图像的大小默认为300像素（宽）x 150像素（高）。</p><p>如果只想展示 SVG 图像的一部分，就要指定<code>viewBox</code>属性。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg width<span class="operator">=</span><span class="string">&quot;100&quot;</span> height<span class="operator">=</span><span class="string">&quot;100&quot;</span> viewBox<span class="operator">=</span><span class="string">&quot;50 50 50 50&quot;</span>&gt;</span><br><span class="line">  &lt;circle id<span class="operator">=</span><span class="string">&quot;mycircle&quot;</span> cx<span class="operator">=</span><span class="string">&quot;50&quot;</span> cy<span class="operator">=</span><span class="string">&quot;50&quot;</span> r<span class="operator">=</span><span class="string">&quot;50&quot;</span> /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>&lt;viewBox&gt;</code>属性的值有四个数字，分别是左上角的横坐标和纵坐标、视口的宽度和高度。上面代码中，SVG 图像是100像素宽 x 100像素高，<code>viewBox</code>属性指定视口从<code>(50, 50)</code>这个点开始。所以，实际看到的是右下角的四分之一圆。</p><p>注意，视口必须适配所在的空间。上面代码中，视口的大小是 50 x 50，由于 SVG 图像的大小是 100 x 100，所以视口会放大去适配 SVG 图像的大小，即放大了四倍。</p><p>如果不指定<code>width</code>属性和<code>height</code>属性，只指定<code>viewBox</code>属性，则相当于只给定 SVG 图像的长宽比。这时，SVG 图像的大小默认是所在的 HTML 元素的大小。</p><h3 id="circle-标签"><code>&lt;circle&gt;</code>标签 <a href="about:blank#circle%E6%A0%87%E7%AD%BE">#</a></h3><p><code>&lt;circle&gt;</code>标签代表圆形。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg width<span class="operator">=</span><span class="string">&quot;300&quot;</span> height<span class="operator">=</span><span class="string">&quot;180&quot;</span>&gt;</span><br><span class="line">  &lt;circle cx<span class="operator">=</span><span class="string">&quot;30&quot;</span>  cy<span class="operator">=</span><span class="string">&quot;50&quot;</span> r<span class="operator">=</span><span class="string">&quot;25&quot;</span> /&gt;</span><br><span class="line">  &lt;circle cx<span class="operator">=</span><span class="string">&quot;90&quot;</span>  cy<span class="operator">=</span><span class="string">&quot;50&quot;</span> r<span class="operator">=</span><span class="string">&quot;25&quot;</span> class<span class="operator">=</span><span class="string">&quot;red&quot;</span> /&gt;</span><br><span class="line">  &lt;circle cx<span class="operator">=</span><span class="string">&quot;150&quot;</span> cy<span class="operator">=</span><span class="string">&quot;50&quot;</span> r<span class="operator">=</span><span class="string">&quot;25&quot;</span> class<span class="operator">=</span><span class="string">&quot;fancy&quot;</span> /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码定义了三个圆。<code>&lt;circle&gt;</code>标签的<code>cx</code>、<code>cy</code>、<code>r</code>属性分别为横坐标、纵坐标和半径，单位为像素。坐标都是相对于<code>&lt;svg&gt;</code>画布的左上角原点。</p><p><code>class</code>属性用来指定对应的 CSS 类。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">  <span class="attribute">fill</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fancy</span> &#123;</span><br><span class="line">  <span class="attribute">fill</span>: none;</span><br><span class="line">  <span class="attribute">stroke</span>: black;</span><br><span class="line">  <span class="attribute">stroke-width</span>: <span class="number">3pt</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SVG 的 CSS 属性与网页元素有所不同。</p><blockquote><ul><li>fill：填充色</li><li>stroke：描边色</li><li>stroke-width：边框宽度</li></ul></blockquote><h3 id="line-标签"><code>&lt;line&gt;</code>标签 <a href="about:blank#line%E6%A0%87%E7%AD%BE">#</a></h3><p><code>&lt;line&gt;</code>标签用来绘制直线。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg width<span class="operator">=</span><span class="string">&quot;300&quot;</span> height<span class="operator">=</span><span class="string">&quot;180&quot;</span>&gt;</span><br><span class="line">  &lt;line x1<span class="operator">=</span><span class="string">&quot;0&quot;</span> y1<span class="operator">=</span><span class="string">&quot;0&quot;</span> x2<span class="operator">=</span><span class="string">&quot;200&quot;</span> y2<span class="operator">=</span><span class="string">&quot;0&quot;</span> style<span class="operator">=</span><span class="string">&quot;stroke:rgb(0,0,0);stroke-width:5&quot;</span> /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，<code>&lt;line&gt;</code>标签的<code>x1</code>属性和<code>y1</code>属性，表示线段起点的横坐标和纵坐标；<code>x2</code>属性和<code>y2</code>属性，表示线段终点的横坐标和纵坐标；<code>style</code>属性表示线段的样式。</p><h3 id="polyline-标签"><code>&lt;polyline&gt;</code>标签 <a href="about:blank#polyline%E6%A0%87%E7%AD%BE">#</a></h3><p><code>&lt;polyline&gt;</code>标签用于绘制一根折线。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg width<span class="operator">=</span><span class="string">&quot;300&quot;</span> height<span class="operator">=</span><span class="string">&quot;180&quot;</span>&gt;</span><br><span class="line">  &lt;polyline points<span class="operator">=</span><span class="string">&quot;3,3 30,28 3,53&quot;</span> fill<span class="operator">=</span><span class="string">&quot;none&quot;</span> stroke<span class="operator">=</span><span class="string">&quot;black&quot;</span> /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>&lt;polyline&gt;</code>的<code>points</code>属性指定了每个端点的坐标，横坐标与纵坐标之间与逗号分隔，点与点之间用空格分隔。</p><h3 id="rect-标签"><code>&lt;rect&gt;</code>标签 <a href="about:blank#rect%E6%A0%87%E7%AD%BE">#</a></h3><p><code>&lt;rect&gt;</code>标签用于绘制矩形。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg width<span class="operator">=</span><span class="string">&quot;300&quot;</span> height<span class="operator">=</span><span class="string">&quot;180&quot;</span>&gt;</span><br><span class="line">  &lt;rect x<span class="operator">=</span><span class="string">&quot;0&quot;</span> y<span class="operator">=</span><span class="string">&quot;0&quot;</span> height<span class="operator">=</span><span class="string">&quot;100&quot;</span> width<span class="operator">=</span><span class="string">&quot;200&quot;</span> style<span class="operator">=</span><span class="string">&quot;stroke: #70d5dd; fill: #dd524b&quot;</span> /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>&lt;rect&gt;</code>的<code>x</code>属性和<code>y</code>属性，指定了矩形左上角端点的横坐标和纵坐标；<code>width</code>属性和<code>height</code>属性指定了矩形的宽度和高度（单位像素）。</p><h3 id="ellipse-标签"><code>&lt;ellipse&gt;</code>标签 <a href="about:blank#ellipse%E6%A0%87%E7%AD%BE">#</a></h3><p><code>&lt;ellipse&gt;</code>标签用于绘制椭圆。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg width<span class="operator">=</span><span class="string">&quot;300&quot;</span> height<span class="operator">=</span><span class="string">&quot;180&quot;</span>&gt;</span><br><span class="line">  &lt;ellipse cx<span class="operator">=</span><span class="string">&quot;60&quot;</span> cy<span class="operator">=</span><span class="string">&quot;60&quot;</span> ry<span class="operator">=</span><span class="string">&quot;40&quot;</span> rx<span class="operator">=</span><span class="string">&quot;20&quot;</span> stroke<span class="operator">=</span><span class="string">&quot;black&quot;</span> stroke-width<span class="operator">=</span><span class="string">&quot;5&quot;</span> fill<span class="operator">=</span><span class="string">&quot;silver&quot;</span>/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>&lt;ellipse&gt;</code>的<code>cx</code>属性和<code>cy</code>属性，指定了椭圆中心的横坐标和纵坐标（单位像素）；<code>rx</code>属性和<code>ry</code>属性，指定了椭圆横向轴和纵向轴的半径（单位像素）。</p><h3 id="polygon-标签"><code>&lt;polygon&gt;</code>标签 <a href="about:blank#polygon%E6%A0%87%E7%AD%BE">#</a></h3><p><code>&lt;polygon&gt;</code>标签用于绘制多边形。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg width<span class="operator">=</span><span class="string">&quot;300&quot;</span> height<span class="operator">=</span><span class="string">&quot;180&quot;</span>&gt;</span><br><span class="line">  &lt;polygon fill<span class="operator">=</span><span class="string">&quot;green&quot;</span> stroke<span class="operator">=</span><span class="string">&quot;orange&quot;</span> stroke-width<span class="operator">=</span><span class="string">&quot;1&quot;</span> points<span class="operator">=</span><span class="string">&quot;0,0 100,0 100,100 0,100 0,0&quot;</span>/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>&lt;polygon&gt;</code>的<code>points</code>属性指定了每个端点的坐标，横坐标与纵坐标之间与逗号分隔，点与点之间用空格分隔。</p><h3 id="path-标签"><code>&lt;path&gt;</code>标签 <a href="about:blank#path%E6%A0%87%E7%AD%BE">#</a></h3><p><code>&lt;path&gt;</code>标签用于制路径。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">  M 18,3</span></span></span><br><span class="line"><span class="string"><span class="tag">  L 46,3</span></span></span><br><span class="line"><span class="string"><span class="tag">  L 46,40</span></span></span><br><span class="line"><span class="string"><span class="tag">  L 61,40</span></span></span><br><span class="line"><span class="string"><span class="tag">  L 32,68</span></span></span><br><span class="line"><span class="string"><span class="tag">  L 3,40</span></span></span><br><span class="line"><span class="string"><span class="tag">  L 18,40</span></span></span><br><span class="line"><span class="string"><span class="tag">  Z</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>&lt;path&gt;</code>的<code>d</code>属性表示绘制顺序，它的值是一个长字符串，每个字母表示一个绘制动作，后面跟着坐标。</p><blockquote><ul><li>M：移动到（moveto）</li><li>L：画直线到（lineto）</li><li>Z：闭合路径</li></ul></blockquote><h3 id="text-标签"><code>&lt;text&gt;</code>标签 <a href="about:blank#text%E6%A0%87%E7%AD%BE">#</a></h3><p><code>&lt;text&gt;</code>标签用于绘制文本。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg width<span class="operator">=</span><span class="string">&quot;300&quot;</span> height<span class="operator">=</span><span class="string">&quot;180&quot;</span>&gt;</span><br><span class="line">  &lt;text x<span class="operator">=</span><span class="string">&quot;50&quot;</span> y<span class="operator">=</span><span class="string">&quot;25&quot;</span>&gt;Hello World&lt;/text&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>&lt;text&gt;</code>的<code>x</code>属性和<code>y</code>属性，表示文本区块基线（baseline）起点的横坐标和纵坐标。文字的样式可以用<code>class</code>或<code>style</code>属性指定。</p><h3 id="use-标签"><code>&lt;use&gt;</code>标签 <a href="about:blank#use%E6%A0%87%E7%AD%BE">#</a></h3><p><code>&lt;use&gt;</code>标签用于复制一个形状。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg viewBox<span class="operator">=</span><span class="string">&quot;0 0 30 10&quot;</span> xmlns<span class="operator">=</span><span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br><span class="line">  &lt;circle id<span class="operator">=</span><span class="string">&quot;myCircle&quot;</span> cx<span class="operator">=</span><span class="string">&quot;5&quot;</span> cy<span class="operator">=</span><span class="string">&quot;5&quot;</span> r<span class="operator">=</span><span class="string">&quot;4&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;use href<span class="operator">=</span><span class="string">&quot;#myCircle&quot;</span> x<span class="operator">=</span><span class="string">&quot;10&quot;</span> y<span class="operator">=</span><span class="string">&quot;0&quot;</span> fill<span class="operator">=</span><span class="string">&quot;blue&quot;</span> /&gt;</span><br><span class="line">  &lt;use href<span class="operator">=</span><span class="string">&quot;#myCircle&quot;</span> x<span class="operator">=</span><span class="string">&quot;20&quot;</span> y<span class="operator">=</span><span class="string">&quot;0&quot;</span> fill<span class="operator">=</span><span class="string">&quot;white&quot;</span> stroke<span class="operator">=</span><span class="string">&quot;blue&quot;</span> /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>&lt;use&gt;</code>的<code>href</code>属性指定所要复制的节点，<code>x</code>属性和<code>y</code>属性是<code>&lt;use&gt;</code>左上角的坐标。另外，还可以指定<code>width</code>和<code>height</code>坐标。</p><h3 id="g-标签"><code>&lt;g&gt;</code>标签 <a href="about:blank#g%E6%A0%87%E7%AD%BE">#</a></h3><p><code>&lt;g&gt;</code>标签用于将多个形状组成一个组（group），方便复用。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg width<span class="operator">=</span><span class="string">&quot;300&quot;</span> height<span class="operator">=</span><span class="string">&quot;100&quot;</span>&gt;</span><br><span class="line">  &lt;g id<span class="operator">=</span><span class="string">&quot;myCircle&quot;</span>&gt;</span><br><span class="line">    &lt;text x<span class="operator">=</span><span class="string">&quot;25&quot;</span> y<span class="operator">=</span><span class="string">&quot;20&quot;</span>&gt;圆形&lt;/text&gt;</span><br><span class="line">    &lt;circle cx<span class="operator">=</span><span class="string">&quot;50&quot;</span> cy<span class="operator">=</span><span class="string">&quot;50&quot;</span> r<span class="operator">=</span><span class="string">&quot;20&quot;</span>/&gt;</span><br><span class="line">  &lt;/g&gt;</span><br><span class="line"></span><br><span class="line">  &lt;use href<span class="operator">=</span><span class="string">&quot;#myCircle&quot;</span> x<span class="operator">=</span><span class="string">&quot;100&quot;</span> y<span class="operator">=</span><span class="string">&quot;0&quot;</span> fill<span class="operator">=</span><span class="string">&quot;blue&quot;</span> /&gt;</span><br><span class="line">  &lt;use href<span class="operator">=</span><span class="string">&quot;#myCircle&quot;</span> x<span class="operator">=</span><span class="string">&quot;200&quot;</span> y<span class="operator">=</span><span class="string">&quot;0&quot;</span> fill<span class="operator">=</span><span class="string">&quot;white&quot;</span> stroke<span class="operator">=</span><span class="string">&quot;blue&quot;</span> /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="defs-标签"><code>&lt;defs&gt;</code>标签 <a href="about:blank#defs%E6%A0%87%E7%AD%BE">#</a></h3><p><code>&lt;defs&gt;</code>标签用于自定义形状，它内部的代码不会显示，仅供引用。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg width<span class="operator">=</span><span class="string">&quot;300&quot;</span> height<span class="operator">=</span><span class="string">&quot;100&quot;</span>&gt;</span><br><span class="line">  &lt;defs&gt;</span><br><span class="line">    &lt;g id<span class="operator">=</span><span class="string">&quot;myCircle&quot;</span>&gt;</span><br><span class="line">      &lt;text x<span class="operator">=</span><span class="string">&quot;25&quot;</span> y<span class="operator">=</span><span class="string">&quot;20&quot;</span>&gt;圆形&lt;/text&gt;</span><br><span class="line">      &lt;circle cx<span class="operator">=</span><span class="string">&quot;50&quot;</span> cy<span class="operator">=</span><span class="string">&quot;50&quot;</span> r<span class="operator">=</span><span class="string">&quot;20&quot;</span>/&gt;</span><br><span class="line">    &lt;/g&gt;</span><br><span class="line">  &lt;/defs&gt;</span><br><span class="line"></span><br><span class="line">  &lt;use href<span class="operator">=</span><span class="string">&quot;#myCircle&quot;</span> x<span class="operator">=</span><span class="string">&quot;0&quot;</span> y<span class="operator">=</span><span class="string">&quot;0&quot;</span> /&gt;</span><br><span class="line">  &lt;use href<span class="operator">=</span><span class="string">&quot;#myCircle&quot;</span> x<span class="operator">=</span><span class="string">&quot;100&quot;</span> y<span class="operator">=</span><span class="string">&quot;0&quot;</span> fill<span class="operator">=</span><span class="string">&quot;blue&quot;</span> /&gt;</span><br><span class="line">  &lt;use href<span class="operator">=</span><span class="string">&quot;#myCircle&quot;</span> x<span class="operator">=</span><span class="string">&quot;200&quot;</span> y<span class="operator">=</span><span class="string">&quot;0&quot;</span> fill<span class="operator">=</span><span class="string">&quot;white&quot;</span> stroke<span class="operator">=</span><span class="string">&quot;blue&quot;</span> /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="pattern-标签"><code>&lt;pattern&gt;</code>标签 <a href="about:blank#pattern%E6%A0%87%E7%AD%BE">#</a></h3><p><code>&lt;pattern&gt;</code>标签用于自定义一个形状，该形状可以被引用来平铺一个区域。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg width<span class="operator">=</span><span class="string">&quot;500&quot;</span> height<span class="operator">=</span><span class="string">&quot;500&quot;</span>&gt;</span><br><span class="line">  &lt;defs&gt;</span><br><span class="line">    &lt;pattern id<span class="operator">=</span><span class="string">&quot;dots&quot;</span> x<span class="operator">=</span><span class="string">&quot;0&quot;</span> y<span class="operator">=</span><span class="string">&quot;0&quot;</span> width<span class="operator">=</span><span class="string">&quot;100&quot;</span> height<span class="operator">=</span><span class="string">&quot;100&quot;</span> patternUnits<span class="operator">=</span><span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span><br><span class="line">      &lt;circle fill<span class="operator">=</span><span class="string">&quot;#bee9e8&quot;</span> cx<span class="operator">=</span><span class="string">&quot;50&quot;</span> cy<span class="operator">=</span><span class="string">&quot;50&quot;</span> r<span class="operator">=</span><span class="string">&quot;35&quot;</span> /&gt;</span><br><span class="line">    &lt;/pattern&gt;</span><br><span class="line">  &lt;/defs&gt;</span><br><span class="line">  &lt;rect x<span class="operator">=</span><span class="string">&quot;0&quot;</span> y<span class="operator">=</span><span class="string">&quot;0&quot;</span> width<span class="operator">=</span><span class="string">&quot;100%&quot;</span> height<span class="operator">=</span><span class="string">&quot;100%&quot;</span> fill<span class="operator">=</span><span class="string">&quot;url(#dots)&quot;</span> /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，<code>&lt;pattern&gt;</code>标签将一个圆形定义为<code>dots</code>模式。<code>patternUnits=&quot;userSpaceOnUse&quot;</code>表示<code>&lt;pattern&gt;</code>的宽度和长度是实际的像素值。然后，指定这个模式去填充下面的矩形。</p><h3 id="image-标签"><code>&lt;image&gt;</code>标签 <a href="about:blank#image%E6%A0%87%E7%AD%BE">#</a></h3><p><code>&lt;image&gt;</code>标签用于插入图片文件。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg viewBox=<span class="string">&quot;0 0 100 100&quot;</span> width=<span class="string">&quot;100&quot;</span> height=<span class="string">&quot;100&quot;</span>&gt;</span><br><span class="line">  &lt;image xlink:href=<span class="string">&quot;path/to/image.jpg&quot;</span></span><br><span class="line">    width=<span class="string">&quot;50%&quot;</span> height=<span class="string">&quot;50%&quot;</span>/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，<code>&lt;image&gt;</code>的<code>xlink:href</code>属性表示图像的来源。</p><h3 id="animate-标签"><code>&lt;animate&gt;</code>标签 <a href="about:blank#animate%E6%A0%87%E7%AD%BE">#</a></h3><p><code>&lt;animate&gt;</code>标签用于产生动画效果。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg width<span class="operator">=</span><span class="string">&quot;500px&quot;</span> height<span class="operator">=</span><span class="string">&quot;500px&quot;</span>&gt;</span><br><span class="line">  &lt;rect x<span class="operator">=</span><span class="string">&quot;0&quot;</span> y<span class="operator">=</span><span class="string">&quot;0&quot;</span> width<span class="operator">=</span><span class="string">&quot;100&quot;</span> height<span class="operator">=</span><span class="string">&quot;100&quot;</span> fill<span class="operator">=</span><span class="string">&quot;#feac5e&quot;</span>&gt;</span><br><span class="line">    &lt;animate attributeName<span class="operator">=</span><span class="string">&quot;x&quot;</span> from<span class="operator">=</span><span class="string">&quot;0&quot;</span> to<span class="operator">=</span><span class="string">&quot;500&quot;</span> dur<span class="operator">=</span><span class="string">&quot;2s&quot;</span> repeatCount<span class="operator">=</span><span class="string">&quot;indefinite&quot;</span> /&gt;</span><br><span class="line">  &lt;/rect&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，矩形会不断移动，产生动画效果。</p><p><code>&lt;animate&gt;</code>的属性含义如下。</p><blockquote><ul><li>attributeName：发生动画效果的属性名。</li><li>from：单次动画的初始值。</li><li>to：单次动画的结束值。</li><li>dur：单次动画的持续时间。</li><li>repeatCount：动画的循环模式。</li></ul></blockquote><p>可以在多个属性上面定义动画。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;animate attributeName<span class="operator">=</span><span class="string">&quot;x&quot;</span> from<span class="operator">=</span><span class="string">&quot;0&quot;</span> to<span class="operator">=</span><span class="string">&quot;500&quot;</span> dur<span class="operator">=</span><span class="string">&quot;2s&quot;</span> repeatCount<span class="operator">=</span><span class="string">&quot;indefinite&quot;</span> /&gt;</span><br><span class="line">&lt;animate attributeName<span class="operator">=</span><span class="string">&quot;width&quot;</span> to<span class="operator">=</span><span class="string">&quot;500&quot;</span> dur<span class="operator">=</span><span class="string">&quot;2s&quot;</span> repeatCount<span class="operator">=</span><span class="string">&quot;indefinite&quot;</span> /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="animateTransform-标签"><code>&lt;animateTransform&gt;</code>标签 <a href="about:blank#animatetransform%E6%A0%87%E7%AD%BE">#</a></h3><p><code>&lt;animate&gt;</code>标签对 CSS 的<code>transform</code>属性不起作用，如果需要变形，就要使用<code>&lt;animateTransform&gt;</code>标签。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg width<span class="operator">=</span><span class="string">&quot;500px&quot;</span> height<span class="operator">=</span><span class="string">&quot;500px&quot;</span>&gt;</span><br><span class="line">  &lt;rect x<span class="operator">=</span><span class="string">&quot;250&quot;</span> y<span class="operator">=</span><span class="string">&quot;250&quot;</span> width<span class="operator">=</span><span class="string">&quot;50&quot;</span> height<span class="operator">=</span><span class="string">&quot;50&quot;</span> fill<span class="operator">=</span><span class="string">&quot;#4bc0c8&quot;</span>&gt;</span><br><span class="line">    &lt;animateTransform attributeName<span class="operator">=</span><span class="string">&quot;transform&quot;</span> type<span class="operator">=</span><span class="string">&quot;rotate&quot;</span> begin<span class="operator">=</span><span class="string">&quot;0s&quot;</span> dur<span class="operator">=</span><span class="string">&quot;10s&quot;</span> from<span class="operator">=</span><span class="string">&quot;0 200 200&quot;</span> to<span class="operator">=</span><span class="string">&quot;360 400 400&quot;</span> repeatCount<span class="operator">=</span><span class="string">&quot;indefinite&quot;</span> /&gt;</span><br><span class="line">  &lt;/rect&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，<code>&lt;animateTransform&gt;</code>的效果为旋转（<code>rotate</code>），这时<code>from</code>和<code>to</code>属性值有三个数字，第一个数字是角度值，第二个值和第三个值是旋转中心的坐标。<code>from=&quot;0 200 200&quot;</code>表示开始时，角度为0，围绕<code>(200, 200)</code>开始旋转；<code>to=&quot;360 400 400&quot;</code>表示结束时，角度为360，围绕<code>(400, 400)</code>旋转。</p><h2 id="JavaScript-操作">JavaScript 操作 <a href="about:blank#javascript-%E6%93%8D%E4%BD%9C">#</a></h2><h3 id="DOM-操作">DOM 操作 <a href="about:blank#dom-%E6%93%8D%E4%BD%9C">#</a></h3><p>如果 SVG 代码直接写在 HTML 网页之中，它就成为网页 DOM 的一部分，可以直接用 DOM 操作。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg</span><br><span class="line">  id<span class="operator">=</span><span class="string">&quot;mysvg&quot;</span></span><br><span class="line">  xmlns<span class="operator">=</span><span class="string">&quot;http://www.w3.org/2000/svg&quot;</span></span><br><span class="line">  viewBox<span class="operator">=</span><span class="string">&quot;0 0 800 600&quot;</span></span><br><span class="line">  preserveAspectRatio<span class="operator">=</span><span class="string">&quot;xMidYMid meet&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  &lt;circle id<span class="operator">=</span><span class="string">&quot;mycircle&quot;</span> cx<span class="operator">=</span><span class="string">&quot;400&quot;</span> cy<span class="operator">=</span><span class="string">&quot;300&quot;</span> r<span class="operator">=</span><span class="string">&quot;50&quot;</span> /&gt;</span><br><span class="line">&lt;svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码插入网页之后，就可以用 CSS 定制样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">circle</span> &#123;</span><br><span class="line">  <span class="attribute">stroke-width</span>: <span class="number">5</span>;</span><br><span class="line">  <span class="attribute">stroke</span>: <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#ff0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">circle</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">stroke</span>: <span class="number">#090</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，可以用 JavaScript 代码操作 SVG。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mycircle = document.getElementById(<span class="string">&#x27;mycircle&#x27;</span>);</span><br><span class="line"></span><br><span class="line">mycircle.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;circle clicked - enlarging&#x27;</span>);</span><br><span class="line">  mycircle.setAttribute(<span class="string">&#x27;r&#x27;</span>, <span class="number">60</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码指定，如果点击图形，就改写<code>circle</code>元素的<code>r</code>属性。</p><h3 id="获取-SVG-DOM">获取 SVG DOM <a href="about:blank#%E8%8E%B7%E5%8F%96-svg-dom">#</a></h3><p>使用<code>&lt;object&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;embed&gt;</code>标签插入 SVG 文件，可以获取 SVG DOM。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> svgObject = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;object&#x27;</span>).contentDocument;</span><br><span class="line"><span class="keyword">var</span> svgIframe = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;iframe&#x27;</span>).contentDocument;</span><br><span class="line"><span class="keyword">var</span> svgEmbed = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;embed&#x27;</span>).getSVGDocument();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，如果使用<code>&lt;img&gt;</code>标签插入 SVG 文件，就无法获取 SVG DOM。</p><h3 id="读取-SVG-源码">读取 SVG 源码 <a href="about:blank#%E8%AF%BB%E5%8F%96-svg-%E6%BA%90%E7%A0%81">#</a></h3><p>由于 SVG 文件就是一段 XML 文本，因此可以通过读取 XML 代码的方式，读取 SVG 源码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;svg-container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xml:space</span>=<span class="string">&quot;preserve&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;440&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- svg code --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用<code>XMLSerializer</code>实例的<code>serializeToString()</code>方法，获取 SVG 元素的代码。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> svgString = <span class="keyword">new</span> XMLSerializer()</span><br><span class="line">  .serializeToString(<span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">&#x27;svg&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SVG-图像转为-Canvas-图像">SVG 图像转为 Canvas 图像 <a href="about:blank#svg-%E5%9B%BE%E5%83%8F%E8%BD%AC%E4%B8%BA-canvas-%E5%9B%BE%E5%83%8F">#</a></h3><p>首先，需要新建一个<code>Image</code>对象，将 SVG 图像指定到该<code>Image</code>对象的<code>src</code>属性。</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line"><span class="keyword">var</span> svg = <span class="keyword">new</span> Blob([svgString], &#123;type: <span class="string">&quot;image/svg+xml;charset=utf-8&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DOMURL = <span class="symbol">self</span>.URL || <span class="symbol">self</span>.webkitURL || <span class="symbol">self</span>;</span><br><span class="line"><span class="keyword">var</span> url = DOMURL.createObjectURL(svg);</span><br><span class="line"></span><br><span class="line">img.src = url;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，当图像加载完成后，再将它绘制到<code>&lt;canvas&gt;</code>元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">  ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实例：折线图">实例：折线图 <a href="about:blank#%E5%AE%9E%E4%BE%8B%E6%8A%98%E7%BA%BF%E5%9B%BE">#</a></h2><p>下面将一张数据表格画成折线图。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Date |Amount</span><br><span class="line">-----|------</span><br><span class="line">2014<span class="string">-01</span><span class="string">-01</span> | $10</span><br><span class="line">2014<span class="string">-02</span><span class="string">-01</span> | $20</span><br><span class="line">2014<span class="string">-03</span><span class="string">-01</span> | $40</span><br><span class="line">2014<span class="string">-04</span><span class="string">-01</span> | $80</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的图形，可以画成一个坐标系，<code>Date</code>作为横轴，<code>Amount</code>作为纵轴，四行数据画成一个数据点。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;350&quot;</span> <span class="attr">height</span>=<span class="string">&quot;160&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">g</span> <span class="attr">class</span>=<span class="string">&quot;layer&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;translate(60,10)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">&quot;2&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;105&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">&quot;2&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;90&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;90&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">&quot;2&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;180&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;60&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">&quot;2&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;270&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;0,105 90,90 180,60 270,0&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span> <span class="attr">class</span>=<span class="string">&quot;y axis&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;120&quot;</span> <span class="attr">style</span>=<span class="string">&quot;stroke:black;stroke-width:1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;-40&quot;</span> <span class="attr">y</span>=<span class="string">&quot;115&quot;</span> <span class="attr">dy</span>=<span class="string">&quot;5&quot;</span>&gt;</span>$10<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;-40&quot;</span> <span class="attr">y</span>=<span class="string">&quot;5&quot;</span> <span class="attr">dy</span>=<span class="string">&quot;5&quot;</span>&gt;</span>$80<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span> <span class="attr">class</span>=<span class="string">&quot;x axis&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;translate(0, 120)&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;270&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;stroke:black;stroke-width:1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;-10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span>&gt;</span>Jan.<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;255&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span>&gt;</span>Apr.<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考链接">参考链接 <a href="about:blank#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">#</a></h2><ul><li>Jon McPartland, <a href="http://bigbitecreative.com/introduction-svg-animation/">An introduction to SVG animation</a></li><li>Alexander Goedde, <a href="http://tavendo.com/blog/post/super-vector-graphics/">SVG - Super Vector Graphics</a></li><li>Joseph Wegner, <a href="http://flippinawesome.org/2014/02/03/learning-svg/">Learning SVG</a></li><li>biovisualize, <a href="http://bl.ocks.org/biovisualize/8187844">Direct svg to canvas to png conversion</a></li><li>Tyler Sticka, <a href="https://cloudfour.com/thinks/cropping-image-thumbnails-with-svg/">Cropping Image Thumbnails with SVG</a></li><li>Adi Purdila, <a href="https://webdesign.tutsplus.com/tutorials/how-to-create-a-loader-icon-with-svg-animations--cms-31542">How to Create a Loader Icon With SVG Animations</a></li></ul><p>本文转自 <a href="https://wangdoc.com/webapi/svg">https://wangdoc.com/webapi/svg</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">SVG 图像</summary>
    
    
    
    <category term="webApi" scheme="https://www.hacp.top/categories/webApi/"/>
    
    
    <category term="webApi" scheme="https://www.hacp.top/tags/webApi/"/>
    
  </entry>
  
  <entry>
    <title>Server-Sent Events</title>
    <link href="https://www.hacp.top/posts/47.html"/>
    <id>https://www.hacp.top/posts/47.html</id>
    <published>2023-07-15T10:19:03.000Z</published>
    <updated>2023-07-15T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Server-Sent Events</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><h2 id="简介">简介 <a href="about:blank#%E7%AE%80%E4%BB%8B">#</a></h2><p>服务器向客户端推送数据，有很多解决方案。除了“轮询” 和 WebSocket，HTML 5 还提供了 Server-Sent Events（以下简称 SSE）。</p><p>一般来说，HTTP 协议只能客户端向服务器发起请求，服务器不能主动向客户端推送。但是有一种特殊情况，就是服务器向客户端声明，接下来要发送的是流信息（streaming）。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流。本质上，这种通信就是以流信息的方式，完成一次用时很长的下载。</p><p>SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 HTTP 协议，目前除了 IE/Edge，其他浏览器都支持。</p><h2 id="与-WebSocket-的比较">与 WebSocket 的比较 <a href="about:blank#%E4%B8%8E-websocket-%E7%9A%84%E6%AF%94%E8%BE%83">#</a></h2><p>SSE 与 WebSocket 作用相似，都是建立浏览器与服务器之间的通信渠道，然后服务器向浏览器推送信息。</p><p>总体来说，WebSocket 更强大和灵活。因为它是全双工通道，可以双向通信；SSE 是单向通道，只能服务器向浏览器发送，因为 streaming 本质上就是下载。如果浏览器向服务器发送信息，就变成了另一次 HTTP 请求。</p><p>但是，SSE 也有自己的优点。</p><ul><li>SSE 使用 HTTP 协议，现有的服务器软件都支持。WebSocket 是一个独立协议。</li><li>SSE 属于轻量级，使用简单；WebSocket 协议相对复杂。</li><li>SSE 默认支持断线重连，WebSocket 需要自己实现断线重连。</li><li>SSE 一般只用来传送文本，二进制数据需要编码后传送，WebSocket 默认支持传送二进制数据。</li><li>SSE 支持自定义发送的消息类型。</li></ul><p>因此，两者各有特点，适合不同的场合。</p><h2 id="客户端-API">客户端 API <a href="about:blank#%E5%AE%A2%E6%88%B7%E7%AB%AF-api">#</a></h2><h3 id="EventSource-对象">EventSource 对象 <a href="about:blank#eventsource-%E5%AF%B9%E8%B1%A1">#</a></h3><p>SSE 的客户端 API 部署在<code>EventSource</code>对象上。下面的代码可以检测浏览器是否支持 SSE。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;EventSource&#x27;</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 SSE 时，浏览器首先生成一个<code>EventSource</code>实例，向服务器发起连接。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source = <span class="keyword">new</span> EventSource(<span class="built_in">url</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的<code>url</code>可以与当前网址同域，也可以跨域。跨域时，可以指定第二个参数，打开<code>withCredentials</code>属性，表示是否一起发送 Cookie。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source = <span class="keyword">new</span> EventSource(<span class="built_in">url</span>, &#123; <span class="attribute">withCredentials</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="readyState-属性">readyState 属性 <a href="about:blank#readystate-%E5%B1%9E%E6%80%A7">#</a></h3><p><code>EventSource</code>实例的<code>readyState</code>属性，表明连接的当前状态。该属性只读，可以取以下值。</p><ul><li>0：相当于常量<code>EventSource.CONNECTING</code>，表示连接还未建立，或者断线正在重连。</li><li>1：相当于常量<code>EventSource.OPEN</code>，表示连接已经建立，可以接受数据。</li><li>2：相当于常量<code>EventSource.CLOSED</code>，表示连接已断，且不会重连。</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source = <span class="keyword">new</span> EventSource(url);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(source.readyState);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="url-属性">url 属性 <a href="about:blank#url-%E5%B1%9E%E6%80%A7">#</a></h3><p><code>EventSource</code>实例的<code>url</code>属性返回连接的网址，该属性只读。</p><h3 id="withCredentials-属性">withCredentials 属性 <a href="about:blank#withcredentials-%E5%B1%9E%E6%80%A7">#</a></h3><p><code>EventSource</code>实例的<code>withCredentials</code>属性返回一个布尔值，表示当前实例是否开启 CORS 的<code>withCredentials</code>。该属性只读，默认是<code>false</code>。</p><h3 id="onopen-属性">onopen 属性 <a href="about:blank#onopen-%E5%B1%9E%E6%80%A7">#</a></h3><p>连接一旦建立，就会触发<code>open</code>事件，可以在<code>onopen</code>属性定义回调函数。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">source.onopen = <span class="keyword">function</span> <span class="params">(event)</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种写法</span></span><br><span class="line">source.addEventListener(<span class="string">&#x27;open&#x27;</span>, <span class="keyword">function</span> <span class="params">(event)</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="onmessage-属性">onmessage 属性 <a href="about:blank#onmessage-%E5%B1%9E%E6%80%A7">#</a></h3><p>客户端收到服务器发来的数据，就会触发<code>message</code>事件，可以在<code>onmessage</code>属性定义回调函数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">source.onmessage = function (<span class="keyword">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="keyword">event</span>.data;</span><br><span class="line">  <span class="keyword">var</span> origin = <span class="keyword">event</span>.origin;</span><br><span class="line">  <span class="keyword">var</span> lastEventId = <span class="keyword">event</span>.lastEventId;</span><br><span class="line">  <span class="comment">// handle message</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种写法</span></span><br><span class="line">source.addEventListener(<span class="string">&#x27;message&#x27;</span>, function (<span class="keyword">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="keyword">event</span>.data;</span><br><span class="line">  <span class="keyword">var</span> origin = <span class="keyword">event</span>.origin;</span><br><span class="line">  <span class="keyword">var</span> lastEventId = <span class="keyword">event</span>.lastEventId;</span><br><span class="line">  <span class="comment">// handle message</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，参数对象<code>event</code>有如下属性。</p><ul><li><code>data</code>：服务器端传回的数据（文本格式）。</li><li><code>origin</code>： 服务器 URL 的域名部分，即协议、域名和端口，表示消息的来源。</li><li><code>lastEventId</code>：数据的编号，由服务器端发送。如果没有编号，这个属性为空。</li></ul><h3 id="onerror-属性">onerror 属性 <a href="about:blank#onerror-%E5%B1%9E%E6%80%A7">#</a></h3><p>如果发生通信错误（比如连接中断），就会触发<code>error</code>事件，可以在<code>onerror</code>属性定义回调函数。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">source.onerror = <span class="keyword">function</span> <span class="params">(event)</span> &#123;</span><br><span class="line">  <span class="comment">// handle error event</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种写法</span></span><br><span class="line">source.addEventListener(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> <span class="params">(event)</span> &#123;</span><br><span class="line">  <span class="comment">// handle error event</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义事件">自定义事件 <a href="about:blank#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6">#</a></h3><p>默认情况下，服务器发来的数据，总是触发浏览器<code>EventSource</code>实例的<code>message</code>事件。开发者还可以自定义 SSE 事件，这种情况下，发送回来的数据不会触发<code>message</code>事件。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">source.addEventListener(<span class="string">&#x27;foo&#x27;</span>, function (<span class="keyword">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="keyword">event</span>.data;</span><br><span class="line">  <span class="keyword">var</span> origin = <span class="keyword">event</span>.origin;</span><br><span class="line">  <span class="keyword">var</span> lastEventId = <span class="keyword">event</span>.lastEventId;</span><br><span class="line">  <span class="comment">// handle message</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，浏览器对 SSE 的<code>foo</code>事件进行监听。如何实现服务器发送<code>foo</code>事件，请看下文。</p><h3 id="close-方法">close() 方法 <a href="about:blank#close-%E6%96%B9%E6%B3%95">#</a></h3><p><code>close</code>方法用于关闭 SSE 连接。</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span>.<span class="keyword">close</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="服务器实现">服务器实现 <a href="about:blank#%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0">#</a></h2><h3 id="数据格式">数据格式 <a href="about:blank#%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F">#</a></h3><p>服务器向浏览器发送的 SSE 数据，必须是 UTF-8 编码的文本，具有如下的 HTTP 头信息。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">Content-Type:</span> text<span class="symbol">/event-stream</span></span><br><span class="line"><span class="params">Cache-Control:</span> no-cache</span><br><span class="line"><span class="params">Connection:</span> keep-alive</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面三行之中，第一行的<code>Content-Type</code>必须指定 MIME 类型为<code>event-steam</code>。</p><p>每一次发送的信息，由若干个<code>message</code>组成，每个<code>message</code>之间用<code>\n\n</code>分隔。每个<code>message</code>内部由若干行组成，每一行都是如下格式。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">field</span>]: <span class="link">value\n</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的<code>field</code>可以取四个值。</p><ul><li>data</li><li>event</li><li>id</li><li>retry</li></ul><p>此外，还可以有冒号开头的行，表示注释。通常，服务器每隔一段时间就会向浏览器发送一个注释，保持连接不中断。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">: This <span class="keyword">is</span> a <span class="keyword">comment</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">: this is a test stream<span class="symbol">\n</span><span class="symbol">\n</span></span><br><span class="line"></span><br><span class="line">data: some text<span class="symbol">\n</span><span class="symbol">\n</span></span><br><span class="line"></span><br><span class="line">data: another message<span class="symbol">\n</span></span><br><span class="line">data: with two lines <span class="symbol">\n</span><span class="symbol">\n</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="data-字段">data 字段 <a href="about:blank#data-%E5%AD%97%E6%AE%B5">#</a></h3><p>数据内容用<code>data</code>字段表示。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span>:  message\n\n</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果数据很长，可以分成多行，最后一行用<code>\n\n</code>结尾，前面行都用<code>\n</code>结尾。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: <span class="keyword">begin</span> <span class="keyword">message</span>\n</span><br><span class="line">data: <span class="keyword">continue</span> <span class="keyword">message</span>\n\n</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是一个发送 JSON 数据的例子。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">data:</span> &#123;\n</span><br><span class="line"><span class="symbol">data:</span> <span class="string">&quot;foo&quot;</span>: <span class="string">&quot;bar&quot;</span>,\n</span><br><span class="line"><span class="symbol">data:</span> <span class="string">&quot;baz&quot;</span>, <span class="number">555</span>\n</span><br><span class="line"><span class="symbol">data:</span> &#125;\n\n</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="id-字段">id 字段 <a href="about:blank#id-%E5%AD%97%E6%AE%B5">#</a></h3><p>数据标识符用<code>id</code>字段表示，相当于每一条数据的编号。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id: msg1<span class="symbol">\n</span></span><br><span class="line">data: message<span class="symbol">\n</span><span class="symbol">\n</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>浏览器用<code>lastEventId</code>属性读取这个值。一旦连接断线，浏览器会发送一个 HTTP 头，里面包含一个特殊的<code>Last-Event-ID</code>头信息，将这个值发送回来，用来帮助服务器端重建连接。因此，这个头信息可以被视为一种同步机制。</p><h3 id="event-字段">event 字段 <a href="about:blank#event-%E5%AD%97%E6%AE%B5">#</a></h3><p><code>event</code>字段表示自定义的事件类型，默认是<code>message</code>事件。浏览器可以用<code>addEventListener()</code>监听该事件。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">event: foo<span class="symbol">\n</span></span><br><span class="line">data: a foo event<span class="symbol">\n</span><span class="symbol">\n</span></span><br><span class="line"></span><br><span class="line">data: an unnamed event<span class="symbol">\n</span><span class="symbol">\n</span></span><br><span class="line"></span><br><span class="line">event: bar<span class="symbol">\n</span></span><br><span class="line">data: a bar event<span class="symbol">\n</span><span class="symbol">\n</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码创造了三条信息。第一条的名字是<code>foo</code>，触发浏览器的<code>foo</code>事件；第二条未取名，表示默认类型，触发浏览器的<code>message</code>事件；第三条是<code>bar</code>，触发浏览器的<code>bar</code>事件。</p><p>下面是另一个例子。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">event:</span> userconnect</span><br><span class="line"><span class="symbol">data:</span> &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;bobby&quot;</span>, <span class="string">&quot;time&quot;</span>: <span class="string">&quot;02:33:48&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">event:</span> usermessage</span><br><span class="line"><span class="symbol">data:</span> &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;bobby&quot;</span>, <span class="string">&quot;time&quot;</span>: <span class="string">&quot;02:34:11&quot;</span>, <span class="string">&quot;text&quot;</span>: <span class="string">&quot;Hi everyone.&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">event:</span> userdisconnect</span><br><span class="line"><span class="symbol">data:</span> &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;bobby&quot;</span>, <span class="string">&quot;time&quot;</span>: <span class="string">&quot;02:34:23&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">event:</span> usermessage</span><br><span class="line"><span class="symbol">data:</span> &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;sean&quot;</span>, <span class="string">&quot;time&quot;</span>: <span class="string">&quot;02:34:36&quot;</span>, <span class="string">&quot;text&quot;</span>: <span class="string">&quot;Bye, bobby.&quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="retry-字段">retry 字段 <a href="about:blank#retry-%E5%AD%97%E6%AE%B5">#</a></h3><p>服务器可以用<code>retry</code>字段，指定浏览器重新发起连接的时间间隔。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">retry</span>: <span class="number">10000</span>\n</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两种情况会导致浏览器重新发起连接：一种是时间间隔到期，二是由于网络错误等原因，导致连接出错。</p><h2 id="Node-服务器实例">Node 服务器实例 <a href="about:blank#node-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E4%BE%8B">#</a></h2><p>SSE 要求服务器与浏览器保持连接。对于不同的服务器软件来说，所消耗的资源是不一样的。Apache 服务器，每个连接就是一个线程，如果要维持大量连接，势必要消耗大量资源。Node 则是所有连接都使用同一个线程，因此消耗的资源会小得多，但是这要求每个连接不能包含很耗时的操作，比如磁盘的 IO 读写。</p><p>下面是 Node 的 SSE 服务器<a href="http://cjihrig.com/blog/server-sent-events-in-node-js/">实例</a>。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="keyword">function</span> (req, res) &#123;</span><br><span class="line">  var fileName = &quot;.&quot; + req.url;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fileName === &quot;./stream&quot;) &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      &quot;Content-Type&quot;:&quot;text/event-stream&quot;,</span><br><span class="line">      &quot;Cache-Control&quot;:&quot;no-cache&quot;,</span><br><span class="line">      &quot;Connection&quot;:&quot;keep-alive&quot;,</span><br><span class="line">      &quot;Access-Control-Allow-Origin&quot;: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    res.<span class="keyword">write</span>(&quot;retry: 10000\n&quot;);</span><br><span class="line">    res.<span class="keyword">write</span>(&quot;event: connecttime\n&quot;);</span><br><span class="line">    res.<span class="keyword">write</span>(&quot;data: &quot; + (<span class="built_in">new</span> <span class="type">Date</span>()) + &quot;\n\n&quot;);</span><br><span class="line">    res.<span class="keyword">write</span>(&quot;data: &quot; + (<span class="built_in">new</span> <span class="type">Date</span>()) + &quot;\n\n&quot;);</span><br><span class="line"></span><br><span class="line">    <span class="type">interval</span> = setInterval(<span class="keyword">function</span> () &#123;</span><br><span class="line">      res.<span class="keyword">write</span>(&quot;data: &quot; + (<span class="built_in">new</span> <span class="type">Date</span>()) + &quot;\n\n&quot;);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    req.<span class="keyword">connection</span>.addListener(&quot;close&quot;, <span class="keyword">function</span> () &#123;</span><br><span class="line">      clearInterval(<span class="type">interval</span>);</span><br><span class="line">    &#125;, <span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="keyword">listen</span>(<span class="number">8844</span>, &quot;127.0.0.1&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考链接">参考链接 <a href="about:blank#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">#</a></h2><ul><li>Colin Ihrig, <a href="http://jspro.com/apis/implementing-push-technology-using-server-sent-events/">Implementing Push Technology Using Server-Sent Events</a></li><li>Colin Ihrig，<a href="http://cjihrig.com/blog/the-server-side-of-server-sent-events/">The Server Side of Server-Sent Events</a></li><li>Eric Bidelman, <a href="http://www.html5rocks.com/en/tutorials/eventsource/basics/">Stream Updates with Server-Sent Events</a></li><li>MDN，<a href="https://developer.mozilla.org/en-US/docs/Server-sent_events/Using_server-sent_events">Using server-sent events</a></li><li><a href="http://Segment.io">Segment.io</a>, <a href="https://segment.io/blog/2014-04-03-server-sent-events-the-simplest-realtime-browser-spec/">Server-Sent Events: The simplest realtime browser spec</a></li></ul><p>本文转自 <a href="https://wangdoc.com/webapi/server-sent-events">https://wangdoc.com/webapi/server-sent-events</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">Server-Sent Events</summary>
    
    
    
    <category term="webApi" scheme="https://www.hacp.top/categories/webApi/"/>
    
    
    <category term="webApi" scheme="https://www.hacp.top/tags/webApi/"/>
    
  </entry>
  
  <entry>
    <title>Response API</title>
    <link href="https://www.hacp.top/posts/46.html"/>
    <id>https://www.hacp.top/posts/46.html</id>
    <published>2023-07-14T10:19:03.000Z</published>
    <updated>2023-07-14T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Response API</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><p>浏览器原生提供<code>Response()</code>构造函数，用来构造服务器响应。</p><p><code>fetch()</code>方法返回的就是一个 Response 对象。</p><h2 id="构造方法">构造方法 <a href="about:blank#%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95">#</a></h2><p><code>Response()</code>作为构造方法调用时，返回 Response 实例。</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">new</span> Response([<span class="keyword">body</span>:Object, [init : Object]]): Response</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="keyword">new</span> Response()</span><br><span class="line"><span class="keyword">new</span> Response(<span class="keyword">body</span>)</span><br><span class="line"><span class="keyword">new</span> Response(<span class="keyword">body</span>, options)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它带有两个参数，都是可选的。</p><p>第一个参数<code>body</code>代表服务器返回的数据体，必须是下面类型之一：ArrayBuffer、ArrayBufferView、Blob、FormData、ReadableStream、String、URLSearchParams。</p><p>第二个参数<code>init</code>是一个对象，代表服务器返回的数据头，类型描述如下。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  status: <span class="built_in">Number</span></span><br><span class="line">  statusText: <span class="built_in">String</span></span><br><span class="line">  headers: <span class="built_in">Object</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">const myBlob</span> = new Blob();</span><br><span class="line"><span class="attribute">const myOptions</span> = &#123; status: 200, statusText: <span class="string">&quot;OK&quot;</span> &#125;;</span><br><span class="line"><span class="attribute">const myResponse</span> = new Response(myBlob, myOptions);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，如果返回 JSON 数据，必须将其转成字符串返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">hello</span>: <span class="string">&quot;world&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> json = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">new</span> <span class="title class_">Response</span>(json, &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json;charset=UTF-8&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，构造一个返回 JSON 数据的 Response 对象，就必须用<code>JSON.stringify()</code>方法，将第一个参数转为字符串。</p><h2 id="实例属性">实例属性 <a href="about:blank#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">#</a></h2><h3 id="body，bodyUsed">body，bodyUsed <a href="about:blank#bodybodyused">#</a></h3><p><code>body</code>属性代表数据体，是一个只读的 ReadableStream 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/fireworks.ogv&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> reader = res.<span class="property">body</span>.<span class="title function_">getReader</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result;</span><br><span class="line"><span class="keyword">while</span> (!(result = <span class="keyword">await</span> reader.<span class="title function_">read</span>()).<span class="property">done</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;chunk size:&#x27;</span>, result.<span class="property">value</span>.<span class="property">byteLength</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，先建立一个 body 的读取器，然后每次读取一段数据，输出这段数据的字段长度。</p><p>注意，<code>body</code>是一个 Stream 对象，只能读取一次。取出所有数据以后，第二次就读不到了。</p><p><code>bodyUsed</code>属性是一个只读的布尔值，表示<code>body</code>属性是否已经读取。</p><h3 id="headers">headers <a href="about:blank#headers">#</a></h3><p><code>headers</code>属性代表服务器返回的数据头，是一个只读的 Headers 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/flowers.jpg&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...res.<span class="property">headers</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，发出请求后，展开打印<code>res.headers</code>属性，即服务器回应的所有消息头。</p><h3 id="ok">ok <a href="about:blank#ok">#</a></h3><p><code>ok</code>属性是一个布尔值，表示服务器返回的状态码是否成功（200到299），该属性只读。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://httpbin.org/status/200&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="property">ok</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res2 = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://httpbin.org/status/404&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2.<span class="property">ok</span>); <span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="redirected">redirected <a href="about:blank#redirected">#</a></h3><p><code>redirected</code>是一个布尔值，表示服务器返回的状态码是否跳转类型（301，302等），该属性只读。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://httpbin.org/status/200&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="property">redirected</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res2 = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://httpbin.org/status/301&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2.<span class="property">redirected</span>); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="status，statusText">status，statusText <a href="about:blank#statusstatustext">#</a></h3><p><code>status</code>属性是一个数值，代表服务器返回的状态码，该属性只读。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://httpbin.org/status/200&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="property">status</span>); <span class="comment">// 200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res2 = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://httpbin.org/status/404&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2.<span class="property">status</span>); <span class="comment">// 404</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>statusText</code>属性是一个字符串，代表服务器返回的状态码的文字描述。比如，状态码200的<code>statusText</code>一般是<code>OK</code>，也可能为空。</p><h3 id="type">type <a href="about:blank#type">#</a></h3><p><code>type</code>属性是一个只读字符串，表示服务器回应的类型，它的值有下面几种：basic、cors、default、error、opaque、opaqueredirect。</p><h3 id="url">url <a href="about:blank#url">#</a></h3><p><code>url</code>属性是一个字符串，代表服务器路径，该属性只读。如果请求是重定向的，该属性就是重定向后的 URL。</p><h2 id="实例方法">实例方法 <a href="about:blank#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95">#</a></h2><h3 id="数据读取">数据读取 <a href="about:blank#%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96">#</a></h3><p>以下方法可以获取服务器响应的消息体，根据返回数据的不同类型，调用相应方法。</p><ul><li>.json()：返回一个 Promise 对象，最终得到一个解析后的 JSON 对象。</li><li>.text()：返回一个 Promise 对象，最终得到一个字符串。</li><li>.blob()：返回一个 Promise 对象，最终得到一个二进制 Blob 对象，代表某个文件整体的原始数据。</li><li>.arrayBuffer()：返回一个 Promise 对象，最终得到一个 ArrayBuffer 对象，代表一段固定长度的二进制数据。</li><li>.formData()：返回一个 Promise 对象，最终得到一个 FormData 对象，里面是键值对形式的表单提交数据。</li></ul><p>下面是从服务器获取 JSON 数据的一个例子，使用<code>.json()</code>方法，其他几个方法的用法都大同小异。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getRedditPosts</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://www.reddit.com/r/all/top.json?limit=10&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="keyword">const</span> posts = data.<span class="property">data</span>.<span class="property">children</span>.<span class="title function_">map</span>(<span class="function"><span class="params">child</span> =&gt;</span> child.<span class="property">data</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(posts.<span class="title function_">map</span>(<span class="function"><span class="params">post</span> =&gt;</span> post.<span class="property">title</span>));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是从服务器获取二进制文件的例子，使用<code>.blob()</code>方法。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">displayImageAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="title">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">&#x27;https://www.example.com/image.jpg&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> blob = <span class="keyword">await</span> response.blob();</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">url</span> = URL.createObjectURL(blob);</span><br><span class="line">    <span class="keyword">const</span> img = <span class="built_in">document</span>.createElement(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">    img.src = <span class="built_in">url</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(img);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是从服务器获取音频文件，直接解压播放的例子，使用<code>.arrayBuffer()</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">playAudioAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://www.example.com/audio.mp3&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> arrayBuffer = <span class="keyword">await</span> response.<span class="title function_">arrayBuffer</span>();</span><br><span class="line">    <span class="keyword">const</span> audioBuffer = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">AudioContext</span>().<span class="title function_">decodeAudioData</span>(arrayBuffer);</span><br><span class="line">    <span class="keyword">const</span> source = <span class="keyword">new</span> <span class="title class_">AudioBufferSourceNode</span>(<span class="keyword">new</span> <span class="title class_">AudioContext</span>(), &#123; <span class="attr">buffer</span>: audioBuffer &#125;);</span><br><span class="line">    source.<span class="title function_">connect</span>(<span class="keyword">new</span> <span class="title class_">AudioContext</span>().<span class="property">destination</span>);</span><br><span class="line">    source.<span class="title function_">start</span>(<span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="clone">clone() <a href="about:blank#clone">#</a></h3><p><code>clone()</code>方法用来复制 Response 对象。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res1 = <span class="function">await <span class="title">fetch</span><span class="params">(<span class="string">&#x27;/flowers.jpg&#x27;</span>)</span></span>;</span><br><span class="line"><span class="keyword">const</span> res2 = res1.clone();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>复制以后，读取一个对象的数据，不会影响到另一个对象。</p><h2 id="静态方法">静态方法 <a href="about:blank#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95">#</a></h2><h3 id="Response-json">Response.json() <a href="about:blank#responsejson">#</a></h3><p><code>Response.json()</code>返回一个 Response 实例，该实例对象的数据体就是作为参数的 JSON 数据，数据头的<code>Content-Type</code>字段自动设为<code>application/json</code>。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Response</span>.json(<span class="class"><span class="keyword">data</span>)</span></span><br><span class="line"><span class="type">Response</span>.json(<span class="class"><span class="keyword">data</span>, options)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Response.json()</code>基本上就是<code>Response()</code>构造函数的变体。</p><p>下面是示例。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">jsonResponse1</span> = Response.<span class="title function_ invoke__">json</span>(&#123; <span class="attr">my</span>: <span class="string">&quot;data&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">jsonResponse2</span> = Response.<span class="title function_ invoke__">json</span>(</span><br><span class="line">  &#123; <span class="attr">some</span>: <span class="string">&quot;data&quot;</span>, <span class="attr">more</span>: <span class="string">&quot;information&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">status</span>: <span class="number">307</span>, <span class="attr">statusText</span>: <span class="string">&quot;Temporary Redirect&quot;</span> &#125;,</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Response-error">Response.error() <a href="about:blank#responseerror">#</a></h3><p><code>Response.error()</code>用来构造一个表示报错的服务器回应，主要用在 Service worker，表示拒绝发送。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">&#x27;fetch&#x27;</span>, (<span class="keyword">event</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="keyword">new</span> URL(<span class="keyword">event</span>.request.url);</span><br><span class="line">  <span class="keyword">if</span> (url.pathname === <span class="string">&#x27;/flowers.jpg&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">event</span>.respondWith(Response.error());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Response-redirect">Response.redirect() <a href="about:blank#responseredirect">#</a></h3><p><code>Response.redirect()</code>用来构造一个表示跳转的服务器回应，主要用在 Service worker，表示跳转到其他网址。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Response.redirect(<span class="built_in">url</span>)</span><br><span class="line">Response.redirect(<span class="built_in">url</span>, status)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个方法的第一个参数<code>url</code>是所要跳转的目标网址，第二个参数是状态码，一般是301或302（默认值）。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Response</span>.redirect(<span class="string">&quot;https://www.example.com&quot;</span>, <span class="number">302</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本文转自 <a href="https://wangdoc.com/webapi/response">https://wangdoc.com/webapi/response</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">Response API</summary>
    
    
    
    <category term="webApi" scheme="https://www.hacp.top/categories/webApi/"/>
    
    
    <category term="webApi" scheme="https://www.hacp.top/tags/webApi/"/>
    
  </entry>
  
  <entry>
    <title>Request API</title>
    <link href="https://www.hacp.top/posts/45.html"/>
    <id>https://www.hacp.top/posts/45.html</id>
    <published>2023-07-13T10:19:03.000Z</published>
    <updated>2023-07-13T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Request API</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><p>浏览器原生提供 Request() 构造函数，用来构造发给服务器的 HTTP 请求。它生成的 Response 实例，可以作为<code>fetch()</code>的参数。</p><p>注意，构造一个 Request 对象，只是构造出一个数据结构，本身并不会发出 HTTP 请求，只有将它传入<code>fetch()</code>方法才会真的发出请求。</p><h2 id="构造方法">构造方法 <a href="about:blank#%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95">#</a></h2><p>Request 作为构造函数的语法如下，返回一个 Request 实例对象。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Request(url: <span class="built_in">String</span>, [init: <span class="built_in">Object</span>]): Request</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它的第一个参数是请求的 URL 字符串，第二个参数是一个可选的配置对象，用来构造 HTTP 请求，该对象的类型描述如下。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">  body:</span> Object</span><br><span class="line"><span class="symbol">  cache:</span> String</span><br><span class="line"><span class="symbol">  credentials:</span> String</span><br><span class="line"><span class="symbol">  headers:</span> Object</span><br><span class="line"><span class="symbol">  integrity:</span> String</span><br><span class="line"><span class="symbol">  keepalive:</span> Boolean</span><br><span class="line"><span class="symbol">  method:</span> String</span><br><span class="line"><span class="symbol">  mode:</span> String</span><br><span class="line"><span class="symbol">  redirect:</span>String</span><br><span class="line"><span class="symbol">  referrer:</span>String</span><br><span class="line"><span class="symbol">  referrerPolicy:</span> String</span><br><span class="line"><span class="symbol">  requestMode:</span> String</span><br><span class="line"><span class="symbol">  requestCredentials:</span> String</span><br><span class="line"><span class="symbol">  signal:</span> AbortSignal</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二个参数配置对象的各个属性的含义如下。</p><ul><li><code>body</code>：HTTP 请求的数据体，必须是 Blob、BufferSource、FormData、String、URLSearchParams 类型之一。</li><li><code>cache</code>：请求的缓存模式。</li><li><code>credentials</code>：请求所用的凭证，可以设为 omit、same-origini、include。Chrome 47 之前，默认值为 same-origin；Chrome 47 之后，默认值为 include。</li><li><code>headers</code>：一个代表 HTTP 请求数据头的对象，类型为 Headers 对象实例。</li><li><code>integrity</code>：请求的资源的资源完整度验证值，比如<code>sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=</code>。</li><li><code>method</code>：HTTP 方法，一般为<code>GET</code>、<code>POST</code>、<code>DELETE</code>，默认是<code>GET</code>。</li><li><code>mode</code>：请求模式，比如 cors、no-cors、navigate，默认为 cors。</li><li><code>redirect</code>：请求所用的模式，可以设为 error、follow、manual，默认为 follow。</li><li><code>referrer</code>：请求的来源，默认为 about:client。</li></ul><p>下面是两个示例。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例一</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="keyword">new</span> Request(<span class="string">&#x27;flowers.jpg&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例二</span></span><br><span class="line"><span class="keyword">const</span> myInit = &#123;</span><br><span class="line">  method: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;image/jpeg&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">&quot;cors&quot;</span>,</span><br><span class="line">  cache: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = <span class="keyword">new</span> Request(<span class="string">&#x27;flowers.jpg&#x27;</span>, myInit);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Request()</code>还有另一种语法，第一个参数是另一个 Request 对象，第二个参数还是一个配置对象。它返回一个新的 Request 对象，相当于对第一个参数 Request 对象进行修改。</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Request</span>(<span class="built_in">request</span>: <span class="built_in">Request</span>, [init: Object]): <span class="built_in">Request</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实例属性">实例属性 <a href="about:blank#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">#</a></h2><p>Request 实例对象的属性，大部分就是它的构造函数第二个参数配置对象的属性。</p><p>（1）<code>body</code></p><p><code>body</code>属性返回 HTTP 请求的数据体，它的值是一个 ReadableStream 对象或 null（<code>GET</code>或<code>HEAD</code>请求时没有数据体）。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const request = new Request(<span class="string">&#x27;/myEndpoint&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="keyword">method</span>: &quot;<span class="title">POST</span>&quot;,</span></span><br><span class="line"><span class="function">  <span class="title">body</span>: &quot;<span class="title">Hello</span> <span class="title">world</span>&quot;,</span></span><br><span class="line"><span class="function">&#125;)</span>;</span><br><span class="line"></span><br><span class="line">request.body; <span class="regexp">//</span> ReadableStream 对象</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，Firefox 不支持该属性。</p><p>（2）<code>bodyused</code></p><p><code>bodyUsed</code>属性是一个布尔值，表示<code>body</code>是否已经被读取了。</p><p>（3）<code>cache</code></p><p><code>cache</code>属性是一个只读字符串，表示请求的缓存模式，可能的值有 default、force-cache、no-cache、no-store、only-if-cached、reload。</p><p>（4）<code>credentials</code></p><p><code>credentials</code>属性是一个只读字符串，表示跨域请求时是否携带其他域的 cookie。可能的值有 omit（不携带）、 include（携带）、same-origin（只携带同源 cookie）。</p><p>（5）<code>destination</code></p><p><code>destination</code>属性是一个字符串，表示请求内容的类型，可能的值有 ‘’、‘audio’、‘audioworklet’、‘document’、‘embed’、‘font’、‘frame’、‘iframe’、‘image’、‘manifest’、‘object’、‘paintworklet’、 ‘report’、‘script’、‘sharedworker’、‘style’、‘track’、‘video’、‘worker’、‘xslt’ 等。</p><p>（6）<code>headers</code></p><p><code>headers</code>属性是一个只读的 Headers 实例对象，表示请求的数据头。</p><p>（7）<code>integrity</code></p><p><code>integrity</code>属性表示所请求资源的完整度的验证值。</p><p>（8）<code>method</code></p><p><code>method</code>属性是一个只读字符串，表示请求的方法（GET、POST 等）。</p><p>（9）<code>mode</code></p><p><code>mode</code>属性是一个只读字符串，用来验证是否可以有效地发出跨域请求，可能的值有 same-origin、no-cors、cors。</p><p>（10）<code>redirect</code></p><p><code>redirect</code>属性是一个只读字符串，表示重定向时的处理模式，可能的值有 follow、error、manual。</p><p>（11）<code>referrer</code></p><p><code>referrer</code>属性是一个只读字符串，表示请求的引荐 URL。</p><p>（12）<code>referrerPolicy</code></p><p><code>referrerPolicy</code>属性是一个只读字符串，决定了<code>referrer</code>属性是否要包含在请求里面的处理政策。</p><p>（13）<code>signal</code></p><p><code>signal</code>是一个只读属性，包含与当前请求相对应的中断信号 AbortSignal 对象。</p><p>（14）<code>url</code></p><p><code>url</code>是一个只读字符串，包含了当前请求的字符串。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myRequest = <span class="keyword">new</span> Request(<span class="string">&#x27;flowers.jpg&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> myURL = myRequest.url;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实例方法">实例方法 <a href="about:blank#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95">#</a></h2><h3 id="取出数据体的方法">取出数据体的方法 <a href="about:blank#%E5%8F%96%E5%87%BA%E6%95%B0%E6%8D%AE%E4%BD%93%E7%9A%84%E6%96%B9%E6%B3%95">#</a></h3><ul><li>arrayBuffer()：返回一个 Promise 对象，将 Request 的数据体作为 ArrayBuffer 对象返回。</li><li>blob()：返回一个 Promise 对象，将 Request 的数据体作为 Blob 对象返回。</li><li>json()：返回一个 Promise 对象，将 Request 的数据体作为 JSON 对象返回。</li><li>text()：返回一个 Promise 对象，将 Request 的数据体作为字符串返回。</li><li>formData()：返回一个 Promise 对象，将 Request 的数据体作为表单数据 FormData 对象返回。</li></ul><p>下面是<code>json()</code>方法的一个示例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">hello</span>: <span class="string">&quot;world&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">Request</span>(<span class="string">&quot;/myEndpoint&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">request.<span class="title function_">json</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理 JSON 数据</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>.formData()</code>方法返回一个 Promise 对象，最终得到的是一个 FormData 表单对象，里面是用键值对表示的各种表单元素。该方法很少使用，因为需要拦截发给服务器的请求的场景不多，一般用在 Service Worker 拦截和处理网络请求，以修改表单数据，然后再发送到服务器。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">&#x27;fetch&#x27;</span>, <span class="keyword">event</span> =&gt; &#123;</span><br><span class="line">  <span class="comment">// 拦截表单提交请求</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">event</span>.request.method === <span class="string">&#x27;POST&#x27;</span> &amp;&amp;</span><br><span class="line">    <span class="keyword">event</span>.request.headers.<span class="keyword">get</span>(<span class="string">&#x27;Content-Type&#x27;</span>) === <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">event</span>.respondWith(handleFormSubmission(<span class="keyword">event</span>.request));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">async</span> function <span class="title">handleFormSubmission</span>(<span class="params">request</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">await</span> request.formData();</span><br><span class="line">  formData.append(<span class="string">&#x27;extra-field&#x27;</span>, <span class="string">&#x27;extra-value&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> newRequest = <span class="keyword">new</span> Request(request.url, &#123;</span><br><span class="line">    method: request.method,</span><br><span class="line">    headers: request.headers,</span><br><span class="line">    body: <span class="keyword">new</span> URLSearchParams(formData)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fetch(newRequest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，Service Worker 拦截表单请求以后，添加了一个表单成员，再调用<code>fetch()</code>向服务器发出修改后的请求。</p><h3 id="clone">clone() <a href="about:blank#clone">#</a></h3><p><code>clone()</code>用来复制 HTTP 请求对象。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">myRequest</span> = <span class="keyword">new</span> <span class="title class_">Request</span>(<span class="string">&#x27;flowers.jpg&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">newRequest</span> = myRequest.<span class="keyword">clone</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本文转自 <a href="https://wangdoc.com/webapi/request">https://wangdoc.com/webapi/request</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">Request API</summary>
    
    
    
    <category term="webApi" scheme="https://www.hacp.top/categories/webApi/"/>
    
    
    <category term="webApi" scheme="https://www.hacp.top/tags/webApi/"/>
    
  </entry>
  
  <entry>
    <title>Page Visibility API</title>
    <link href="https://www.hacp.top/posts/44.html"/>
    <id>https://www.hacp.top/posts/44.html</id>
    <published>2023-07-12T10:19:03.000Z</published>
    <updated>2023-07-12T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Page Visibility API</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><h2 id="简介">简介 <a href="about:blank#%E7%AE%80%E4%BB%8B">#</a></h2><p>有时候，开发者需要知道，用户正在离开页面。常用的方法是监听下面三个事件。</p><blockquote><ul><li><code>pagehide</code></li><li><code>beforeunload</code></li><li><code>unload</code></li></ul></blockquote><p>但是，这些事件在手机上可能不会触发，页面就直接关闭了。因为手机系统可以将一个进程直接转入后台，然后杀死。</p><blockquote><ul><li>用户点击了一条系统通知，切换到另一个 App。</li><li>用户进入任务切换窗口，切换到另一个 App。</li><li>用户点击了 Home 按钮，切换回主屏幕。</li><li>操作系统自动切换到另一个 App（比如，收到一个电话）。</li></ul></blockquote><p>上面这些情况，都会导致手机将浏览器进程切换到后台，然后为了节省资源，可能就会杀死浏览器进程。</p><p>以前，页面被系统切换，以及系统清除浏览器进程，是无法监听到的。开发者想要指定，任何一种页面卸载情况下都会执行的代码，也是无法做到的。为了解决这个问题，就诞生了 Page Visibility API。不管手机或桌面电脑，所有情况下，这个 API 都会监听到页面的可见性发生变化。</p><p>这个新的 API 的意义在于，通过监听网页的可见性，可以预判网页的卸载，还可以用来节省资源，减缓电能的消耗。比如，一旦用户不看网页，下面这些网页行为都是可以暂停的。</p><blockquote><ul><li>对服务器的轮询</li><li>网页动画</li><li>正在播放的音频或视频</li></ul></blockquote><h2 id="document-visibilityState">document.visibilityState <a href="about:blank#documentvisibilitystate">#</a></h2><p>这个 API 主要在<code>document</code>对象上，新增了一个<code>document.visibilityState</code>属性。该属性返回一个字符串，表示页面当前的可见性状态，共有三个可能的值。</p><blockquote><ul><li><code>hidden</code>：页面彻底不可见。</li><li><code>visible</code>：页面至少一部分可见。</li><li><code>prerender</code>：页面即将或正在渲染，处于不可见状态。</li></ul></blockquote><p>其中，<code>hidden</code>状态和<code>visible</code>状态是所有浏览器都必须支持的。<code>prerender</code>状态只在支持“预渲染”的浏览器上才会出现，比如 Chrome 浏览器就有预渲染功能，可以在用户不可见的状态下，预先把页面渲染出来，等到用户要浏览的时候，直接展示渲染好的网页。</p><p>只要页面可见，哪怕只露出一个角，<code>document.visibilityState</code>属性就返回<code>visible</code>。只有以下四种情况，才会返回<code>hidden</code>。</p><blockquote><ul><li>浏览器最小化。</li><li>浏览器没有最小化，但是当前页面切换成了背景页。</li><li>浏览器将要卸载（unload）页面。</li><li>操作系统触发锁屏屏幕。</li></ul></blockquote><p>可以看到，上面四种场景涵盖了页面可能被卸载的所有情况。也就是说，页面卸载之前，<code>document.visibilityState</code>属性一定会变成<code>hidden</code>。事实上，这也是设计这个 API 的主要目的。</p><p>另外，早期版本的 API，这个属性还有第四个值<code>unloaded</code>，表示页面即将卸载，现在已经被废弃了。</p><p>注意，<code>document.visibilityState</code>属性只针对顶层窗口，内嵌的<code>&lt;iframe&gt;</code>页面的<code>document.visibilityState</code>属性由顶层窗口决定。使用 CSS 属性隐藏<code>&lt;iframe&gt;</code>页面（比如<code>display: none;</code>），并不会影响内嵌页面的可见性。</p><h2 id="document-hidden">document.hidden <a href="about:blank#documenthidden">#</a></h2><p>由于历史原因，这个 API 还定义了<code>document.hidden</code>属性。该属性只读，返回一个布尔值，表示当前页面是否可见。</p><p>当<code>document.visibilityState</code>属性返回<code>visible</code>时，<code>document.hidden</code>属性返回<code>false</code>；其他情况下，都返回<code>true</code>。</p><p>该属性只是出于历史原因而保留的，只要有可能，都应该使用<code>document.visibilityState</code>属性，而不是使用这个属性。</p><h2 id="visibilitychange-事件">visibilitychange 事件 <a href="about:blank#visibilitychange-%E4%BA%8B%E4%BB%B6">#</a></h2><p>只要<code>document.visibilityState</code>属性发生变化，就会触发<code>visibilitychange</code>事件。因此，可以通过监听这个事件（通过<code>document.addEventListener()</code>方法或<code>document.onvisibilitychange</code>属性），跟踪页面可见性的变化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 用户离开了当前页面</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">visibilityState</span> === <span class="string">&#x27;hidden&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;页面不可见&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户打开或回到页面</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">visibilityState</span> === <span class="string">&#x27;visible&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;页面可见&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码是 Page Visibility API 的最基本用法，可以监听可见性变化。</p><p>下面是另一个例子，一旦页面不可见，就暂停视频播放。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vidElem = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;video-demo&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, startStopVideo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">startStopVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">visibilityState</span> === <span class="string">&#x27;hidden&#x27;</span>) &#123;</span><br><span class="line">    vidElem.<span class="title function_">pause</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">visibilityState</span> === <span class="string">&#x27;visible&#x27;</span>) &#123;</span><br><span class="line">    vidElem.<span class="title function_">play</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="页面卸载">页面卸载 <a href="about:blank#%E9%A1%B5%E9%9D%A2%E5%8D%B8%E8%BD%BD">#</a></h2><p>下面专门讨论一下，如何正确监听页面卸载。</p><p>页面卸载可以分成三种情况。</p><blockquote><ul><li>页面可见时，用户关闭 Tab 页或浏览器窗口。</li><li>页面可见时，用户在当前窗口前往另一个页面。</li><li>页面不可见时，用户或系统关闭浏览器窗口。</li></ul></blockquote><p>这三种情况，都会触发<code>visibilitychange</code>事件。前两种情况，该事件在用户离开页面时触发；最后一种情况，该事件在页面从可见状态变为不可见状态时触发。</p><p>由此可见，<code>visibilitychange</code>事件比<code>pagehide</code>、<code>beforeunload</code>、<code>unload</code>事件更可靠，所有情况下都会触发（从<code>visible</code>变为<code>hidden</code>）。因此，可以只监听这个事件，运行页面卸载时需要运行的代码，不用监听后面那三个事件。</p><p>甚至可以这样说，<code>unload</code>事件在任何情况下都不必监听，<code>beforeunload</code>事件只有一种适用场景，就是用户修改了表单，没有提交就离开当前页面。另一方面，指定了这两个事件的监听函数，浏览器就不会缓存当前页面。</p><h2 id="参考链接">参考链接 <a href="about:blank#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">#</a></h2><ul><li><a href="https://w3c.github.io/page-visibility/">Page Visibility Level 2</a>, W3C</li><li><a href="http://davidwalsh.name/page-visibility">Page Visibility API</a>, David Walsh</li><li><a href="http://www.html5rocks.com/en/tutorials/pagevisibility/intro/">Using the pageVisbility API</a>, Joe Marini</li><li><a href="http://blogs.msdn.com/b/ie/archive/2011/07/08/using-pc-hardware-more-efficiently-in-html5-new-web-performance-apis-part-2.aspx">Using PC Hardware more efficiently in HTML5: New Web Performance APIs, Part 2</a>, Jatinder Mann</li><li><a href="https://www.igvita.com/2015/11/20/dont-lose-user-and-app-state-use-page-visibility/">Don’t lose user and app state, use Page Visibility</a>, Ilya Grigorik</li></ul><p>本文转自 <a href="https://wangdoc.com/webapi/page-visibility">https://wangdoc.com/webapi/page-visibility</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">Page Visibility API</summary>
    
    
    
    <category term="webApi" scheme="https://www.hacp.top/categories/webApi/"/>
    
    
    <category term="webApi" scheme="https://www.hacp.top/tags/webApi/"/>
    
  </entry>
  
  <entry>
    <title>Page Lifecycle API</title>
    <link href="https://www.hacp.top/posts/43.html"/>
    <id>https://www.hacp.top/posts/43.html</id>
    <published>2023-07-11T10:19:03.000Z</published>
    <updated>2023-07-11T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Page Lifecycle API</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><p>Android、iOS 和最新的 Windows 系统可以随时自主地停止后台进程，及时释放系统资源。也就是说，网页可能随时被系统丢弃掉。以前的浏览器 API 完全没有考虑到这种情况，导致开发者根本没有办法监听到系统丢弃页面。</p><p>为了解决这个问题，W3C 新制定了一个 Page Lifecycle API，统一了网页从诞生到卸载的行为模式，并且定义了新的事件，允许开发者响应网页状态的各种转换。</p><p>有了这个 API，开发者就可以预测网页下一步的状态，从而进行各种针对性的处理。Chrome 68 支持这个 API，对于老式浏览器可以使用谷歌开发的兼容库 <a href="https://github.com/GoogleChromeLabs/page-lifecycle">PageLifecycle.js</a>。</p><h2 id="生命周期阶段">生命周期阶段 <a href="about:blank#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%98%B6%E6%AE%B5">#</a></h2><p>网页的生命周期分成六个阶段，每个时刻只可能处于其中一个阶段。</p><p><img src="https://www.wangbase.com/blogimg/asset/201811/bg2018110401.png" alt=""></p><p><strong>（1）Active 阶段</strong></p><p>在 Active 阶段，网页处于可见状态，且拥有输入焦点。</p><p><strong>（2）Passive 阶段</strong></p><p>在 Passive 阶段，网页可见，但没有输入焦点，无法接受输入。UI 更新（比如动画）仍然在执行。该阶段只可能发生在桌面同时有多个窗口的情况。</p><p><strong>（3）Hidden 阶段</strong></p><p>在 Hidden 阶段，用户的桌面被其他窗口占据，网页不可见，但尚未冻结。UI 更新不再执行。</p><p><strong>（4）Terminated 阶段</strong></p><p>在 Terminated 阶段，由于用户主动关闭窗口，或者在同一个窗口前往其他页面，导致当前页面开始被浏览器卸载并从内存中清除。注意，这个阶段总是在 Hidden 阶段之后发生，也就是说，用户主动离开当前页面，总是先进入 Hidden 阶段，再进入 Terminated 阶段。</p><p>这个阶段会导致网页卸载，任何新任务都不会在这个阶段启动，并且如果运行时间太长，正在进行的任务可能会被终止。</p><p><strong>（5）Frozen 阶段</strong></p><p>如果网页处于 Hidden 阶段的时间过久，用户又不关闭网页，浏览器就有可能冻结网页，使其进入 Frozen 阶段。不过，也有可能，处于可见状态的页面长时间没有操作，也会进入 Frozen 阶段。</p><p>这个阶段的特征是，网页不会再被分配 CPU 计算资源。定时器、回调函数、网络请求、DOM 操作都不会执行，不过正在运行的任务会执行完。浏览器可能会允许 Frozen 阶段的页面，周期性复苏一小段时间，短暂变回 Hidden 状态，允许一小部分任务执行。</p><p><strong>（6）Discarded 阶段</strong></p><p>如果网页长时间处于 Frozen 阶段，用户又不唤醒页面，那么就会进入 Discarded 阶段，即浏览器自动卸载网页，清除该网页的内存占用。不过，Passive 阶段的网页如果长时间没有互动，也可能直接进入 Discarded 阶段。</p><p>这一般是在用户没有介入的情况下，由系统强制执行。任何类型的新任务或 JavaScript 代码，都不能在此阶段执行，因为这时通常处在资源限制的状况下。</p><p>网页被浏览器自动 Discarded 以后，它的 Tab 窗口还是在的。如果用户重新访问这个 Tab 页，浏览器将会重新向服务器发出请求，再一次重新加载网页，回到 Active 阶段。</p><h2 id="常见场景">常见场景 <a href="about:blank#%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF">#</a></h2><p>以下是几个常见场景的网页生命周期变化。</p><p>（1）用户打开网页后，又切换到其他 App，但只过了一会又回到网页。</p><p>网页由 Active 变成 Hidden，又变回 Active。</p><p>（2）用户打开网页后，又切换到其他 App，并且长时候使用后者，导致系统自动丢弃网页。</p><p>网页由 Active 变成 Hidden，再变成 Frozen，最后 Discarded。</p><p>（3）用户打开网页后，又切换到其他 App，然后从任务管理器里面将浏览器进程清除。</p><p>网页由 Active 变成 Hidden，然后 Terminated。</p><p>（4）系统丢弃了某个 Tab 里面的页面后，用户重新打开这个 Tab。</p><p>网页由 Discarded 变成 Active。</p><h2 id="事件">事件 <a href="about:blank#%E4%BA%8B%E4%BB%B6">#</a></h2><p>生命周期的各个阶段都有自己的事件，以供开发者指定监听函数。这些事件里面，只有两个是新定义的（<code>freeze</code>事件和<code>resume</code>事件），其它都是现有的。</p><p>注意，网页的生命周期事件是在所有帧（frame）触发，不管是底层的帧，还是内嵌的帧。也就是说，内嵌的<code>&lt;iframe&gt;</code>网页跟顶层网页一样，都会同时监听到下面的事件。</p><h3 id="focus-事件">focus 事件 <a href="about:blank#focus-%E4%BA%8B%E4%BB%B6">#</a></h3><p><code>focus</code>事件在页面获得输入焦点时触发，比如网页从 Passive 阶段变为 Active 阶段。</p><h3 id="blur-事件">blur 事件 <a href="about:blank#blur-%E4%BA%8B%E4%BB%B6">#</a></h3><p><code>blur</code>事件在页面失去输入焦点时触发，比如网页从 Active 阶段变为 Passive 阶段。</p><h3 id="visibilitychange-事件">visibilitychange 事件 <a href="about:blank#visibilitychange-%E4%BA%8B%E4%BB%B6">#</a></h3><p><code>visibilitychange</code>事件在网页可见状态发生变化时触发，一般发生在以下几种场景。</p><blockquote><ul><li>用户隐藏页面（切换 Tab、最小化浏览器），页面由 Active 阶段变成 Hidden 阶段。</li><li>用户重新访问隐藏的页面，页面由 Hidden 阶段变成 Active 阶段。</li><li>用户关闭页面，页面会先进入 Hidden 阶段，然后进入 Terminated 阶段。</li></ul></blockquote><p>可以通过<code>document.onvisibilitychange</code>属性指定这个事件的回调函数。</p><h3 id="freeze-事件">freeze 事件 <a href="about:blank#freeze-%E4%BA%8B%E4%BB%B6">#</a></h3><p><code>freeze</code>事件在网页进入 Frozen 阶段时触发。</p><p>可以通过<code>document.onfreeze</code>属性指定在进入 Frozen 阶段时调用的回调函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleFreeze</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Handle transition to FROZEN</span></span><br><span class="line">&#125;</span><br><span class="line">document.<span class="title function_ invoke__">addEventListener</span>(<span class="string">&#x27;freeze&#x27;</span>, handleFreeze);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">document.onfreeze = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; … &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个事件的监听函数，最长只能运行500毫秒。并且只能复用已经打开的网络连接，不能发起新的网络请求。</p><p>注意，从 Frozen 阶段进入 Discarded 阶段，不会触发任何事件，无法指定回调函数，只能在进入 Frozen 阶段时指定回调函数。</p><h3 id="resume-事件">resume 事件 <a href="about:blank#resume-%E4%BA%8B%E4%BB%B6">#</a></h3><p><code>resume</code>事件在网页离开 Frozen 阶段，变为 Active / Passive / Hidden 阶段时触发。</p><p><code>document.onresume</code>属性指的是页面离开 Frozen 阶段、进入可用状态时调用的回调函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleResume</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// handle state transition FROZEN -&gt; ACTIVE</span></span><br><span class="line">&#125;</span><br><span class="line">document.<span class="title function_ invoke__">addEventListener</span>(<span class="string">&quot;resume&quot;</span>, handleResume);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">document.onresume = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; … &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="pageshow-事件">pageshow 事件 <a href="about:blank#pageshow-%E4%BA%8B%E4%BB%B6">#</a></h3><p><code>pageshow</code>事件在用户加载网页时触发。这时，有可能是全新的页面加载，也可能是从缓存中获取的页面。如果是从缓存中获取，则该事件对象的<code>event.persisted</code>属性为<code>true</code>，否则为<code>false</code>。</p><p>这个事件的名字有点误导，它跟页面的可见性其实毫无关系，只跟浏览器的 History 记录的变化有关。</p><h3 id="pagehide-事件">pagehide 事件 <a href="about:blank#pagehide-%E4%BA%8B%E4%BB%B6">#</a></h3><p><code>pagehide</code>事件在用户离开当前网页、进入另一个网页时触发。它的前提是浏览器的 History 记录必须发生变化，跟网页是否可见无关。</p><p>如果浏览器能够将当前页面添加到缓存以供稍后重用，则事件对象的<code>event.persisted</code>属性为<code>true</code>。 如果为<code>true</code>。如果页面添加到了缓存，则页面进入 Frozen 状态，否则进入 Terminatied 状态。</p><h3 id="beforeunload-事件">beforeunload 事件 <a href="about:blank#beforeunload-%E4%BA%8B%E4%BB%B6">#</a></h3><p><code>beforeunload</code>事件在窗口或文档即将卸载时触发。该事件发生时，文档仍然可见，此时卸载仍可取消。经过这个事件，网页进入 Terminated 状态。</p><h3 id="unload-事件">unload 事件 <a href="about:blank#unload-%E4%BA%8B%E4%BB%B6">#</a></h3><p><code>unload</code>事件在页面正在卸载时触发。经过这个事件，网页进入 Terminated 状态。</p><h2 id="获取当前阶段">获取当前阶段 <a href="about:blank#%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E9%98%B6%E6%AE%B5">#</a></h2><p>如果网页处于 Active、Passive 或 Hidden 阶段，可以通过下面的代码，获得网页当前的状态。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getState = () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.visibilityState === <span class="string">&#x27;hidden&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hidden&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.hasFocus()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;active&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;passive&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果网页处于 Frozen 和 Terminated 状态，由于定时器代码不会执行，只能通过事件监听判断状态。进入 Frozen 阶段，可以监听<code>freeze</code>事件；进入 Terminated 阶段，可以监听<code>pagehide</code>事件。</p><h2 id="document-wasDiscarded">document.wasDiscarded <a href="about:blank#documentwasdiscarded">#</a></h2><p>如果某个选项卡处于 Frozen 阶段，就随时有可能被系统丢弃，进入 Discarded 阶段。如果后来用户再次点击该选项卡，浏览器会重新加载该页面。</p><p>这时，开发者可以通过判断<code>document.wasDiscarded</code>属性，了解先前的网页是否被丢弃了。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (document.wasDiscarded) &#123;</span><br><span class="line">  <span class="comment">// 该网页已经不是原来的状态了，曾经被浏览器丢弃过</span></span><br><span class="line">  <span class="comment">// 恢复以前的状态</span></span><br><span class="line">  <span class="built_in">getPersistedState</span>(self.discardedClientId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时，<code>window</code>对象上会新增<code>window.clientId</code>和<code>window.discardedClientId</code>两个属性，用来恢复丢弃前的状态。</p><h2 id="参考链接">参考链接 <a href="about:blank#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">#</a></h2><ul><li><a href="https://developers.google.com/web/updates/2018/07/page-lifecycle-api">Page Lifecycle API</a>, Philip Walton</li><li><a href="https://github.com/WICG/page-lifecycle">Lifecycle API for Web Pages</a>, W3C</li><li><a href="https://wicg.github.io/page-lifecycle/spec.html">Page Lifecycle 1 Editor’s Draft</a>, W3C</li></ul><p>本文转自 <a href="https://wangdoc.com/webapi/page-lifecycle">https://wangdoc.com/webapi/page-lifecycle</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">Page Lifecycle API</summary>
    
    
    
    <category term="webApi" scheme="https://www.hacp.top/categories/webApi/"/>
    
    
    <category term="webApi" scheme="https://www.hacp.top/tags/webApi/"/>
    
  </entry>
  
  <entry>
    <title>Intl segmenter API</title>
    <link href="https://www.hacp.top/posts/42.html"/>
    <id>https://www.hacp.top/posts/42.html</id>
    <published>2023-07-10T10:19:03.000Z</published>
    <updated>2023-07-10T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Intl segmenter API</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><h2 id="简介">简介 <a href="about:blank#%E7%AE%80%E4%BB%8B">#</a></h2><p>Intl.Segmenter 是浏览器内置的用于文本分词的 API。</p><p>使用时，先用<code>Intl.Segmenter()</code>新建一个分词器对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> segmenter = <span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">Segmenter</span>(</span><br><span class="line">  <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  &#123; <span class="attr">granularity</span>: <span class="string">&#x27;word&#x27;</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Intl.Segmenter()</code>接受两个参数，第一个是所要分词的语言简称（上例是<code>en</code>），第二个参数是一个配置对象，有以下两个属性。</p><ul><li><code>localeMatcher</code>：指定分词算法，有两个可能的值，一个是<code>lookup</code>，表示采用特定的算法（BCP 47），另一个是<code>best fit</code>（默认值），表示采用操作系统或浏览器现有的尽可能适用的算法。</li><li><code>granularity</code>：表示分词的颗粒度，有三个可能的值：grapheme（字符，这是默认值），word（词语），sentence（句子）。</li></ul><p>拿到分词器对象以后，就可以进行分词了。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const segmenter = <span class="keyword">new</span> <span class="built_in">Intl</span>.Segmenter(</span><br><span class="line">  <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  &#123; granularity: <span class="string">&#x27;word&#x27;</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">const segments = segmenter.segment(<span class="string">&#x27;This has four words!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.<span class="keyword">from</span>(segments).map(<span class="function"><span class="params">(segment)</span> =&gt;</span> segment.segment);</span><br><span class="line"><span class="regexp">//</span> [<span class="string">&#x27;This&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;has&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;words&#x27;</span>, <span class="string">&#x27;!&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，变量<code>segmenter</code>是分词器对象，可以对英语进行分词，颗粒度是词语。所以，“This has four words!”被分成了8个部分，包括4个词语、3个空格和1个标点符号。</p><p>分词器对象的<code>segment()</code>方法是实际的分词方法，它的参数是需要分词的文本，返回值是一个具有迭代器接口的分词结果对象。<code>Array.from()</code>将这个分词结果对象转成数组，也可以采用<code>[...segments]</code>的写法。</p><p>下面的例子是过滤掉非词语字符。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const segments = segmenter.segment(<span class="string">&#x27;This has four words!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.<span class="keyword">from</span>(segments)</span><br><span class="line">  .filter(<span class="function"><span class="params">(segment)</span> =&gt;</span> segment.isWordLike)</span><br><span class="line">  .map(<span class="function"><span class="params">(segment)</span> =&gt;</span> segment.segment);</span><br><span class="line"><span class="regexp">//</span> [<span class="string">&#x27;This&#x27;</span>, <span class="string">&#x27;has&#x27;</span>, <span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27;words&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Array.from()</code>将分词结果对象转成一个数组，变量<code>segment</code>是数组的每个成员，它也是一个对象。该对象的<code>isWordLike</code>属性是一个布尔值，表示当前值是否为一个真正的词，而该对象的<code>segment</code>属性（上例的<code>segment.segment</code>）则是真正的分词结果。</p><p>Intl Segmenter 支持各种语言，下面是日语分词的例子。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const segmenter = <span class="keyword">new</span> <span class="built_in">Intl</span>.Segmenter(<span class="string">&#x27;ja&#x27;</span>, &#123; granularity: <span class="string">&#x27;word&#x27;</span> &#125;);</span><br><span class="line">const segments = segmenter.segment(<span class="string">&#x27;これは日本語のテキストです&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.<span class="keyword">from</span>(segments).map(<span class="function"><span class="params">(segment)</span> =&gt;</span> segment.segment);</span><br><span class="line"><span class="regexp">//</span> [<span class="string">&#x27;これ&#x27;</span>, <span class="string">&#x27;は&#x27;</span>, <span class="string">&#x27;日本語&#x27;</span>, <span class="string">&#x27;の&#x27;</span>, <span class="string">&#x27;テキスト&#x27;</span>, <span class="string">&#x27;です&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是法语的例子。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> segmenterFr = <span class="keyword">new</span> Intl.Segmenter(<span class="string">&#x27;fr&#x27;</span>, &#123; granularity: <span class="string">&#x27;word&#x27;</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> string1 = <span class="string">&#x27;Que ma joie demeure&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterator1 = segmenterFr.segment(string1)[Symbol.iterator]();</span><br><span class="line"></span><br><span class="line">iterator1.<span class="keyword">next</span>().value.segment <span class="comment">// &#x27;Que&#x27;</span></span><br><span class="line">iterator1.<span class="keyword">next</span>().value.segment <span class="comment">// &#x27; &#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="静态方法">静态方法 <a href="about:blank#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95">#</a></h2><h3 id="Intl-Segmenter-supportedLocalesOf">Intl.Segmenter.supportedLocalesOf() <a href="about:blank#intlsegmentersupportedlocalesof">#</a></h3><p><code>Intl.Segmenter.supportedLocalesOf()</code>返回一个数组，用来检测当前环境是否支持指定语言的分词。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> locales1 = [<span class="string">&#x27;ban&#x27;</span>, <span class="string">&#x27;id-u-co-pinyin&#x27;</span>, <span class="string">&#x27;de-ID&#x27;</span>]<span class="comment">;</span></span><br><span class="line"><span class="keyword">const</span> options1 = &#123; localeMatcher: <span class="string">&#x27;lookup&#x27;</span>, granularity: <span class="string">&#x27;string&#x27;</span> &#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">Intl.Segmenter.supportedLocalesOf(locales1, options1)</span><br><span class="line">// [<span class="string">&quot;id-u-co-pinyin&quot;</span>, <span class="string">&quot;de-ID&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它接受两个参数，第一个参数是一个数组，数组成员是需要检测的语言简称；第二个参数是配置对象，跟构造方法的第二个参数是一致的，可以省略。</p><p>上面示例中，需要检测的三种语言分别是巴厘岛语（ban）、印度尼西亚语（id-u-co-pinyin）、德语（de-ID）。结果显示只支持前两者，不支持巴厘岛语。</p><h2 id="实例方法">实例方法 <a href="about:blank#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95">#</a></h2><h3 id="resolvedOptions">resolvedOptions() <a href="about:blank#resolvedoptions">#</a></h3><p>实例对象的<code>resolvedOptions()</code>方法，用于获取构造该实例时的参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> segmenter1 = <span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">Segmenter</span>(<span class="string">&#x27;fr-FR&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> options1 = segmenter1.<span class="title function_">resolvedOptions</span>();</span><br><span class="line"></span><br><span class="line">options1.<span class="property">locale</span> <span class="comment">// &quot;fr-FR&quot;</span></span><br><span class="line">options1.<span class="property">granularity</span> <span class="comment">// &quot;grapheme&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>resolveOptions()</code>方法返回了一个对象，该对象的<code>locale</code>属性对应构造方法的第一个参数，<code>granularity</code>属性对应构造方法第二个参数对象的颗粒度属性。</p><h3 id="segment">segment() <a href="about:blank#segment">#</a></h3><p>实例对象的<code>segment()</code>方法进行实际的分词。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> segmenterFr = new Intl.Segmenter(<span class="string">&#x27;fr&#x27;</span>, &#123; granularity: <span class="string">&#x27;word&#x27;</span> &#125;)<span class="comment">;</span></span><br><span class="line"><span class="keyword">const</span> string1 = <span class="string">&#x27;Que ma joie demeure&#x27;</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> segments = segmenterFr.segment(string1)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">segments.containing(<span class="number">5</span>)</span><br><span class="line">// &#123;segment: <span class="string">&#x27;ma&#x27;</span>, index: <span class="number">4</span>, input: <span class="string">&#x27;Que ma joie demeure&#x27;</span>, isWordLike: <span class="literal">true</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>segment()</code>方法的返回结果是一个具有迭代器接口的分词结果对象，有三种方法进行处理。</p><p>（1）使用<code>Array.from()</code>或扩展运算符（<code>...</code>）将分词结果对象转成数组。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const segmenterFr = <span class="keyword">new</span> Intl.Segmenter(<span class="string">&#x27;fr&#x27;</span>, &#123; <span class="attr">granularity</span>: <span class="string">&#x27;word&#x27;</span> &#125;);</span><br><span class="line">const string1 = <span class="string">&#x27;Que ma joie demeure&#x27;</span>;</span><br><span class="line"></span><br><span class="line">const iterator1 = segmenterFr.segment(string1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from(iterator1).<span class="built_in">map</span>(<span class="function"><span class="params">segment</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (segment.segment.<span class="built_in">length</span> &gt; <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(segment.segment);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// demeure</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>segmenterFr.segment()</code>返回一个针对<code>string1</code>的分词结果对象，该对象具有迭代器接口。<code>Array.from()</code>将其转为数组，数组的每个成员是一个分词颗粒对象，该对象的<code>segment</code>属性就是分词结果。分词颗粒对象的介绍，详见后文。</p><p>（2）使用<code>for...of</code>循环，遍历分词结果对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> segmenterFr = <span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">Segmenter</span>(<span class="string">&#x27;fr&#x27;</span>, &#123; <span class="attr">granularity</span>: <span class="string">&#x27;word&#x27;</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> string1 = <span class="string">&#x27;Que ma joie demeure&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterator1 = segmenterFr.<span class="title function_">segment</span>(string1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> segment <span class="keyword">of</span> iterator1) &#123;</span><br><span class="line">  <span class="keyword">if</span> (segment.<span class="property">segment</span>.<span class="property">length</span> &gt; <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(segment.<span class="property">segment</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// demeure</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>for...of</code>默认调用分词结果对象的迭代器接口，获取每一轮的分词颗粒对象。</p><p>由于迭代器接口是在<code>Symbol.iterator</code>属性上面，所以实际执行的代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> segmenterFr = <span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">Segmenter</span>(<span class="string">&#x27;fr&#x27;</span>, &#123; <span class="attr">granularity</span>: <span class="string">&#x27;word&#x27;</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> string1 = <span class="string">&#x27;Que ma joie demeure&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterator1 = segmenterFr.<span class="title function_">segment</span>(string1)[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> segment <span class="keyword">of</span> iterator1) &#123;</span><br><span class="line">  <span class="keyword">if</span> (segment.<span class="property">segment</span>.<span class="property">length</span> &gt; <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(segment.<span class="property">segment</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;demeure&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>for...of</code>循环每一轮得到的是一个分词颗粒对象，该对象的<code>segment</code>属性就是当前的分词结果，详见下文。</p><p>（3）使用<code>containing()</code>方法获取某个位置的分词颗粒对象。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> segmenterFr = new Intl.Segmenter(<span class="string">&#x27;fr&#x27;</span>, &#123; granularity: <span class="string">&#x27;word&#x27;</span> &#125;)<span class="comment">;</span></span><br><span class="line"><span class="keyword">const</span> string1 = <span class="string">&#x27;Que ma joie demeure&#x27;</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> segments = segmenterFr.segment(string1)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">segments.containing(<span class="number">5</span>)</span><br><span class="line">// &#123;segment: <span class="string">&#x27;ma&#x27;</span>, index: <span class="number">4</span>, input: <span class="string">&#x27;Que ma joie demeure&#x27;</span>, isWordLike: <span class="literal">true</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>containing()</code>方法的参数是一个整数，表示原始字符串的指定位置（从0开始计算）。如果省略该参数，则默认为0。</p><p><code>containing()</code>的返回值是该位置的分词颗粒对象，如果参数位置超出原始字符串，则返回<code>undefined</code>。分词颗粒对象有以下属性。</p><ul><li>segment：指定位置对应的分词结果。</li><li>index：本次分词在原始字符串的开始位置（从0开始）。</li><li>input：进行分词的原始字符串。</li><li>isWordLike：如果分词颗粒度为<code>word</code>，该属性返回一个布尔值，表示当前值是否一个真正的词。如果分词颗粒度不为<code>word</code>，则返回<code>undefined</code>。</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const input <span class="operator">=</span> <span class="string">&quot;Allons-y!&quot;</span>;</span><br><span class="line"></span><br><span class="line">const segmenter <span class="operator">=</span> new Intl.Segmenter(<span class="string">&quot;fr&quot;</span>, &#123; <span class="params">granularity:</span> <span class="string">&quot;word&quot;</span> &#125;);</span><br><span class="line">const segments <span class="operator">=</span> segmenter.segment(input);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> current <span class="operator">=</span> segments.containing();</span><br><span class="line"><span class="operator">//</span> &#123; <span class="params">index:</span> <span class="number">0</span>, <span class="params">segment:</span> <span class="string">&quot;Allons&quot;</span>, <span class="params">isWordLike:</span> <span class="literal">true</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">current</span> <span class="operator">=</span> segments.containing(<span class="number">4</span>);</span><br><span class="line"><span class="operator">//</span> &#123; <span class="params">index:</span> <span class="number">0</span>, <span class="params">segment:</span> <span class="string">&quot;Allons&quot;</span>, <span class="params">isWordLike:</span> <span class="literal">true</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">current</span> <span class="operator">=</span> segments.containing(<span class="number">6</span>);</span><br><span class="line"><span class="operator">//</span> &#123; <span class="params">index:</span> <span class="number">6</span>, <span class="params">segment:</span> <span class="string">&quot;-&quot;</span>, <span class="params">isWordLike:</span> <span class="literal">false</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">current</span> <span class="operator">=</span> segments.containing(current.index <span class="operator">+</span> current.segment.length);</span><br><span class="line"><span class="operator">//</span> &#123; <span class="params">index:</span> <span class="number">7</span>, <span class="params">segment:</span> <span class="string">&quot;y&quot;</span>, <span class="params">isWordLike:</span> <span class="literal">true</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">current</span> <span class="operator">=</span> segments.containing(current.index <span class="operator">+</span> current.segment.length);</span><br><span class="line"><span class="operator">//</span> &#123; <span class="params">index:</span> <span class="number">8</span>, <span class="params">segment:</span> <span class="string">&quot;!&quot;</span>, <span class="params">isWordLike:</span> <span class="literal">false</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">current</span> <span class="operator">=</span> segments.containing(current.index <span class="operator">+</span> current.segment.length);</span><br><span class="line"><span class="operator">//</span> undefined</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，分词结果中除了空格和标点符号，其他情况下，<code>isWordLike</code>都返回<code>false</code>。</p><p>本文转自 <a href="https://wangdoc.com/webapi/intl-segmenter">https://wangdoc.com/webapi/intl-segmenter</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">Intl segmenter API</summary>
    
    
    
    <category term="webApi" scheme="https://www.hacp.top/categories/webApi/"/>
    
    
    <category term="webApi" scheme="https://www.hacp.top/tags/webApi/"/>
    
  </entry>
  
  <entry>
    <title>Intl.RelativeTimeFormat</title>
    <link href="https://www.hacp.top/posts/41.html"/>
    <id>https://www.hacp.top/posts/41.html</id>
    <published>2023-07-09T10:19:03.000Z</published>
    <updated>2023-07-09T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Intl.RelativeTimeFormat</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><p>很多日期库支持显示相对时间，比如“昨天”、“五分钟前”、“两个月之前”等等。由于不同的语言，日期显示的格式和相关词语都不同，造成这些库的体积非常大。</p><p>现在，浏览器提供内置的 Intl.RelativeTimeFormat API，可以不使用这些库，直接显示相对时间。</p><h2 id="基本用法">基本用法 <a href="about:blank#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">#</a></h2><p><code>Intl.RelativeTimeFormat()</code>是一个构造函数，接受一个语言代码作为参数，返回一个相对时间的实例对象。如果省略参数，则默认传入当前运行时的语言代码。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const rtf = <span class="built_in">new</span> Intl.RelativeTimeFormat(<span class="string">&#x27;en&#x27;</span>);</span><br><span class="line"></span><br><span class="line">rtf.format(<span class="number">3.14</span>, <span class="string">&#x27;second&#x27;</span>) // &quot;in 3.14 seconds&quot;</span><br><span class="line">rtf.format(<span class="number">-15</span>, <span class="string">&#x27;minute&#x27;</span>) // &quot;15 minutes ago&quot;</span><br><span class="line">rtf.format(<span class="number">8</span>, <span class="string">&#x27;hour&#x27;</span>) // &quot;in 8 hours&quot;</span><br><span class="line">rtf.format(<span class="number">-2</span>, <span class="string">&#x27;day&#x27;</span>) // &quot;2 days ago&quot;</span><br><span class="line">rtf.format(<span class="number">3</span>, <span class="string">&#x27;week&#x27;</span>) // &quot;in 3 weeks&quot;</span><br><span class="line">rtf.format(<span class="number">-5</span>, <span class="string">&#x27;month&#x27;</span>) // &quot;5 months ago&quot;</span><br><span class="line">rtf.format(<span class="number">2</span>, <span class="string">&#x27;quarter&#x27;</span>) // &quot;in 2 quarters&quot;</span><br><span class="line">rtf.format(<span class="number">-42</span>, <span class="string">&#x27;year&#x27;</span>) // &quot;42 years ago&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码指定使用英语显示相对时间。</p><p>下面是使用西班牙语显示相对时间的例子。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const rtf = <span class="built_in">new</span> Intl.RelativeTimeFormat(<span class="string">&#x27;es&#x27;</span>);</span><br><span class="line"></span><br><span class="line">rtf.format(<span class="number">3.14</span>, <span class="string">&#x27;second&#x27;</span>) // &quot;dentro de 3,14 segundos&quot;</span><br><span class="line">rtf.format(<span class="number">-15</span>, <span class="string">&#x27;minute&#x27;</span>) // &quot;hace 15 minutos&quot;</span><br><span class="line">rtf.format(<span class="number">8</span>, <span class="string">&#x27;hour&#x27;</span>) // &quot;dentro de 8 horas&quot;</span><br><span class="line">rtf.format(<span class="number">-2</span>, <span class="string">&#x27;day&#x27;</span>) // &quot;hace 2 días&quot;</span><br><span class="line">rtf.format(<span class="number">3</span>, <span class="string">&#x27;week&#x27;</span>) // &quot;dentro de 3 semanas&quot;</span><br><span class="line">rtf.format(<span class="number">-5</span>, <span class="string">&#x27;month&#x27;</span>) // &quot;hace 5 meses&quot;</span><br><span class="line">rtf.format(<span class="number">2</span>, <span class="string">&#x27;quarter&#x27;</span>) // &quot;dentro de 2 trimestres&quot;</span><br><span class="line">rtf.format(<span class="number">-42</span>, <span class="string">&#x27;year&#x27;</span>) // &quot;hace 42 años&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Intl.RelativeTimeFormat()</code>还可以接受一个配置对象，作为第二个参数，用来精确指定相对时间实例的行为。配置对象共有下面这些属性。</p><ul><li>options.style：表示返回字符串的风格，可能的值有<code>long</code>（默认值，比如“in 1 month”）、<code>short</code>（比如“in 1 mo.”）、<code>narrow</code>（比如“in 1 mo.”）。对于一部分语言来说，<code>narrow</code>风格和<code>short</code>风格是类似的。</li><li>options.localeMatcher：表示匹配语言参数的算法，可能的值有<code>best fit</code>（默认值）和<code>lookup</code>。</li><li>options.numeric：表示返回字符串是数字显示，还是文字显示，可能的值有<code>always</code>（默认值，总是文字显示）和<code>auto</code>（自动转换）。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 下面的配置对象，传入的都是默认值</span><br><span class="line">const rtf = new Intl.RelativeTimeFormat(<span class="string">&#x27;en&#x27;</span>, &#123;</span><br><span class="line">  localeMatcher: <span class="string">&#x27;best fit&#x27;</span>, <span class="regexp">//</span> 其他值：<span class="string">&#x27;lookup&#x27;</span></span><br><span class="line">  style: <span class="string">&#x27;long&#x27;</span>, <span class="regexp">//</span> 其他值：<span class="string">&#x27;short&#x27;</span> or <span class="string">&#x27;narrow&#x27;</span></span><br><span class="line">  numeric: <span class="string">&#x27;always&#x27;</span>, <span class="regexp">//</span> 其他值：<span class="string">&#x27;auto&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> Now, let’s try some special cases!</span><br><span class="line"></span><br><span class="line">rtf.format(-<span class="number">1</span>, <span class="string">&#x27;day&#x27;</span>) <span class="regexp">//</span> <span class="string">&quot;1 day ago&quot;</span></span><br><span class="line">rtf.format(<span class="number">0</span>, <span class="string">&#x27;day&#x27;</span>) <span class="regexp">//</span> <span class="string">&quot;in 0 days&quot;</span></span><br><span class="line">rtf.format(<span class="number">1</span>, <span class="string">&#x27;day&#x27;</span>) <span class="regexp">//</span> <span class="string">&quot;in 1 day&quot;</span></span><br><span class="line">rtf.format(-<span class="number">1</span>, <span class="string">&#x27;week&#x27;</span>) <span class="regexp">//</span> <span class="string">&quot;1 week ago&quot;</span></span><br><span class="line">rtf.format(<span class="number">0</span>, <span class="string">&#x27;week&#x27;</span>) <span class="regexp">//</span> <span class="string">&quot;in 0 weeks&quot;</span></span><br><span class="line">rtf.format(<span class="number">1</span>, <span class="string">&#x27;week&#x27;</span>) <span class="regexp">//</span> <span class="string">&quot;in 1 week&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，显示的是“1 day ago”，而不是“yesterday”；显示的是“in 0 weeks”，而不是“this week”。这是因为默认情况下，相对时间显示的是数值形式，而不是文字形式。</p><p>改变这个行为，可以把配置对象的<code>numeric</code>属性改成<code>auto</code>。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const rtf = <span class="built_in">new</span> Intl.RelativeTimeFormat(<span class="string">&#x27;en&#x27;</span>, &#123; <span class="type">numeric</span>: <span class="string">&#x27;auto&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">rtf.format(<span class="number">-1</span>, <span class="string">&#x27;day&#x27;</span>) // &quot;yesterday&quot;</span><br><span class="line">rtf.format(<span class="number">0</span>, <span class="string">&#x27;day&#x27;</span>) // &quot;today&quot;</span><br><span class="line">rtf.format(<span class="number">1</span>, <span class="string">&#x27;day&#x27;</span>) // &quot;tomorrow&quot;</span><br><span class="line">rtf.format(<span class="number">-1</span>, <span class="string">&#x27;week&#x27;</span>) // &quot;last week&quot;</span><br><span class="line">rtf.format(<span class="number">0</span>, <span class="string">&#x27;week&#x27;</span>) // &quot;this week&quot;</span><br><span class="line">rtf.format(<span class="number">1</span>, <span class="string">&#x27;week&#x27;</span>) // &quot;next week&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Intl-RelativeTimeFormat-prototype-format">Intl.RelativeTimeFormat.prototype.format() <a href="about:blank#intlrelativetimeformatprototypeformat">#</a></h2><p>相对时间实例对象的<code>format</code>方法，接受两个参数，依次为时间间隔的数值和单位。其中，“单位”是一个字符串，可以接受以下八个值。</p><ul><li>year</li><li>quarter</li><li>month</li><li>week</li><li>day</li><li>hour</li><li>minute</li><li>second</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rtf = <span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">RelativeTimeFormat</span>(<span class="string">&#x27;en&#x27;</span>);</span><br><span class="line">rtf.<span class="title function_">format</span>(-<span class="number">1</span>, <span class="string">&quot;day&quot;</span>) <span class="comment">// &quot;yesterday&quot;</span></span><br><span class="line">rtf.<span class="title function_">format</span>(<span class="number">2.15</span>, <span class="string">&quot;day&quot;</span>) <span class="comment">// &quot;in 2.15 days</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Intl-RelativeTimeFormat-prototype-formatToParts">Intl.RelativeTimeFormat.prototype.formatToParts() <a href="about:blank#intlrelativetimeformatprototypeformattoparts">#</a></h2><p>相对时间实例对象的<code>formatToParts()</code>方法的参数跟<code>format()</code>方法一样，但是返回的是一个数组，用来精确控制相对时间的每个部分。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const rtf = new Intl.RelativeTimeFormat(<span class="string">&#x27;en&#x27;</span>, &#123; numeric: <span class="string">&#x27;auto&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">rtf.format(-<span class="number">1</span>, <span class="string">&#x27;day&#x27;</span>) </span><br><span class="line"><span class="regexp">//</span> <span class="string">&quot;yesterday&quot;</span></span><br><span class="line">rtf.formatToParts(-<span class="number">1</span>, <span class="string">&#x27;day&#x27;</span>);</span><br><span class="line"><span class="regexp">//</span> [&#123; type: <span class="string">&quot;literal&quot;</span>, value: <span class="string">&quot;yesterday&quot;</span> &#125;]</span><br><span class="line"></span><br><span class="line">rtf.format(<span class="number">3</span>, <span class="string">&#x27;week&#x27;</span>);</span><br><span class="line"><span class="regexp">//</span> <span class="string">&quot;in 3 weeks&quot;</span></span><br><span class="line">rtf.formatToParts(<span class="number">3</span>, <span class="string">&#x27;week&#x27;</span>);</span><br><span class="line"><span class="regexp">//</span> [</span><br><span class="line"><span class="regexp">//</span>   &#123; type: <span class="string">&#x27;literal&#x27;</span>, value: <span class="string">&#x27;in &#x27;</span> &#125;,</span><br><span class="line"><span class="regexp">//</span>   &#123; type: <span class="string">&#x27;integer&#x27;</span>, value: <span class="string">&#x27;3&#x27;</span>, unit: <span class="string">&#x27;week&#x27;</span> &#125;,</span><br><span class="line"><span class="regexp">//</span>   &#123; type: <span class="string">&#x27;literal&#x27;</span>, value: <span class="string">&#x27; weeks&#x27;</span> &#125;</span><br><span class="line"><span class="regexp">//</span> ]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回数组的每个成员都是一个对象，拥有两个属性。</p><ul><li>type：字符串，表示输出值的类型。</li><li>value：字符串，表示输出的内容。</li><li>unit：如果输出内容表示一个数值（即<code>type</code>属性不是<code>literal</code>），那么还会有<code>unit</code>属性，表示数值的单位。</li></ul><h2 id="参考链接">参考链接 <a href="about:blank#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">#</a></h2><ul><li><a href="https://developers.google.com/web/updates/2018/10/intl-relativetimeformat">The Intl.RelativeTimeFormat API</a>, Mathias Bynens</li><li><a href="https://github.com/tc39/proposal-intl-relative-time#api">Intl.RelativeTimeFormat API Specification</a>, TC39</li></ul><p>本文转自 <a href="https://wangdoc.com/webapi/intl-relativetimeformat">https://wangdoc.com/webapi/intl-relativetimeformat</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">Intl.RelativeTimeFormat</summary>
    
    
    
    <category term="webApi" scheme="https://www.hacp.top/categories/webApi/"/>
    
    
    <category term="webApi" scheme="https://www.hacp.top/tags/webApi/"/>
    
  </entry>
  
  <entry>
    <title>IntersectionObserver</title>
    <link href="https://www.hacp.top/posts/40.html"/>
    <id>https://www.hacp.top/posts/40.html</id>
    <published>2023-07-08T10:19:03.000Z</published>
    <updated>2023-07-08T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1>IntersectionObserver</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><p>网页开发时，常常需要了解某个元素是否进入了“视口”（viewport），即用户能不能看到它。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016110201.gif" alt=""></p><p>上图的绿色方块不断滚动，顶部会提示它的可见性。</p><p>传统的实现方法是，监听到<code>scroll</code>事件后，调用目标元素（绿色方块）的<a href="https://developer.mozilla.org/en/docs/Web/API/Element/getBoundingClientRect"><code>getBoundingClientRect()</code></a>方法，得到它对应于视口左上角的坐标，再判断是否在视口之内。这种方法的缺点是，由于<code>scroll</code>事件密集发生，计算量很大，容易造成<a href="http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html">性能问题</a>。</p><p><a href="https://wicg.github.io/IntersectionObserver/">IntersectionObserver API</a>，可以自动“观察”元素是否可见，Chrome 51+ 已经支持。由于可见（visible）的本质是，目标元素与视口产生一个交叉区，所以这个 API 叫做“交叉观察器”（intersection oberserver）。</p><h2 id="简介">简介 <a href="about:blank#%E7%AE%80%E4%BB%8B">#</a></h2><p>IntersectionObserver API 的用法，简单来说就是两行。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> IntersectionObserver(callback, options);</span><br><span class="line">observer.observe(target);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，<code>IntersectionObserver</code>是浏览器原生提供的构造函数，接受两个参数：<code>callback</code>是可见性变化时的回调函数，<code>option</code>是配置对象（该参数可选）。</p><p><code>IntersectionObserver()</code>的返回值是一个观察器实例。实例的<code>observe()</code>方法可以指定观察哪个 DOM 节点。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始观察</span></span><br><span class="line">observer<span class="selector-class">.observe</span>(document.getElementById(&#x27;example&#x27;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止观察</span></span><br><span class="line">observer<span class="selector-class">.unobserve</span>(element);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭观察器</span></span><br><span class="line">observer<span class="selector-class">.disconnect</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，<code>observe()</code>的参数是一个 DOM 节点对象。如果要观察多个节点，就要多次调用这个方法。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">observer.observe(elementA)<span class="comment">;</span></span><br><span class="line">observer.observe(elementB)<span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，IntersectionObserver API 是异步的，不随着目标元素的滚动同步触发。规格写明，<code>IntersectionObserver</code>的实现，应该采用<code>requestIdleCallback()</code>，即只有线程空闲下来，才会执行观察器。这意味着，这个观察器的优先级非常低，只在其他任务执行完，浏览器有了空闲才会执行。</p><h2 id="IntersectionObserver-observe">IntersectionObserver.observe() <a href="about:blank#intersectionobserverobserve">#</a></h2><p>IntersectionObserver 实例的<code>observe()</code>方法用来启动对一个 DOM 元素的观察。该方法接受两个参数：回调函数<code>callback</code>和配置对象<code>options</code>。</p><h3 id="callback-参数">callback 参数 <a href="about:blank#callback-%E5%8F%82%E6%95%B0">#</a></h3><p>目标元素的可见性变化时，就会调用观察器的回调函数<code>callback</code>。</p><p><code>callback</code>会触发两次。一次是目标元素刚刚进入视口（开始可见），另一次是完全离开视口（开始不可见）。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> IntersectionObserver(</span><br><span class="line">  <span class="function">(<span class="params">entries, observer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(entries);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，回调函数采用的是<a href="http://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">箭头函数</a>的写法。<code>callback</code>函数的参数（<code>entries</code>）是一个数组，每个成员都是一个<a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry"><code>IntersectionObserverEntry</code></a>对象（详见下文）。举例来说，如果同时有两个被观察的对象的可见性发生变化，<code>entries</code>数组就会有两个成员。</p><h3 id="IntersectionObserverEntry-对象">IntersectionObserverEntry 对象 <a href="about:blank#intersectionobserverentry-%E5%AF%B9%E8%B1%A1">#</a></h3><p><code>IntersectionObserverEntry</code>对象提供目标元素的信息，一共有六个属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">time:</span> <span class="number">3893.92</span>,</span><br><span class="line">  <span class="attr">rootBounds:</span> <span class="string">ClientRect</span> &#123;</span><br><span class="line">    <span class="attr">bottom:</span> <span class="number">920</span>,</span><br><span class="line">    <span class="attr">height:</span> <span class="number">1024</span>,</span><br><span class="line">    <span class="attr">left:</span> <span class="number">0</span>,</span><br><span class="line">    <span class="attr">right:</span> <span class="number">1024</span>,</span><br><span class="line">    <span class="attr">top:</span> <span class="number">0</span>,</span><br><span class="line">    <span class="attr">width:</span> <span class="number">920</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">boundingClientRect:</span> <span class="string">ClientRect</span> &#123;</span><br><span class="line">     <span class="string">//</span> <span class="string">...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">intersectionRect:</span> <span class="string">ClientRect</span> &#123;</span><br><span class="line">    <span class="string">//</span> <span class="string">...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">intersectionRatio:</span> <span class="number">0.54</span>,</span><br><span class="line">  <span class="attr">target:</span> <span class="string">element</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每个属性的含义如下。</p><blockquote><ul><li><code>time</code>：可见性发生变化的时间，是一个高精度时间戳，单位为毫秒</li><li><code>target</code>：被观察的目标元素，是一个 DOM 节点对象</li><li><code>rootBounds</code>：容器元素的矩形区域的信息，<code>getBoundingClientRect()</code>方法的返回值，如果没有容器元素（即直接相对于视口滚动），则返回<code>null</code></li><li><code>boundingClientRect</code>：目标元素的矩形区域的信息</li><li><code>intersectionRect</code>：目标元素与视口（或容器元素）的交叉区域的信息</li><li><code>intersectionRatio</code>：目标元素的可见比例，即<code>intersectionRect</code>占<code>boundingClientRect</code>的比例，完全可见时为<code>1</code>，完全不可见时小于等于<code>0</code></li></ul></blockquote><p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016110202.png" alt=""></p><p>上图中，灰色的水平方框代表视口，深红色的区域代表四个被观察的目标元素。它们各自的<code>intersectionRatio</code>图中都已经注明。</p><p>我写了一个 <a href="http://jsbin.com/canuze/edit?js,console,output">Demo</a>，演示<code>IntersectionObserverEntry</code>对象。注意，这个 Demo 只能在 Chrome 51+ 运行。</p><h3 id="Option-对象">Option 对象 <a href="about:blank#option-%E5%AF%B9%E8%B1%A1">#</a></h3><p><code>IntersectionObserver</code>构造函数的第二个参数是一个配置对象。它可以设置以下属性。</p><p><strong>（1）threshold 属性</strong></p><p><code>threshold</code>属性决定了什么时候触发回调函数，即元素进入视口（或者容器元素）多少比例时，执行回调函数。它是一个数组，每个成员都是一个门槛值，默认为<code>[0]</code>，即交叉比例（<code>intersectionRatio</code>）达到<code>0</code>时触发回调函数。</p><p>如果<code>threshold</code>属性是0.5，当元素进入视口50%时，触发回调函数。如果值为<code>[0.3, 0.6]</code>，则当元素进入30％和60％是触发回调函数。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> IntersectionObserver(</span><br><span class="line">  <span class="function"><span class="params">entries</span> =&gt;</span> &#123;<span class="comment">/* … */</span>&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">threshold</span>: [<span class="number">0</span>, <span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用户可以自定义这个数组。比如，上例的<code>[0, 0.25, 0.5, 0.75, 1]</code>就表示当目标元素 0%、25%、50%、75%、100% 可见时，会触发回调函数。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016110202.gif" alt=""></p><p><strong>（2）root 属性，rootMargin 属性</strong></p><p><code>IntersectionObserver</code>不仅可以观察元素相对于视口的可见性，还可以观察元素相对于其所在容器的可见性。容器内滚动也会影响目标元素的可见性，参见本文开始时的那张示意图。</p><p>IntersectionObserver API 支持容器内滚动。<code>root</code>属性指定目标元素所在的容器节点。注意，容器元素必须是目标元素的祖先节点。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> opts = &#123;</span><br><span class="line">  root: <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>),</span><br><span class="line">  rootMargin: <span class="string">&#x27;0px 0px -200px 0px&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> IntersectionObserver(</span><br><span class="line">  callback,</span><br><span class="line">  opts</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，除了<code>root</code>属性，还有<a href="https://wicg.github.io/IntersectionObserver/#dom-intersectionobserverinit-rootmargin"><code>rootMargin</code></a>属性。该属性用来扩展或缩小<code>rootBounds</code>这个矩形的大小，从而影响<code>intersectionRect</code>交叉区域的大小。它的写法类似于 CSS 的<code>margin</code>属性，比如<code>0px 0px 0px 0px</code>，依次表示 top、right、bottom 和 left 四个方向的值。</p><p>上例的<code>0px 0px -200px 0px</code>，表示容器的下边缘向上收缩200像素，导致页面向下滚动时，目标元素的顶部进入可视区域200像素以后，才会触发回调函数。</p><p>这样设置以后，不管是窗口滚动或者容器内滚动，只要目标元素可见性变化，都会触发观察器。</p><h2 id="实例">实例 <a href="about:blank#%E5%AE%9E%E4%BE%8B">#</a></h2><h3 id="惰性加载（lazy-load）">惰性加载（lazy load） <a href="about:blank#%E6%83%B0%E6%80%A7%E5%8A%A0%E8%BD%BDlazy-load">#</a></h3><p>有时，我们希望某些静态资源（比如图片），只有用户向下滚动，它们进入视口时才加载，这样可以节省带宽，提高网页性能。这就叫做“惰性加载”。</p><p>有了 IntersectionObserver API，实现起来就很容易了。图像的 HTML 代码可以写成下面这样。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;placeholder.png&quot;</span> <span class="attribute">data-src</span>=<span class="string">&quot;img-1.jpg&quot;</span>&gt;</span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;placeholder.png&quot;</span> <span class="attribute">data-src</span>=<span class="string">&quot;img-2.jpg&quot;</span>&gt;</span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;placeholder.png&quot;</span> <span class="attribute">data-src</span>=<span class="string">&quot;img-3.jpg&quot;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，图像默认显示一个占位符，<code>data-src</code>属性是惰性加载的真正图像。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">query</span>(selector) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">Array.from(document.querySelectorAll(selector))</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var observer = <span class="keyword">new</span> IntersectionObserver(</span><br><span class="line">  <span class="keyword">function</span>(entries) &#123;</span><br><span class="line">    entries.forEach(<span class="keyword">function</span>(<span class="keyword">entry</span>) &#123;</span><br><span class="line">      <span class="keyword">entry</span>.target.src = <span class="keyword">entry</span>.target.dataset.src;</span><br><span class="line">      observer.unobserve(<span class="keyword">entry</span>.target);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">query(&#x27;.lazy-loaded&#x27;).forEach(<span class="keyword">function</span> <span class="title"></span>(item) &#123;</span><br><span class="line">  observer.observe(item);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，只有图像开始可见时，才会加载真正的图像文件。</p><h3 id="无限滚动">无限滚动 <a href="about:blank#%E6%97%A0%E9%99%90%E6%BB%9A%E5%8A%A8">#</a></h3><p>无限滚动（infinite scroll）指的是，随着网页滚动到底部，不断加载新的内容到页面，它的实现也很简单。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intersectionObserver = <span class="keyword">new</span> IntersectionObserver(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">entries</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果不可见，就返回</span></span><br><span class="line">    <span class="keyword">if</span> (entries[<span class="number">0</span>].intersectionRatio &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    loadItems(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Loaded new items&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始观察</span></span><br><span class="line">intersectionObserver.observe(</span><br><span class="line">  document.querySelector(<span class="string">&#x27;.scrollerFooter&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>无限滚动时，最好像上例那样，页面底部有一个页尾栏（又称<a href="https://wangdoc.com/sentinels">sentinels</a>，上例是<code>.scrollerFooter</code>）。一旦页尾栏可见，就表示用户到达了页面底部，从而加载新的条目放在页尾栏前面。否则就需要每一次页面加入新内容时，都调用<code>observe()</code>方法，对新增内容的底部建立观察。</p><h3 id="视频自动播放">视频自动播放 <a href="about:blank#%E8%A7%86%E9%A2%91%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE">#</a></h3><p>下面是一个视频元素，希望它完全进入视口的时候自动播放，离开视口的时候自动暂停。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;video <span class="attribute">src</span>=<span class="string">&quot;foo.mp4&quot;</span> <span class="attribute">controls</span>=<span class="string">&quot;&quot;</span>&gt;&lt;/video&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是 JS 代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> isPaused = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries, observer</span>) =&gt;</span> &#123;</span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.<span class="property">intersectionRatio</span> != <span class="number">1</span>  &amp;&amp; !video.<span class="property">paused</span>) &#123;</span><br><span class="line">      video.<span class="title function_">pause</span>();</span><br><span class="line">      isPaused = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isPaused) &#123;</span><br><span class="line">      video.<span class="title function_">play</span>();</span><br><span class="line">      isPaused=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, &#123;<span class="attr">threshold</span>: <span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">observer.<span class="title function_">observe</span>(video);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，<code>IntersectionObserver()</code>的第二个参数是配置对象，它的<code>threshold</code>属性等于<code>1</code>，即目标元素完全可见时触发回调函数。</p><h2 id="参考链接">参考链接 <a href="about:blank#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">#</a></h2><ul><li><a href="https://developers.google.com/web/updates/2016/04/intersectionobserver">IntersectionObserver’s Coming into View</a></li><li><a href="https://github.com/WICG/IntersectionObserver/blob/gh-pages/explainer.md">Intersection Observers Explained</a></li><li><a href="https://css-tricks.com/a-few-functional-uses-for-intersection-observer-to-know-when-an-element-is-in-view/">A Few Functional Uses for Intersection Observer to Know When an Element is in View</a>, Preethi</li></ul><p>本文转自 <a href="https://wangdoc.com/webapi/intersectionObserver">https://wangdoc.com/webapi/intersectionObserver</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">IntersectionObserver</summary>
    
    
    
    <category term="webApi" scheme="https://www.hacp.top/categories/webApi/"/>
    
    
    <category term="webApi" scheme="https://www.hacp.top/tags/webApi/"/>
    
  </entry>
  
  <entry>
    <title>Headers 对象</title>
    <link href="https://www.hacp.top/posts/39.html"/>
    <id>https://www.hacp.top/posts/39.html</id>
    <published>2023-07-07T10:19:03.000Z</published>
    <updated>2023-07-07T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Headers 对象</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><h2 id="简介">简介 <a href="about:blank#%E7%AE%80%E4%BB%8B">#</a></h2><p>Headers 代表 HTTP 消息的数据头。</p><p>它通过<code>Headers()</code>构造方法，生成实例对象。<code>Request.headers</code>属性和<code>Response.headers</code>属性，指向的都是 Headers 实例对象。</p><p>Headers 实例对象内部，以键值对的形式保存 HTTP 消息头，可以用<code>for...of</code>循环进行便利，比如<code>for (const p of myHeaders)</code>。新建的 Headers 实例对象，内部是空的，需要用<code>append()</code>方法添加键值对。</p><h2 id="构造函数">构造函数 <a href="about:blank#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a></h2><p><code>Headers()</code>构造函数用来新建 Headers 实例对象。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const myHeaders <span class="operator">=</span> new Headers()<span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它可以接受一个表示 HTTP 数据头的对象，或者另一个 Headers 实例对象，作为参数。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">const httpHeaders</span> = &#123;</span><br><span class="line">  <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;image/jpeg&quot;</span>,</span><br><span class="line">  <span class="string">&quot;X-My-Custom-Header&quot;</span>: <span class="string">&quot;Zeke are cool&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="attribute">const myHeaders</span> = new Headers(httpHeaders);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后，它还可以接受一个键值对数组，作为参数。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">const headers</span> = [</span><br><span class="line">  [<span class="string">&quot;Set-Cookie&quot;</span>, <span class="string">&quot;greeting=hello&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;Set-Cookie&quot;</span>, <span class="string">&quot;name=world&quot;</span>],</span><br><span class="line">];</span><br><span class="line"><span class="attribute">const myHeaders</span> = new Headers(headers);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实例方法">实例方法 <a href="about:blank#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95">#</a></h2><h3 id="append">append() <a href="about:blank#append">#</a></h3><p><code>append()</code>方法用来添加字段。如果字段已经存在，它会将新的值添加到原有值的末端。</p><p>它接受两个参数，第一个是字段名，第二个是字段值。它没有返回值。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">append</span><span class="params">(name, value)</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是用法示例。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myHeaders = <span class="built_in">new</span> Headers();</span><br><span class="line">myHeaders.<span class="built_in">append</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是同名字段已经存在的情况。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myHeaders.<span class="keyword">append</span>(<span class="string">&quot;Accept-Encoding&quot;</span>, <span class="string">&quot;deflate&quot;</span>);</span><br><span class="line">myHeaders.<span class="keyword">append</span>(<span class="string">&quot;Accept-Encoding&quot;</span>, <span class="string">&quot;gzip&quot;</span>);</span><br><span class="line">myHeaders.<span class="built_in">get</span>(<span class="string">&quot;Accept-Encoding&quot;</span>); <span class="comment">// &#x27;deflate, gzip&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Accept-Encoding</code>字段已经存在，所以<code>append()</code>会将新的值添加到原有值的末尾。</p><h3 id="delete">delete() <a href="about:blank#delete">#</a></h3><p><code>delete()</code>用来删除一个键值对，参数<code>name</code>指定删除的字段名。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">delete</span><span class="params">(name)</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果参数<code>name</code>不是合法的字段名，或者是不可删除的字段，上面的命令会抛错。</p><p>下面是用法示例。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myHeaders = <span class="built_in">new</span> Headers();</span><br><span class="line">myHeaders.<span class="built_in">append</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">myHeaders.<span class="built_in">delete</span>(<span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="entries">entries() <a href="about:blank#entries">#</a></h3><p><code>entries()</code>方法用来遍历所有键值对，返回一个 iterator 指针，供<code>for...of</code>循环使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> myHeaders = <span class="keyword">new</span> <span class="built_in">Headers</span>();</span><br><span class="line">myHeaders.<span class="built_in">append</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/xml&quot;</span>);</span><br><span class="line">myHeaders.<span class="built_in">append</span>(<span class="string">&quot;Vary&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> pair of myHeaders.<span class="built_in">entries</span>()) &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(`$&#123;pair[<span class="number">0</span>]&#125;: $&#123;pair[<span class="number">1</span>]&#125;`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="forEach">forEach() <a href="about:blank#foreach">#</a></h3><p><code>forEach()</code>方法用来遍历所有键值对，对每个指定键值对执行一个指定函数。</p><p>它的第一个参数是回调函数<code>callbackFn</code>，第二个参数<code>thisArg</code>是<code>callbackFn</code>所用的 this 对象。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">forEach</span><span class="params">(callbackFn)</span></span></span><br><span class="line"><span class="function"><span class="title">forEach</span><span class="params">(callbackFn, thisArg)</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>回调函数<code>callback</code>会接受到以下参数。</p><ul><li>value：当前的字段值。</li><li>key：当前的字段名。</li><li>object：当前正在执行的 Headers 对象。</li></ul><p>下面是用法示例。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const myHeaders = <span class="keyword">new</span> Headers();</span><br><span class="line">myHeaders.append(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">myHeaders.append(<span class="string">&quot;Cookie&quot;</span>, <span class="string">&quot;This is a demo cookie&quot;</span>);</span><br><span class="line">myHeaders.append(<span class="string">&quot;compression&quot;</span>, <span class="string">&quot;gzip&quot;</span>);</span><br><span class="line"></span><br><span class="line">myHeaders.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> ==&gt; <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="get">get() <a href="about:blank#get">#</a></h3><p><code>get()</code>方法用于取出指定字段的字段值，它的参数就是字段名。如果字段名不合法（比如包含中文字符），它会抛错；如果字段在当前 Headers 对象不存在，它返回<code>null</code>。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">get</span><span class="params">(name)</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是用法示例。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myHeaders.<span class="built_in">append</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">myHeaders.<span class="built_in">get</span>(<span class="string">&quot;Content-Type&quot;</span>); // <span class="string">&quot;image/jpeg&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果当前字段有多个值，<code>get()</code>会返回所有值。</p><h3 id="getSetCookie">getSetCookie() <a href="about:blank#getsetcookie">#</a></h3><p><code>getSetCookie()</code>返回一个数组，包含所有<code>Set-Cookie</code>设定的 Cookie 值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> headers = <span class="built_in">new</span> Headers(&#123;</span><br><span class="line">  <span class="string">&quot;Set-Cookie&quot;</span>: <span class="string">&quot;name1=value1&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">headers.<span class="built_in">append</span>(<span class="string">&quot;Set-Cookie&quot;</span>, <span class="string">&quot;name2=value2&quot;</span>);</span><br><span class="line"></span><br><span class="line">headers.getSetCookie();</span><br><span class="line"><span class="comment">// [&quot;name1=value1&quot;, &quot;name2=value2&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="has">has() <a href="about:blank#has">#</a></h3><p><code>has()</code>返回一个布尔值，表示 Headers 对象是否包含指定字段。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">has</span><span class="params">(name)</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果参数<code>name</code>不是有效的 HTTP 数据头的字段名，该方法会报错。</p><p>下面是用法示例。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myHeaders.append(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">myHeaders.has(<span class="string">&quot;Content-Type&quot;</span>); <span class="regexp">//</span> <span class="literal">true</span></span><br><span class="line">myHeaders.has(<span class="string">&quot;Accept-Encoding&quot;</span>); <span class="regexp">//</span> <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="keys">keys() <a href="about:blank#keys">#</a></h3><p><code>keys()</code>方法用来遍历 Headers 数据头的所有字段名。它返回的是一个 iterator 对象，供<code>for...of</code>使用。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const myHeaders = <span class="built_in">new</span> Headers();</span><br><span class="line">myHeaders.<span class="built_in">append</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/xml&quot;</span>);</span><br><span class="line">myHeaders.<span class="built_in">append</span>(<span class="string">&quot;Vary&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (const <span class="built_in">key</span> of myHeaders.keys()) &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="set">set() <a href="about:blank#set">#</a></h3><p><code>set()</code>方法用来为指定字段添加字段值。如果字段不存在，就添加该字段；如果字段已存在，就用新的值替换老的值，这是它与<code>append()</code>方法的主要区别。</p><p>它的第一个参数<code>name</code>是字段名，第二个参数<code>value</code>是字段值。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">set</span><span class="params">(name, value)</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是用法示例。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myHeaders = <span class="keyword">new</span> Headers();</span><br><span class="line">myHeaders.<span class="keyword">set</span>(<span class="string">&quot;Accept-Encoding&quot;</span>, <span class="string">&quot;deflate&quot;</span>);</span><br><span class="line">myHeaders.<span class="keyword">set</span>(<span class="string">&quot;Accept-Encoding&quot;</span>, <span class="string">&quot;gzip&quot;</span>);</span><br><span class="line">myHeaders.<span class="keyword">get</span>(<span class="string">&quot;Accept-Encoding&quot;</span>); <span class="comment">// &#x27;gzip&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，连续两次使用<code>set()</code>对<code>Accept-Encoding</code>赋值，第二个值会覆盖第一个值。</p><h3 id="values">values() <a href="about:blank#values">#</a></h3><p><code>values()</code>方法用来遍历 Headers 对象的字段值。它返回一个 iterator 对象，供<code>for...of</code>使用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myHeaders = <span class="built_in">new</span> Headers();</span><br><span class="line">myHeaders.<span class="built_in">append</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/xml&quot;</span>);</span><br><span class="line">myHeaders.<span class="built_in">append</span>(<span class="string">&quot;Vary&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value of myHeaders.values()) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本文转自 <a href="https://wangdoc.com/webapi/headers">https://wangdoc.com/webapi/headers</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">Headers 对象</summary>
    
    
    
    <category term="webApi" scheme="https://www.hacp.top/categories/webApi/"/>
    
    
    <category term="webApi" scheme="https://www.hacp.top/tags/webApi/"/>
    
  </entry>
  
</feed>
