<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hacp🥝</title>
  
  
  <link href="https://www.fomal.cc/atom.xml" rel="self"/>
  
  <link href="https://www.fomal.cc/"/>
  <updated>2024-05-10T14:19:03.000Z</updated>
  <id>https://www.fomal.cc/</id>
  
  <author>
    <name>Hacp🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>排序算法</title>
    <link href="https://www.fomal.cc/posts/6.html"/>
    <id>https://www.fomal.cc/posts/6.html</id>
    <published>2024-05-10T14:19:03.000Z</published>
    <updated>2024-05-10T14:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-冒泡排序">1.冒泡排序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function bubbleSort(arr) &#123;</span><br><span class="line">    let len = arr.length;</span><br><span class="line">    for (let i = 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">        for (let j = 0; j &lt; len - 1 - i; j++) &#123;</span><br><span class="line">            if (arr[j] &gt; arr[j + 1]) &#123;        // 相邻元素两两对比</span><br><span class="line">                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-插入排序">2.插入排序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function insertionSort(arr) &#123;</span><br><span class="line">    let len = arr.length;</span><br><span class="line">    let preIndex, current;</span><br><span class="line">    for (let i = 1; i &lt; len; i++) &#123;</span><br><span class="line">        preIndex = i - 1;</span><br><span class="line">        current = arr[i];</span><br><span class="line">        while (preIndex &gt;= 0 &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">            arr[preIndex + 1] = arr[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[preIndex + 1] = current;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-选择排序">3.选择排序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function selectionSort(arr) &#123;</span><br><span class="line">    let len = arr.length;</span><br><span class="line">    let minIndex, temp;</span><br><span class="line">    for (let i = 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        for (let j = i + 1; j &lt; len; j++) &#123;</span><br><span class="line">            if (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        arr[i] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-快速排序">4.快速排序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">function quickSort(arr, left, right) &#123;</span><br><span class="line">    let len = arr.length,</span><br><span class="line">        partitionIndex,</span><br><span class="line">        left = typeof left != &#x27;undefined&#x27; ? left : 0,</span><br><span class="line">        right = typeof right != &#x27;undefined&#x27; ? right : len - 1;</span><br><span class="line"> </span><br><span class="line">    if (left &lt; right) &#123;</span><br><span class="line">        partitionIndex = partition(arr, left, right);</span><br><span class="line"> </span><br><span class="line">        quickSort(arr, left, partitionIndex - 1);</span><br><span class="line">        quickSort(arr, partitionIndex + 1, right);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function partition(arr, left, right) &#123;</span><br><span class="line">    let pivot = arr[right],</span><br><span class="line">        partitionIndex = left;</span><br><span class="line"> </span><br><span class="line">    for (let i = left; i &lt; right; i++) &#123;</span><br><span class="line">        if (arr[i] &lt; pivot) &#123;</span><br><span class="line">            swap(arr, i, partitionIndex);</span><br><span class="line">            partitionIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, right, partitionIndex);</span><br><span class="line">    return partitionIndex;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function swap(arr, i, j) &#123;</span><br><span class="line">    let temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-归并排序">5.归并排序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function mergeSort(arr) &#123;</span><br><span class="line">    let len = arr.length;</span><br><span class="line">    if (len &lt; 2) &#123;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">    let middle = Math.floor(len / 2),</span><br><span class="line">        left = arr.slice(0, middle),</span><br><span class="line">        right = arr.slice(middle);</span><br><span class="line">    return merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function merge(left, right) &#123;</span><br><span class="line">    let result = [];</span><br><span class="line">    while (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">        if (left[0] &lt;= right[0]) &#123;</span><br><span class="line">            result.push(left.shift());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            result.push(right.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while (left.length)</span><br><span class="line">        result.push(left.shift());</span><br><span class="line">    while (right.length)</span><br><span class="line">        result.push(right.shift());</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-堆排序">6.堆排序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">function heapSort(arr) &#123;</span><br><span class="line">    // 建堆</span><br><span class="line">    buildHeap(arr);</span><br><span class="line"></span><br><span class="line">    let len = arr.length;</span><br><span class="line">    let temp;</span><br><span class="line"></span><br><span class="line">    // 堆调整排序</span><br><span class="line">    for (let i = len - 1; i &gt; 0; i--) &#123;</span><br><span class="line">        // 将当前未排序序列中最大（或最小）元素放到序列的起始位置</span><br><span class="line">        temp = arr[0];</span><br><span class="line">        arr[0] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line"></span><br><span class="line">        // 重新对剩余未排序元素进行最大堆调整</span><br><span class="line">        heapify(arr, 0, i);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 建堆</span><br><span class="line">function buildHeap(arr) &#123;</span><br><span class="line">    let len = arr.length;</span><br><span class="line">    // 从最后一个非叶子节点开始调整</span><br><span class="line">    for (let i = Math.floor(len / 2) - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">        heapify(arr, i, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 堆调整</span><br><span class="line">function heapify(arr, i, len) &#123;</span><br><span class="line">    let largest = i;</span><br><span class="line">    let left = 2 * i + 1;</span><br><span class="line">    let right = 2 * i + 2;</span><br><span class="line"></span><br><span class="line">    if (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (largest != i) &#123;</span><br><span class="line">        let swap = arr[i];</span><br><span class="line">        arr[i] = arr[largest];</span><br><span class="line">        arr[largest] = swap;</span><br><span class="line"></span><br><span class="line">        // 递归调整子树</span><br><span class="line">        heapify(arr, largest, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">🥧排序算法专题</summary>
    
    
    
    <category term="代码" scheme="https://www.fomal.cc/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="代码" scheme="https://www.fomal.cc/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>爱心</title>
    <link href="https://www.fomal.cc/posts/5.html"/>
    <id>https://www.fomal.cc/posts/5.html</id>
    <published>2024-01-03T10:19:03.000Z</published>
    <updated>2024-01-03T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-实现构思">1.实现构思</h2><p>最开始想用缩小图片然后使用曲线的方式遍历循环形成爱心，实际测试下来，性能耗损太大，以至于实现难度更高，位置和速度不可控</p><p>思索良久后，还是决定用画布</p><p>Particle 和 ParticlePool 类定义了粒子和粒子池，用于绘制和管理粒子。</p><p>pointOnHeart 函数返回一个位于桃心曲线上的点，用来初始化粒子的位置。</p><p>然后使用 canvas 绘制小粒子创造一个形状为桃心的动态效果。</p><p>代码中 render 函数是主要的渲染函数，用于更新粒子状态、绘制粒子以及创建新的粒子。</p><p>最后通过延迟一段时间调用 onResize 函数，设置画布大小并开始渲染。</p><h2 id="2-先确定页面的布局，分为左右布局">2.先确定页面的布局，分为左右布局</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;mainDiv&quot;&gt;</span><br><span class="line">&lt;div id=&quot;content&quot;&gt;</span><br><span class="line">&lt;div id=&quot;code&quot;&gt;</span><br><span class="line">&lt;span class=&quot;comments&quot;&gt;人生至少该有一次&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;span class=&quot;comments&quot;&gt;为了某一个人而忘了自己&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;span class=&quot;keyword&quot;&gt;不求结果，不求同行，&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;span class=&quot;keyword&quot;&gt;不求曾经拥有，甚至不求你爱我，&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;span class=&quot;keyword&quot;/&gt;只求在我最美的年华里&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;span class=&quot;keyword&quot;/&gt;遇到你&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;loveHeart&quot;&gt;</span><br><span class="line">&lt;canvas id=&quot;garden&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">&lt;div id=&quot;words&quot;&gt;</span><br><span class="line">&lt;div id=&quot;messages&quot;&gt;</span><br><span class="line">亲爱的，这是我们相识的时光。</span><br><span class="line">&lt;div id=&quot;elapseClock&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;loveu&quot;&gt;</span><br><span class="line">爱你的。&lt;br/&gt;</span><br><span class="line">&lt;div class=&quot;signature&quot;&gt;- 侯先生&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="3-确定板块样式">3.确定板块样式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family: digit;</span><br><span class="line">    src: url(&#x27;digital-7_mono.ttf&#x27;) format(&quot;truetype&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    background: #ffe;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    overflow: auto</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">mainDiv &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">loveHeart &#123;</span></span><br><span class="line">    float: left;</span><br><span class="line">    width: 670px;</span><br><span class="line">    height: 625px</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">garden &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">elapseClock &#123;</span></span><br><span class="line">    text-align: right;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    margin-bottom: 10px</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">words &#123;</span></span><br><span class="line">    font-family: &quot;sans-serif&quot;;</span><br><span class="line">    width: 500px;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">    color: #666</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">messages &#123;</span></span><br><span class="line">    display: none</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">elapseClock .digit &#123;</span></span><br><span class="line">    font-family: &quot;digit&quot;;</span><br><span class="line">    font-size: 36px</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">loveu &#123;</span></span><br><span class="line">    padding: 5px;</span><br><span class="line">    font-size: 22px;</span><br><span class="line">    margin-top: 80px;</span><br><span class="line">    margin-right: 120px;</span><br><span class="line">    text-align: right;</span><br><span class="line">    display: none</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">loveu .signature &#123;</span></span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">    font-style: italic</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">clickSound &#123;</span></span><br><span class="line">    display: none</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">code &#123;</span></span><br><span class="line">    float: left;</span><br><span class="line">    width: 440px;</span><br><span class="line">    height: 400px;</span><br><span class="line">    color: #333;</span><br><span class="line">    font-family: &quot;Consolas&quot;, &quot;Monaco&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, &quot;sans-serif&quot;;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    line-height: 35px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">code .string &#123;</span></span><br><span class="line">    color: #2a36ff</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">code .keyword &#123;</span></span><br><span class="line">    color: #7f0055;</span><br><span class="line">    font-weight: bold</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">code .placeholder &#123;</span></span><br><span class="line">    margin-left: 15px</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">code .space &#123;</span></span><br><span class="line">    margin-left: 7px</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">code .comments &#123;</span></span><br><span class="line">    color: #3f7f5f</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">copyright &#123;</span></span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    width: 100%;</span><br><span class="line">    color: #666</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">errorMsg &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 100px;</span><br><span class="line">    left: 0</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">copyright a &#123;</span></span><br><span class="line">    color: #666</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-实现爱心粒子逻辑">4.实现爱心粒子逻辑</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function Vector(x, y) &#123;</span><br><span class="line">    this.x = x;</span><br><span class="line">    this.y = y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vector.prototype = &#123;</span><br><span class="line">rotate: function (theta) &#123;</span><br><span class="line">    var x = this.x;</span><br><span class="line">    var y = this.y;</span><br><span class="line">    this.x = Math.cos(theta) * x - Math.sin(theta) * y;</span><br><span class="line">    this.y = Math.sin(theta) * x + Math.cos(theta) * y;</span><br><span class="line">    return this;</span><br><span class="line">&#125;,</span><br><span class="line">mult: function (f) &#123;</span><br><span class="line">    this.x *= f;</span><br><span class="line">    this.y *= f;</span><br><span class="line">    return this;</span><br><span class="line">&#125;,</span><br><span class="line">clone: function () &#123;</span><br><span class="line">    return new Vector(this.x, this.y);</span><br><span class="line">&#125;,</span><br><span class="line">length: function () &#123;</span><br><span class="line">    return Math.sqrt(this.x * this.x + this.y * this.y);</span><br><span class="line">&#125;,</span><br><span class="line">subtract: function (v) &#123;</span><br><span class="line">    this.x -= v.x;</span><br><span class="line">    this.y -= v.y;</span><br><span class="line">    return this;</span><br><span class="line">&#125;,</span><br><span class="line">set: function (x, y) &#123;</span><br><span class="line">    this.x = x;</span><br><span class="line">    this.y = y;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function Petal(stretchA, stretchB, startAngle, angle, growFactor, bloom) &#123;</span><br><span class="line">    this.stretchA = stretchA;</span><br><span class="line">    this.stretchB = stretchB;</span><br><span class="line">    this.startAngle = startAngle;</span><br><span class="line">    this.angle = angle;</span><br><span class="line">    this.bloom = bloom;</span><br><span class="line">    this.growFactor = growFactor;</span><br><span class="line">    this.r = 1;</span><br><span class="line">    this.isfinished = false;</span><br><span class="line">    //this.tanAngleA = Garden.random(-Garden.degrad(Garden.options.tanAngle), Garden.degrad(Garden.options.tanAngle));</span><br><span class="line">    //this.tanAngleB = Garden.random(-Garden.degrad(Garden.options.tanAngle), Garden.degrad(Garden.options.tanAngle));</span><br><span class="line">&#125;</span><br><span class="line">Petal.prototype = &#123;</span><br><span class="line">draw: function () &#123;</span><br><span class="line">    var ctx = this.bloom.garden.ctx;</span><br><span class="line">    var v1, v2, v3, v4;</span><br><span class="line">    v1 = new Vector(0, this.r).rotate(Garden.degrad(this.startAngle));</span><br><span class="line">    v2 = v1.clone().rotate(Garden.degrad(this.angle));</span><br><span class="line">    v3 = v1.clone().mult(this.stretchA); //.rotate(this.tanAngleA);</span><br><span class="line">    v4 = v2.clone().mult(this.stretchB); //.rotate(this.tanAngleB);</span><br><span class="line">    ctx.strokeStyle = this.bloom.c;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(v1.x, v1.y);</span><br><span class="line">    ctx.bezierCurveTo(v3.x, v3.y, v4.x, v4.y, v2.x, v2.y);</span><br><span class="line">    ctx.stroke();</span><br><span class="line">&#125;,</span><br><span class="line">render: function () &#123;</span><br><span class="line">    if (this.r &lt;= this.bloom.r) &#123;</span><br><span class="line">        this.r += this.growFactor; // / 10;</span><br><span class="line">        this.draw();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        this.isfinished = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Bloom(p, r, c, pc, garden) &#123;</span><br><span class="line">    this.p = p;</span><br><span class="line">    this.r = r;</span><br><span class="line">    this.c = c;</span><br><span class="line">    this.pc = pc;</span><br><span class="line">    this.petals = [];</span><br><span class="line">    this.garden = garden;</span><br><span class="line">    this.init();</span><br><span class="line">    this.garden.addBloom(this);</span><br><span class="line">&#125;</span><br><span class="line">Bloom.prototype = &#123;</span><br><span class="line">draw: function () &#123;</span><br><span class="line">    var p, isfinished = true;</span><br><span class="line">    this.garden.ctx.save();</span><br><span class="line">    this.garden.ctx.translate(this.p.x, this.p.y);</span><br><span class="line">    for (var i = 0; i &lt; this.petals.length; i++) &#123;</span><br><span class="line">        p = this.petals[i];</span><br><span class="line">        p.render();</span><br><span class="line">        isfinished *= p.isfinished;</span><br><span class="line">    &#125;</span><br><span class="line">    this.garden.ctx.restore();</span><br><span class="line">    if (isfinished == true) &#123;</span><br><span class="line">        this.garden.removeBloom(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">init: function () &#123;</span><br><span class="line">    var angle = 360 / this.pc;</span><br><span class="line">    var startAngle = Garden.randomInt(0, 90);</span><br><span class="line">    for (var i = 0; i &lt; this.pc; i++) &#123;</span><br><span class="line">        this.petals.push(new Petal(Garden.random(Garden.options.petalStretch.min, Garden.options.petalStretch.max), Garden.random(Garden.options.petalStretch.min, Garden.options.petalStretch.max), startAngle + i * angle, angle, Garden.random(Garden.options.growFactor.min, Garden.options.growFactor.max), this));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Garden(ctx, element) &#123;</span><br><span class="line">    this.blooms = [];</span><br><span class="line">    this.element = element;</span><br><span class="line">    this.ctx = ctx;</span><br><span class="line">&#125;</span><br><span class="line">Garden.prototype = &#123;</span><br><span class="line">render: function () &#123;</span><br><span class="line">    for (var i = 0; i &lt; this.blooms.length; i++) &#123;</span><br><span class="line">        this.blooms[i].draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">addBloom: function (b) &#123;</span><br><span class="line">    this.blooms.push(b);</span><br><span class="line">&#125;,</span><br><span class="line">removeBloom: function (b) &#123;</span><br><span class="line">    var bloom;</span><br><span class="line">    for (var i = 0; i &lt; this.blooms.length; i++) &#123;</span><br><span class="line">        bloom = this.blooms[i];</span><br><span class="line">        if (bloom === b) &#123;</span><br><span class="line">            this.blooms.splice(i, 1);</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">createRandomBloom: function (x, y) &#123;</span><br><span class="line">    this.createBloom(x, y, Garden.randomInt(Garden.options.bloomRadius.min, Garden.options.bloomRadius.max), Garden.randomrgba(Garden.options.color.rmin, Garden.options.color.rmax, Garden.options.color.gmin, Garden.options.color.gmax, Garden.options.color.bmin, Garden.options.color.bmax, Garden.options.color.opacity), Garden.randomInt(Garden.options.petalCount.min, Garden.options.petalCount.max));</span><br><span class="line">&#125;,</span><br><span class="line">createBloom: function (x, y, r, c, pc) &#123;</span><br><span class="line">    new Bloom(new Vector(x, y), r, c, pc, this);</span><br><span class="line">&#125;,</span><br><span class="line">clear: function () &#123;</span><br><span class="line">    this.blooms = [];</span><br><span class="line">    this.ctx.clearRect(0, 0, this.element.width, this.element.height);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Garden.options = &#123;</span><br><span class="line">petalCount: &#123;</span><br><span class="line">    min: 8,</span><br><span class="line">    max: 15</span><br><span class="line">&#125;,</span><br><span class="line">petalStretch: &#123;</span><br><span class="line">    min: 0.1,</span><br><span class="line">    max: 3</span><br><span class="line">&#125;,</span><br><span class="line">growFactor: &#123;</span><br><span class="line">    min: 0.1,</span><br><span class="line">    max: 1</span><br><span class="line">&#125;,</span><br><span class="line">bloomRadius: &#123;</span><br><span class="line">    min: 8,</span><br><span class="line">    max: 10</span><br><span class="line">&#125;,</span><br><span class="line">density: 10,</span><br><span class="line">growSpeed: 1000 / 60,</span><br><span class="line">color: &#123;</span><br><span class="line">    rmin: 128,</span><br><span class="line">    rmax: 255,</span><br><span class="line">    gmin: 0,</span><br><span class="line">    gmax: 128,</span><br><span class="line">    bmin: 0,</span><br><span class="line">    bmax: 128,</span><br><span class="line">    opacity: 0.1</span><br><span class="line">&#125;,</span><br><span class="line">tanAngle: 60</span><br><span class="line">&#125;;</span><br><span class="line">Garden.random = function (min, max) &#123;</span><br><span class="line">return Math.random() * (max - min) + min;</span><br><span class="line">&#125;;</span><br><span class="line">Garden.randomInt = function (min, max) &#123;</span><br><span class="line">return Math.floor(Math.random() * (max - min + 1)) + min;</span><br><span class="line">&#125;;</span><br><span class="line">Garden.circle = 2 * Math.PI;</span><br><span class="line">Garden.degrad = function (angle) &#123;</span><br><span class="line">return Garden.circle / 360 * angle;</span><br><span class="line">&#125;;</span><br><span class="line">Garden.raddeg = function (angle) &#123;</span><br><span class="line">return angle / Garden.circle * 360;</span><br><span class="line">&#125;;</span><br><span class="line">Garden.rgba = function (r, g, b, a) &#123;</span><br><span class="line">return &#x27;rgba(&#x27; + r + &#x27;,&#x27; + g + &#x27;,&#x27; + b + &#x27;,&#x27; + a + &#x27;)&#x27;;</span><br><span class="line">&#125;;</span><br><span class="line">Garden.randomrgba = function (rmin, rmax, gmin, gmax, bmin, bmax, a) &#123;</span><br><span class="line">var r = Math.round(Garden.random(rmin, rmax));</span><br><span class="line">var g = Math.round(Garden.random(gmin, gmax));</span><br><span class="line">var b = Math.round(Garden.random(bmin, bmax));</span><br><span class="line">var limit = 5;</span><br><span class="line">if (Math.abs(r - g) &lt;= limit &amp;&amp; Math.abs(g - b) &lt;= limit &amp;&amp; Math.abs(b - r) &lt;= limit) &#123;</span><br><span class="line">    return Garden.rgba(rmin, rmax, gmin, gmax, bmin, bmax, a);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    return Garden.rgba(r, g, b, a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-构造画布大小和运动轨迹">5.构造画布大小和运动轨迹</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var $window = $(window), gardenCtx, gardenCanvas, $garden, garden;</span><br><span class="line">var clientWidth = $(window).width();</span><br><span class="line">var clientHeight = $(window).height();</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="function"><span class="title">function</span></span> () &#123;</span></span><br><span class="line">    // setup garden</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">loveHeart = $(<span class="string">&quot;#loveHeart&quot;</span>);</span></span><br><span class="line">var offsetX = $loveHeart.width() / 2;</span><br><span class="line">var offsetY = $loveHeart.height() / 2 - 55;</span><br><span class="line">    $garden = $(&quot;#garden&quot;);</span><br><span class="line">    gardenCanvas = $garden[0];</span><br><span class="line">gardenCanvas.width = $(&quot;#loveHeart&quot;).width();</span><br><span class="line">    gardenCanvas.height = $(&quot;#loveHeart&quot;).height()</span><br><span class="line">    gardenCtx = gardenCanvas.getContext(&quot;2d&quot;);</span><br><span class="line">    gardenCtx.globalCompositeOperation = &quot;lighter&quot;;</span><br><span class="line">    garden = new Garden(gardenCtx, gardenCanvas);</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&quot;#content&quot;</span>).css(<span class="string">&quot;width&quot;</span>, <span class="variable">$loveHeart</span>.width() + $(<span class="string">&quot;#code&quot;</span>).width());</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&quot;#content&quot;</span>).css(<span class="string">&quot;height&quot;</span>, Math.max(<span class="variable">$loveHeart</span>.height(), $(<span class="string">&quot;#code&quot;</span>).height()));</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&quot;#content&quot;</span>).css(<span class="string">&quot;margin-top&quot;</span>, Math.max((<span class="variable">$window</span>.height() - $(&quot;#content&quot;).height()) / 2, 10));</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&quot;#content&quot;</span>).css(<span class="string">&quot;margin-left&quot;</span>, Math.max((<span class="variable">$window</span>.width() - $(&quot;#content&quot;).width()) / 2, 10));</span></span><br><span class="line"></span><br><span class="line">    // renderLoop</span><br><span class="line">    setInterval(function () &#123;</span><br><span class="line">        garden.render();</span><br><span class="line">    &#125;, Garden.options.growSpeed);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(window).resize(<span class="function"><span class="title">function</span></span>() &#123;</span></span><br><span class="line">    var newWidth = $(window).width();</span><br><span class="line">    var newHeight = $(window).height();</span><br><span class="line">    if (newWidth != clientWidth &amp;&amp; newHeight != clientHeight) &#123;</span><br><span class="line">        location.replace(location);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function getHeartPoint(angle) &#123;</span><br><span class="line">var t = angle / Math.PI;</span><br><span class="line">var x = 19.5 * (16 * Math.pow(Math.sin(t), 3));</span><br><span class="line">var y = - 20 * (13 * Math.cos(t) - 5 * Math.cos(2 * t) - 2 * Math.cos(3 * t) - Math.cos(4 * t));</span><br><span class="line">return new Array(offsetX + x, offsetY + y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function startHeartAnimation() &#123;</span><br><span class="line">var interval = 50;</span><br><span class="line">var angle = 10;</span><br><span class="line">var heart = new Array();</span><br><span class="line">var animationTimer = setInterval(function () &#123;</span><br><span class="line">var bloom = getHeartPoint(angle);</span><br><span class="line">var draw = true;</span><br><span class="line">for (var i = 0; i &lt; heart.length; i++) &#123;</span><br><span class="line">var p = heart[i];</span><br><span class="line">var distance = Math.sqrt(Math.pow(p[0] - bloom[0], 2) + Math.pow(p[1] - bloom[1], 2));</span><br><span class="line">if (distance &lt; Garden.options.bloomRadius.max * 1.3) &#123;</span><br><span class="line">draw = false;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (draw) &#123;</span><br><span class="line">heart.push(bloom);</span><br><span class="line">garden.createRandomBloom(bloom[0], bloom[1]);</span><br><span class="line">&#125;</span><br><span class="line">if (angle &gt;= 30) &#123;</span><br><span class="line">clearInterval(animationTimer);</span><br><span class="line">showMessages();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">angle += 0.2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, interval);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">(function($</span><span class="language-bash">) &#123;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">.fn.typewriter = <span class="function"><span class="title">function</span></span>() &#123;</span></span><br><span class="line">this.each(function() &#123;</span><br><span class="line">var $ele = $(this), str = $ele.html(), progress = 0;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ele.html(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line">var timer = setInterval(function() &#123;</span><br><span class="line">var current = str.substr(progress, 1);</span><br><span class="line">if (current == &#x27;&lt;&#x27;) &#123;</span><br><span class="line">progress = str.indexOf(&#x27;&gt;&#x27;, progress) + 1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">progress++;</span><br><span class="line">&#125;</span><br><span class="line">$ele.html(str.substring(0, progress) + (progress &amp; 1 ? &#x27;_&#x27; : &#x27;&#x27;));</span><br><span class="line">if (progress &gt;= str.length) &#123;</span><br><span class="line">clearInterval(timer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, 75);</span><br><span class="line">&#125;);</span><br><span class="line">return this;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br><span class="line">function timeElapse(date)&#123;</span><br><span class="line">var current = Date();</span><br><span class="line">var seconds = (Date.parse(current) - Date.parse(date)) / 1000;</span><br><span class="line">var days = Math.floor(seconds / (3600 * 24));</span><br><span class="line">seconds = seconds % (3600 * 24);</span><br><span class="line">var hours = Math.floor(seconds / 3600);</span><br><span class="line">if (hours &lt; 10) &#123;</span><br><span class="line">hours = &quot;0&quot; + hours;</span><br><span class="line">&#125;</span><br><span class="line">seconds = seconds % 3600;</span><br><span class="line">var minutes = Math.floor(seconds / 60);</span><br><span class="line">if (minutes &lt; 10) &#123;</span><br><span class="line">minutes = &quot;0&quot; + minutes;</span><br><span class="line">&#125;</span><br><span class="line">seconds = seconds % 60;</span><br><span class="line">if (seconds &lt; 10) &#123;</span><br><span class="line">seconds = &quot;0&quot; + seconds;</span><br><span class="line">&#125;</span><br><span class="line">var result = &quot;&lt;span class=\&quot;digit\&quot;&gt;&quot; + days + &quot;&lt;/span&gt; days &lt;span class=\&quot;digit\&quot;&gt;&quot; + hours + &quot;&lt;/span&gt; hours &lt;span class=\&quot;digit\&quot;&gt;&quot; + minutes + &quot;&lt;/span&gt; minutes &lt;span class=\&quot;digit\&quot;&gt;&quot; + seconds + &quot;&lt;/span&gt; seconds&quot;; </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&quot;#elapseClock&quot;</span>).html(result);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function showMessages() &#123;</span><br><span class="line">adjustWordsPosition();</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&#x27;#messages&#x27;</span>).fadeIn(5000, <span class="function"><span class="title">function</span></span>() &#123;</span></span><br><span class="line">showLoveU();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function adjustWordsPosition() &#123;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&#x27;#words&#x27;</span>).css(<span class="string">&quot;position&quot;</span>, <span class="string">&quot;absolute&quot;</span>);</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&#x27;#words&#x27;</span>).css(<span class="string">&quot;top&quot;</span>, $(<span class="string">&quot;#garden&quot;</span>).position().top + 195);</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&#x27;#words&#x27;</span>).css(<span class="string">&quot;left&quot;</span>, $(<span class="string">&quot;#garden&quot;</span>).position().left + 70);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function adjustCodePosition() &#123;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&#x27;#code&#x27;</span>).css(<span class="string">&quot;margin-top&quot;</span>, ($(<span class="string">&quot;#garden&quot;</span>).height() - $(<span class="string">&quot;#code&quot;</span>).height()) / 2);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function showLoveU() &#123;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="string">&#x27;#loveu&#x27;</span>).fadeIn(3000);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-效果展示">6.效果展示</h2><ul><li><p class='p blue'>请使用电脑端查看效果</p></li></ul><div class="tag link"><a class="link-card" title="爱心效果演示" href="/assets/heart.html"><div class="left"><img src="https://tuchuang.voooe.cn/images/2024/05/10/1715347320685.png"/></div><div class="right"><p class="text">爱心效果演示</p><p class="url">/assets/heart.html</p></div></a></div>]]></content>
    
    
    <summary type="html">🥧电子版爱心代码</summary>
    
    
    
    <category term="代码" scheme="https://www.fomal.cc/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="代码" scheme="https://www.fomal.cc/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>《且听风吟》</title>
    <link href="https://www.fomal.cc/posts/3.html"/>
    <id>https://www.fomal.cc/posts/3.html</id>
    <published>2023-09-15T10:50:00.000Z</published>
    <updated>2023-09-15T10:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size="4px"><b>导读 ??</b></font></p><p>《且听风吟》是村上春树的代表作，也是无数人的青春回忆，每个人的青春里都有一个浪漫邂逅却无法相守的人，这个人，或许是遗憾，也可以是美好，折射着感情里最温情的一面。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/imageaa531157e524a4d6.png" alt="" /></p><p>村上春树作为知名作家，用一支笔写尽了人间的悲欢离合，他将青春的色彩、爱情的悲喜、人性的不同都刻画的深入人心。</p><p>也因此，每次读他的文字，都给人一种沁人心脾的感觉，而他首次提笔就得奖的代表作《且听风吟》，以一场回忆为开始的故事，在邂逅一个小女孩之后，若隐若现的爱情和无疾而终的结果，讲透了青春时代里的无奈与迷茫，也体现了人性对感情最初善良的一面。</p><p>也许，青春时代的爱情是最纯粹的，也是最浪漫和不掺杂任何杂念的，一个男孩真正动了心之后，是不会以任何方式伤害女孩的。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/imageafd7f6c59f1e9898.png" alt="" /></p></div><h2 id="1、不会趁机占有。">1、不会趁机占有。</h2><p>《且听风吟》里，男主在酒吧里邂逅了喝得烂醉如泥的女主。</p><p>这是一个左手没有小指的少女，那晚，她的心情差到了极点，试图用酒精麻痹自己，恰巧遇到了正义的男主。</p><p>出于怜爱之心，男主大费周章地将女主送回了家。</p><p>好人做到底的男主，让女主安全着床后没有马上离去，而是开始了无言的守护。</p><p>女主不省人事地在酣睡，不自觉中脱掉了自己的衣服，而男主，自始至终守护在身边，没有任何非分之想，也没有做什么出格的事。</p><p>等到第二天醒来，女主看着赤裸的自己，以为被男主占了便宜，骂了男主。</p><p>但男主解释了一番后，便不再理会了，他知道，清者自清。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/15/image.png" alt="" /></p><p>对于女主，男主是有好感的，但他没有选择趁机占有，这样的行为，才是君子作风。</p><p>每个人都会有情绪低落的时刻，而去酒吧放松也是解压的一种方式，可在生活中，大部分女孩子根本不敢这么做，因为一旦被酒精弄迷糊了，就有可能被坏男孩占了便宜。</p><p>而书中的男主，纵然对女孩有好感，也没有伺机而动，这样的行为，不免让他的喜欢上升了一个档次。</p><p><b>喜欢是占有，爱是保护。</b></p><p><b>一个深爱你的男人，懂得保护脆弱的你，懂得在你需要的时候，给予守护和陪伴，这样的男人，才是值得托付终身的。</b></p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image9d205a4f5df770ba.png" alt="" /></p><h2 id="2、愿意把选择权交给你。">2、愿意把选择权交给你。</h2><p>《且听风吟》里，在和女主分别后，男主开启了疯狂的想念模式。</p><p>那一夜的邂逅，在他心里埋下了爱情的种子，却没有机会让它生根发芽，因为他连女孩叫什么都不知道。</p><p>百无聊赖之际，男孩去一家唱片店挑选歌曲，令人意外的是，女主就是唱片店的售卖员。</p><p>男主喜出望外，邀约女主一起吃饭。</p><p>但因为之前的误会，女主有点不情愿，而男主在看出了女主的为难之后，并没有强迫，他把吃饭的选择权交给了女主。</p><p>这一举动很是暖心。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/imaged56e59c7d3babf99.png" alt="" /></p><p>现实中，很少有男孩子懂得照顾喜欢的人的意愿，只习惯把自己的想法强加在爱人身上。</p><p>而男主，却把选择权交给了女主，从内心深处尊重女主的意愿。</p><p>也是他的尊重，赢得了女主的好感，最终，女主主动邀请他，和他共进晚餐，两人的感情更近了一步。</p><p>尊重一个人的意愿，是爱情里最基本的常识，却也是最难做到的一点。</p><p><b>大部分的男孩，都喜欢用自己的观念定义两个人相处方式，不注重对方意愿，不在乎对方感受；殊不知，细节成就爱情，感情也败给细节。</b></p><p>每个女孩都希望在爱情里有一点选择的独立空间，可大多数的女孩都失望了。</p><p>所以在感情里，遇到一个会把选择权交给你的男孩，一定要懂得珍惜，因为那个人，才是用心爱你的人。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image6cadacf86215f7e1.png" alt="" /></p><h2 id="3、尊重彼此的选择。">3、尊重彼此的选择。</h2><p>村上春树并没有在《且听风吟》里留下有情人终成眷属的完美结局。</p><p>这段真挚而美好的感情只存在了18天，18天后，女主离开了男主的生活，从此，男主再也没有见过女孩。</p><p>他等待过女孩，也期待过两人的重逢，可始终都没有等到。最后，男主将这份爱，埋藏于心中，尘封于记忆，带着美好的回忆，走向了余生。</p><p>不是所有的爱情，都一定要占为己有；驻足于回忆的感情，更加弥足珍贵。</p><p>原来，在感情里，相爱不一定能相守，相守不一定能相伴一辈子。正如作家周国平曾说：“爱的价值在于它自身，而不在于它的结果。”<p><p>生活有太多不确定性，有些人，注定只是彼此生命中的过客。</p><p>既然没有能力决定两个人的幸福，不如尊重彼此的选择，给对方留下一句美好的祝福，给自己一个重新开始的可能。</p><p>爱情，不一定要相守才美好；留在回忆里的爱人，也值得缅怀一生。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/imageff5767fd16acdd2c.png" alt="" /></p>]]></content>
    
    
    <summary type="html">??你会懂一个男人最高级的爱</summary>
    
    
    
    <category term="阅读" scheme="https://www.fomal.cc/categories/%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="书籍" scheme="https://www.fomal.cc/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>《活着》</title>
    <link href="https://www.fomal.cc/posts/4.html"/>
    <id>https://www.fomal.cc/posts/4.html</id>
    <published>2023-09-09T10:19:03.000Z</published>
    <updated>2023-09-09T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size="4px"><b>导读 📝</b></font></p><p>身处荒诞的世界，每个人都该读读余华。</p><p>余华的代表作《活着》风靡全球，打动一代又一代读者。</p><p>生命不能承受之轻，能接受之痛，愿我们都能从中找到力量。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/10/image5613326d3feb6eb4.png" alt="" /></p><p>作家余华说：</p><p>“人是为活着本身而活着的，而不是为了活着之外的任何事物所活着。”</p><p>《活着》的主人公徐福贵，少年时赌光家产，气死父亲；中年丧子又丧妻，老年时又失去了唯一的外孙。</p><p>然而这一切不幸，并没有让他倒下。</p><p>他在承受了巨大的痛苦之后，学会了坚强面对一切，活出了生命应有的深度和厚度。</p><p>读完《活着》，你会发现韧性是徐福贵的人生底色。</p><p>正是这份韧性承载着他的使命，决定了他能走多远。</p></div><h2 id="1-韧性，是认清现实后的复原力">1.韧性，是认清现实后的复原力</h2><p>徐老爷有一百多亩田地，是方圆几十里的大户。</p><p>福贵是他唯一的独苗，爷俩儿是远近闻名的阔老爷和阔少爷。</p><p>徐老爷为了让福贵好好读书，还专门给他请了私塾先生。</p><p>可他天生不是读书的那块料，先生让他念书时，他居然狂妄地对先生说：“好好听着，爹给你念一段。”</p><p>私塾先生被他气得半死，忍不住在徐老爷面前告状：“你家少爷长大了准能当个二流子。”</p><p>没想到，老先生一语成齑。</p><p>长大后的福贵，吃喝嫖样样俱全，后来他还迷上了赌博。</p><p>一开始赌输了，他就会偷母亲、老婆的首饰去还债。后来他嫌麻烦，干脆开始赊账。</p><p>这一赊账，他就不清楚自己究竟输了多少。而且他还天真地认为，能从赌场赢回徐老爷年轻时输掉的家产。</p><p>直到有一天，开赌局的龙二不再让他赊账。他才知道自己不仅输光了家里的一百多亩田地，还有家产。</p><p>福贵像生了一场大病，他脸色苍白，跌跌撞撞地回到家里。</p><p>徐老爷得知这个消息，没过多久就被气死了。怀着身孕的家珍，也被他的老丈人接回城里去。</p><p>原本幸福的一家人被弄得七零八散，而造成这一悲剧的根源就是福贵的赌博。</p><p>福贵一家人搬到茅草屋去居住，年迈的母亲为了生计挎着篮子、扭着小脚去田里劳作，还有年幼的女儿凤霞跟着他挨饿受苦。</p><p>一向在浑浑噩噩中度日的福贵，他的心突然被什么东西刺了一下，很疼很疼。</p><p>福贵对自己说：“我想想再不能像从前那样过日子，我得养活我娘和凤霞。”</p><p>他的觉醒就在一瞬间，唤醒他的是深植于内心深处的韧性，也可以说是他与生俱来的复原力。</p><p>是的，人生的道路不会一帆风顺，必然会伴随着挫折、磨难。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/10/image5b1c7894dfc53ac6.png" alt="" /></p><p>如果我们能在考验中清醒找到自己的定位，重新开始，才会立于不败之地。</p><p>有句话说得好：</p><p>“具有复原力的人，能够在面临困境时不抱怨，并且迅速平复内心的焦躁不安，从容地面对现实，灵活应对。”</p><p>由此可见，复原力是一个人迅速走向成熟，承担责任的一种体现。</p><p>韧性，是面对困境的坚忍不拔</p><h2 id="2-心之所向，素履以往。">2.心之所向，素履以往。</h2><p>福贵勇敢地迈出了行动的第一步，他想凭借自己的双手养活母亲和女儿。</p><p>很快，他从龙二手里租来了五亩地。</p><p>对于从小娇生惯养，没有干过农活的他来说，这项工作难度可不小。</p><p>为了让庄稼赶上播种季节，有个好收成。</p><p>他常常起早贪黑，有时手脚擦破皮流血了，他就把泥巴糊到伤口处加速愈合。</p><p>这样的日子很苦很累，福贵却睡得非常踏实。他甚至幻想着，老徐家还会慢慢发达起来。</p><p>空闲时，徐福贵会惦记家珍和她肚子里的孩子。在忐忑不安的等待中，家珍带着儿子有庆回来了。</p><p>福贵看到家珍回来，非常开心。这回，他知道心疼家珍了，脏活、累活他都抢着干，这个家正在朝着好的方向去发展。<p>然而命运的走向，从来都是不以人的意志为转移。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/10/image1821714d105e4f05.png" alt="" /></p><p>娘病了，福贵去城里请郎中。阴差阳错，却被国军抓了壮丁。</p><p>当壮丁的日子里，他几次与死神擦肩而过。那时支撑着他活下去的唯一信念就是回家。</p><p>两年后，福贵回到家里时，娘已离世，凤霞也在一次重病中变成了聋哑女孩。</p><p>面对这一切变故，福贵没有任何怨言，而是坦然接受。</p><p>因为福贵经历战争的考验，激发了他与生俱来的韧性，还有他对生活坚忍不拔的毅力。他相信一切都会好起来。</p><p>当福贵看到贪婪的龙二被枪毙后，他更是对未来充满了信心。他对自己说，这下可要好好活了。</p><p> “向着长期的目标，坚持自己的激情，即便经历失败，依然能够坚持不懈地努力下去，这种品质就叫做坚毅。”</p><p>福贵正是凭借着这份坚持和毅力，承受了常人所不能承受的苦难，走出了属于自己的那份天地。</p><p>因为他坚信只有好好活着，才是人生最大的赢家。</p><h2 id="3-韧性，是历经磨难的云淡风轻">3.韧性，是历经磨难的云淡风轻</h2><p>清贫的日子里，福贵一家人其乐融融。<p>转眼间，凤霞已是大姑娘，出落得亭亭玉立，有庆也到了读书的年龄。</p><p>有庆是个懂事的孩子，他不仅帮衬着福贵干家务活儿，他还因为长跑成绩优秀，给家里挣来了荣誉。</p><p>看似平静的生活，实际上是暗流汹涌。</p><p>县长的女人生孩子大出血，学校组织孩子们去献血。有庆的血型最匹配，谁知下手不知轻重的医生，抽干了有庆的血。</p><p>福贵想不明白，早上还是活蹦乱跳的儿子，到了晚上就变成一具没有温度的躯体。</p><p>福贵的心在滴血，深入骨髓的痛撕扯着他，连带着身上的每寸肌肤。</p><p>有庆走了，福贵认为得了软骨病的家珍肯定经受不住打击，也会离他而去。</p><p>就在所有人对家珍的病不抱任何希望时，家珍居然奇迹般的挺了过来。</p><p>凤霞也嫁给了城里的搬运工二喜。二喜长得很一般，对凤霞却是实打实地好。</p><p>没过多久，凤霞怀孕的好消息给这个多灾多难的家庭带来了一丝丝喜悦。</p><p>“十月怀胎，一朝分娩。”在一个雪下得很大的日子里，凤霞生下了儿子。</p><p>谁知福贵前脚刚走，凤霞就大出血，不到天黑就断了气。</p><p>家珍给凤霞的儿子取名——苦根。凤霞走后不到三个月，家珍也走了。</p><p>福贵只有二喜和苦根两个亲人了。二喜既当爹又当妈，照看苦根很辛苦。</p><p>在苦根四岁那年，二喜被两排水泥板夹死了。</p><p>福贵已经没有眼泪了，他已经被生活磨平了棱角。</p><p>面对亲人一个个的离去，他已经习惯了面对。</p><p>他对自己说，只要有苦根在比什么都强，香火还会往下传，这日子还得好好过下去。</p><p>苦根是他的命根子，更是他希望的拐杖。福贵虽然很累，可是心里很高兴。有了苦根，他活着就有了奔头。</p><p>看着苦根一天比一天懂事，福贵睡觉都能咧着嘴笑醒。</p><p>就在福贵对未来充满希望时，苦根却因吃炒豆子撑死了。这时的福贵，已经不会哭了。</p><p>他的眼泪流在了心底，化为应对生活的勇气。</p><p> 尼采说：</p><p>“凡杀不死我的，必将让我更强大。”</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/10/image42d3586c40a57402.png" alt="" /></p><p>福贵痛定思痛，他深知要想活下去，就必须承受这一切。</p><p>在苦根死后的第二年，福贵买了一头和他一样老的牛。</p><p>他给老牛取名叫福贵。他每天都会和老牛像知心朋友一样，说说话，唠唠家常。</p><p>有时，他和别人谈起他所经历的过往，也是不悲不喜，淡定从容。</p><p>作家白落梅说，走过平湖烟雨，岁月山河，那些历尽劫数，尝遍百味的人，会更加生动而干净。</p><p>福贵就是这样的人，苦难让他学会面对，让他淡定从容。</p><p>他的生命有了韧性，他的人生更加厚重。</p>]]></content>
    
    
    <summary type="html">🥧心理韧性，决定了一个人能走多远</summary>
    
    
    
    <category term="阅读" scheme="https://www.fomal.cc/categories/%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="书籍" scheme="https://www.fomal.cc/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>《天黑以后》</title>
    <link href="https://www.fomal.cc/posts/2.html"/>
    <id>https://www.fomal.cc/posts/2.html</id>
    <published>2023-08-15T10:40:03.000Z</published>
    <updated>2023-08-15T10:40:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size="4px"><b>导读 📝</b></font></p><p>《天黑以后》讲述了入夜后的生活，用真实又无奈的心路历程，解开了烦恼的根源，让人明白，若想从心灵的伤害中解脱，唯有先面对自己的痛苦。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/imagee81cf66452274d68.png" alt="" /></p><p>烦恼，是每个人有的，它像影子一样，如影随形。</p><p>以前的时代，电子设备还没有普及的时候，亲朋好友聚在一起聊聊天，烦恼好像就能得到释放；可如今，越来越多的高科技方便了生活，却也阻碍了人们的沟通。</p><p>于是乎，大部分的人在白天里光鲜亮丽，在夜晚间黯然神伤，到处寻找鸡汤试图安慰自己受伤的心灵，却也抑郁的情绪贯穿始终。</p><p>其实，说到底，是没有学会与自己和解。而《天黑以后》这本书，精准地表达了人们的困惑，让读者了解到：原来做个开心的人，也没那么难。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/imageef274f2aa9608d63.png" alt="" /></p></div><h2 id="1、人人都有不同的战场。">1、人人都有不同的战场。</h2><p>《天黑以后》是日本作家村上春树迈向新小说的标志性杰作，讲述了冬日，东京，深夜11点到清晨6点的故事。</p><p>19岁的玛丽，是外语大学里学中文的学生，她有着与众不同之处，那就是“身为日本人，讲中国话的次数多于讲日本话。”</p><p>同时，她也是个双面人物，外表高傲，内心自卑，有着不为人知的烦恼，对生活和周围的事物模棱两可。</p><p>她与同在屋檐下的姐姐爱丽从来没有过推至心腹地谈心交意，也从来没有过一次争吵与矛盾，各过各的的生活，各自思想。</p><p>书中有这么一句话：</p><blockquote><p>“人人都有不同的战场。”</p></blockquote><p>我想玛丽和爱丽姐妹俩人便是如此各自面对着战场硝烟。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image073c6c44e175599d.png" alt="" /></p><p>姐姐爱丽长得美丽动人，初中上电视节目，大学读贵族大学，在他人眼里这便是所说的“别人家的孩子”的标准。</p><p>可是在这光鲜亮丽的外表之下，却有难以言说的苦楚：过敏症，药物依赖症，以及一些不便对人提及的个人问题。</p><p>各自的内心战争便是如此，每个人都有自己的黑夜，而别人却总是只看见她的光芒四射的晴天。说不出口的秘密，是一场发酵的情绪，随时会在黑夜里崩溃瓦解。</p><p>所以，与人洽谈和沟通，推心置腹地交流，才有可能获得内心的宁静。</p><p>可大多数的人，包括玛丽和爱丽，都若无其事地将心事掩埋在心底，任由情绪泛滥。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image6da25e190b0a7b6d.png" alt="" /></p><p>最后，姐姐爱丽在这场黑暗中，进入了长达两个月的无休无止、无缘无故地“长眠”，她用长眠来对抗她的烦恼对抗那无尽黑暗。</p><p>面对姐姐无休无止地昏睡，无法忍受的玛丽离开了家，去餐饮馆看书抽烟，打发时间，她用彻夜不眠来排遣烦恼，试图在这一夜之旅中寻找心灵的安慰。</p><p>玛丽在和与熏、蟋蟀等人一起救助中国女孩的过程中，渐渐地向他们说出自己的心事，最终解开心结。</p><p>原来“恶”只是困境的一种出口，他们心底善良并没有“恶”，只是困境让“恶”给逃出牢笼肆虐那些心中硝烟战场的人们罢了。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image2a794954b44642fc.png" alt="" /></p><h2 id="2、每个人都有自己的弱点">2、每个人都有自己的弱点</h2><p>生活中，有太多的人，戴着虚伪的面具生活，用否定的语气拒绝着自己的懦弱，伪装自己快乐幸福，却把所有的狼狈都压抑在心底。</p><p>这么做的结果，并不能得到救赎，反而会郁郁寡欢，更有甚者，还会患上抑郁症。</p><p>生活即使再不容易，也要城市的面对自己的心，面对自己内心那份咆哮怒吼的另一面，然后找到解决的办法。</p><p>唯有如此，才能在黑夜里奋力前行。</p><p>在书中，不止爱丽与玛丽姐妹俩，百川表面上过着波澜不惊的规律生活，其实他努力压抑自己的需求、欲望、情绪。</p><p>在他把那个女孩打得遍体鳞伤并拿走她的衣物时，这一阴暗且疯狂的自己连他都不认识了，原来“黑暗”到来之时才真正地明白自己内心的波涛汹涌。</p><p>那些私人的情绪或秘密就像浓郁的黑夜，透不进日光。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image6968224526161673.png" alt="" /></p><p>是啊，每个人都有自己的烦恼，每个人都有自己的弱点。</p><p>但细细思来，我们都应该要正确地认识自己，并不只是光明的那个自己，也应该有黑暗下的那个自己。</p><p>当我们顿悟了与自己运用非暴力沟通交流内心深处时，我们就不会害怕黑暗的到来，从而具有自我疗伤，自我认知的意味。</p><p>若因为逃避黑暗，而不断地变换自己的工作生活环境，内心的不安与害怕在黑夜来临时开始发酵，平静也就渐行渐远。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image280c55b663f4e829.png" alt="" /></p><h2 id="3、要学会与自己和解">3、要学会与自己和解</h2><p>刘若英曾说过：“人这一生终究要学会与自己和解。”</p><p>我们赢过了漂泊，跑赢的时间，分辨了黑白，也要学会接受这个黑夜，虽说白天之光岂说黑夜之深，但当太阳照耀时才叫光芒万丈。</p><p>每个人，都独自怀有各种各样的烦恼，无言呻吟，无法顺利前行需要帮助，需要像白天那样光明的照耀。</p><p>每个人都并非无病呻吟，村上春树的笔法清淡而又浓郁，在他的笔下，每一个人都用自己的一言一行的烦恼。</p><p>或许人与人之间的交流，和自己与内心的交流，才能从这无尽黑暗中找到灯火，会发现爱与恶并非对立；只是黑暗让恶有了出口，但并不妨碍爱的存在，于是表达成为了渡过黑暗的舟，和解成为了桨。<p><p>在书里，村上春树站在高桥的角度说：</p><blockquote><p>“一个人一生中只要做过一次孤儿，那他到死都是孤儿。”</p></blockquote><p>人生就是从今天走向明天，我们只需平淡地活下去，我们慢慢走路，多多喝水。</p><p>书中的爱丽最终还是想明白了，她抱住了躺在床上长眠的姐姐，她们相互传递身体的暖意，她也满怀信心地等着姐姐的苏醒。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image55a75f07137432c3.png" alt="" /></p><p>在书里，有这么一句话：</p><blockquote><p>“新的一天已经迫在眉睫，而旧的一天却拖拽着沉重的衣裾有未离开。”</p></blockquote><p>这对应了现代人每到晚上就抑郁难过的心态，是因为旧的包袱里情绪在泛滥，过去的伤害如影随形，只能伪装坚强，用力挤出笑容，其实撕开伪装，谁都过得不快乐。</p><p>或许每个人遇到的烦恼并不一样，但我们需要的是相互倾述、相互理解、相互帮助，新的一天就要到来，无论过去的黑暗多么不堪，我们终将冲破黑暗迎来光明。</p><p>人类的双手为何为双，因为一只手握现在另一只手握未来，他们终在黎明到来的那一刻将清晨崭新的光芒从容地膨胀开。</p><p>我们若迎来了黑暗，那便是光明到来前的预兆。</p>]]></content>
    
    
    <summary type="html">🥧解决成长的烦恼，只需要做对一件事</summary>
    
    
    
    <category term="阅读" scheme="https://www.fomal.cc/categories/%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="书籍" scheme="https://www.fomal.cc/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>《云边有个小卖部》</title>
    <link href="https://www.fomal.cc/posts/1.html"/>
    <id>https://www.fomal.cc/posts/1.html</id>
    <published>2023-08-09T10:19:03.000Z</published>
    <updated>2023-08-09T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size="4px"><b>导读 📝</b></font></p><p>张嘉佳作品《云边有个小卖部》。云边镇的刘十三，从小与开小卖部的外婆王莺莺相依为命。刘十三，各方面都很平凡，幸运的是，在他失意的时候，总有在意他的人陪伴在身边。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image.png" alt="" /></p><p>总有那么一些时刻，我们爱的人会与我们不辞而别，爱我们的人会离我们而去，互相陪伴的人会突然失散。</p><p>历经世事沧桑，曾经无数次想逃离的故乡，不管最终是否重新回去，都会在人生中留下不可磨灭的印记。</p><p>《云边有个小卖部》，云边镇的刘十三，各方面都很平凡，幸运的是，在他失意的时候，总有在意他的人陪伴在身边。</p><p>在这个世界上，活得轰轰烈烈的人终归是极少数，大多数的人，平凡如你我，简简单单的生活，从年少时的好好学习，到后来埋头苦读迎战高考，再到后来削尖脑袋般地找工作，之后又兢兢业业的朝九晚五甚至开启996的工作模式。从校园时代遇到怦然心动的人，到后来在挣扎、眼泪和痛苦中分开，最后遇到携手步入婚姻的人。</p><p><b>我们都很平凡，但平凡的你我，身边也会有这样一个人，TA也平凡，但TA犹如明亮的光，温暖着我们孤独的心，也照亮着我们的人生。平凡如你我，也会不经意间成为一束光，温暖着别人，照亮着别人。</b></p><p>犹如刘十三的外婆王莺莺，犹如刘十三。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image54f8458af0bb9e0a.png" alt="" /></p></div><h2 id="1、笔记本知道一切心事。">1、笔记本知道一切心事。</h2><p>刘十三，像许许多多的小镇青年一样，计划好好学习，渴望上清华北大，远离故乡，看看大城市是否真的比院子里的桃树还美，想去大城市工作生活。</p><p>当同龄人都在娱乐玩耍时，刘十三自律地沉迷于知识的王国。</p><p>刘十三有个笔记本，记下的都是自己的计划。</p><p>刘十三预习复习补习，努力学习，高考分数并没有如愿，刘十三明白了：很多事情，不是仅靠计划、毅力就能做到。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image3034204124edaada.png" alt="" /></p><p>年少时，每个人都有一个笔记本，或有形或无形，里面收藏着所有的心事。</p><p>起初是一项又一项必须完成的任务，随着定下的任务越来越难以完成，就变成了自己一个又一个的愿望，不是所有的愿望都能实现，我们渐渐接受了现实。</p><p>我以前也认为，写下的每一项目标都应该完成，不达标的时候总会沮丧、自我怀疑，后来才明白，不能总是执着于“没有打钩”的事项，那些“被打钩”的事项，是自己踏踏实实付出、没有虚度时光的证明，落笔写下每一个目标的瞬间都是极其郑重认真的。</p><p>翻看一路走来的证据，那些都是自己一个人默默忍受的救赎。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image2ea225aeb42c7999.png" alt="" /></p><h2 id="2、没有放不下的人。">2、没有放不下的人。</h2><p>刘十三大学时喜欢的女生是牡丹。刘十三明白爱情必须给予，可他能拿得出手的，只有尚未到来的未来。</p><p>刘十三一直被蒙在鼓里，当了牡丹两年有名无实的男朋友，牡丹真正的男友另有他人。</p><p>失去爱情，刘十三偶尔还是会想起牡丹。刘十三明白的，牡丹不爱刘十三。</p><p>分开后，刘十三很多次想给牡丹打电话，但都忍住了，最后终于拨通时才知是空号。</p><p>刘十三恍惚时想，他拼尽全力，不过是在重复等待，他本可以发现她并不爱他的事实，等待不能称作努力。</p><p>刘十三由始至终没有埋怨过牡丹。有一天，刘十三突然发现，自己已经不知上次想念牡丹是什么时候了。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image9930ee262d7aefc0.png" alt="" /></p><p>“找一个爱你的人结婚，幸福生活”是多少人的憧憬。在一无所有的年纪，遇上了以为可以携手一生的人，而那个你愿意为其倾尽全力、付出所有的人，最终还是与你分开了。</p><p>过来人会告诉你：爱情终究敌不过现实。可我总认为，<b>千万个分开的理由，归根到底都是因为不够爱，“现实”不过是“不够爱”的一个表面。</b></p><p>你说你要去追求梦想了，或许猴年马月都不可能功成名就，你让对方不要等了，你怕耽误对方的大好前程，可是你有没有想过，对方的梦想里面，恰恰就包含了你。</p><p>你说你不够优秀，给不了对方想要的生活，对方如你所愿和你分手了，你想果然又是一个现实的人，可是你有没有想过，对方早就准备好并肩作战，是你自我放弃的态度，令对方一次又一次感到失望。</p><p>你说你要求不多，然而你总是为对方偶尔的忽略感到不满意，可是你有没有想过，对方已经在自己的能力范围内，尽力做到最好了。</p><p><b>幸好，分手时的痛彻心扉，最终会被时间慢慢治愈，没有放不下的人。缓缓跳动的心，没有死，却不再轻易心动了，不是因为不再相信爱情，而是更加清楚自己想要的是什么样的爱情。</b></p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image391c255f1a6d2e61.png" alt="" /></p><h2 id="3、你再普通，也有人爱你。">3、你再普通，也有人爱你。</h2><blockquote><p>舍友智哥对刘十三的印象：“智哥觉得此人虽然无聊，但脾气甚好。后面一项优点随着熟悉变成了缺点，现在想来，如果想要这样的朋友，只要到天桥往下望，行走的全是刘十三。”</p></blockquote><p>刘十三大学补考、重修都失败，导师帮他争取学位证，千辛万苦总算毕业了。</p><p>刘十三找到了一份卖保险的工作，试用期一事无成，业绩单经常倒数第一。</p><p>刘十三不想让单位领导和同事冷嘲热讽，信誓旦旦立下了卖出一千零一张保单的目标。</p><p>程霜，小学四年级时在云边镇第一次和刘十三相遇，一个得病随时会死去的女孩。</p><p>在刘十三失恋时重逢，鼓励刘十三，与刘十三结伴打车一百六十公里去找牡丹；听到刘十三的保单目标，程霜没有打击他这是一个难于登天的任务，而是出谋划策、收集资料、整理情报，帮助刘十三一步步向一千零一张保单靠近<p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image968ef14f591da3d8.png" alt="" /></p><p>在程霜心中，云边镇最好的是刘十三，童年时，总是给“打劫”的小程霜带东西。</p><p>哪怕刘十三“又懒，又傻，脾气怪，说话难听，心肠软，腿短，没魄力，也就作文写得好点，土了巴叽”，可“这么差劲，一无是处”的刘十三，程霜就是喜欢。</p><blockquote><p>程霜最后留给刘十三几行字：“生命是有光的。在我熄灭以前，能够照亮你一点，就是我所有能做的了。我爱你，你要记得我。”</p></blockquote><p>天赋异禀的幻想，每个人都有过；一鸣惊人、羡煞旁人的美梦，每个人都有过。大家都想成为天才，成为举世无双的存在。</p><p>事实是，埋藏在心里的自卑，时不时就会出现：这么普通的我，真的有人会发自内心爱我吗？</p><p>主角永远只有一个，但从来没有一个剧本，能少得了配角。你再普通，也有人爱你。你再普通，也值得被爱。如果你感受不到被爱，可能只是因为你未曾察觉，那些隐藏的爱。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/imagee4003ca21dcffc5c.png" alt="" /></p><h2 id="4、永远的山，永远的海。">4、永远的山，永远的海。</h2><p>刘十三原本希望大学毕业后，说服外婆王莺莺盘掉铺子，他到大城市付个首付，每天带王莺莺吃鸡蛋灌饼，让王莺莺使用电动麻将桌。</p><p>得知刘十三失恋失业悲伤至极，七十岁的王莺莺，跑到刘十三的城市，灌醉刘十三，一来一去两百公里，开着拖拉机，将七八十斤的行李和一百三的刘十三，拖回了云边镇。</p><p>颠簸一路，喝醉的刘十三一直吐，王莺莺时不时下车替他擦。“艰难，辛苦。”王莺莺的自我感慨，不过是心疼自己的外孙。</p><p><img src="https://tuchuang.voooe.cn/image/z8eKehttps://tuchuang.voooe.cn/image/z8vag" alt="" /></p><p>面对镇里三姑六婆的盘问，王莺莺眉飞色舞，把刘十三塑造成大城市精英的形象。</p><p>刘十三执意要重回城市，王莺莺说出了心里话：“从小到大，你都要去城里，我也没拦着，但你总得让我放心啊……”</p><p>王莺莺厨艺了得，经常做许多好吃的：豇豆炒肉丝、月饼、红烧鲫鱼、蹄髈烧面筋、上汤苋菜、宫保虾球、葱油蛏子、冬瓜排骨汤……刘十三以前上学时，吃泡面的时候，就会放一个王莺莺准备的蛋饺。</p><blockquote><p>刘十三认为自己活得很没意义，想到的都得不到，王莺莺义正辞严：“你怎么能乱想！四肢健全，受过教育，我们家又不是穷到吃不上饭，怎么能说死字？年轻的时候就要走得远远的，吃好多苦，你怕什么！家里有人，我老太婆在，你就有家的，闯得出去，回得了家，才是硬邦邦的活法！”</p></blockquote><p>生老病死，外婆还是离刘十三而去了，最后对刘十三说的话都留在录音笔里。</p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image75a480e8b61cfdac.png" alt="" /></p><p>刘十三的成长离不开外婆的关怀与疼爱，尽管刘十三还来不及给外婆尽孝心，外婆就已离去，可刘十三也一直是外婆活着的希望啊。</p><p>如果说外婆是刘十三永远的靠山，那么刘十三就是外婆心里永远牵挂的海。</p><p>刘十三和外婆，彼此都是彼此的曙光。</p><p><b>成长就是一个逐渐失去、逐渐告别的过程，那些曾经以为过不去的坎儿，日后重新说起，不过是轻描淡写的两三句。</b></p><p><b>平凡如你我，在不知不觉的某个时刻，我们的存在，突然就照亮了另一个人的生活，因为悲伤不能埋没希望。</b></p><p><img src="https://tuchuang.voooe.cn/images/2024/05/08/image54ab2177a076ac4f.png" alt="" /></p>]]></content>
    
    
    <summary type="html">🥧平凡如你我，也终会照亮别人的人生</summary>
    
    
    
    <category term="阅读" scheme="https://www.fomal.cc/categories/%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="书籍" scheme="https://www.fomal.cc/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript tsc 命令行编译器</title>
    <link href="https://www.fomal.cc/posts/32.html"/>
    <id>https://www.fomal.cc/posts/32.html</id>
    <published>2023-06-26T10:50:00.000Z</published>
    <updated>2023-06-26T10:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>tsc 命令行编译器</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><h2 id="简介">简介 <a href="about:blank#%E7%AE%80%E4%BB%8B">#</a></h2><p>tsc 是 TypeScript 官方的命令行编译器，用来检查代码，并将其编译成 JavaScript 代码。</p><p>tsc 默认使用当前目录下的配置文件<code>tsconfig.json</code>，但也可以接受独立的命令行参数。命令行参数会覆盖<code>tsconfig.json</code>，比如命令行指定了所要编译的文件，那么 tsc 就会忽略<code>tsconfig.json</code>的<code>files</code>属性。</p><p>tsc 的基本用法如下。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 tsconfig.json 的配置</span></span><br><span class="line"><span class="variable">$ </span>tsc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只编译 index.ts</span></span><br><span class="line"><span class="variable">$ </span>tsc index.ts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 src 目录的所有 .ts 文件</span></span><br><span class="line"><span class="variable">$ </span>tsc src/*.ts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定编译配置文件</span></span><br><span class="line"><span class="variable">$ </span>tsc --project tsconfig.production.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只生成类型声明文件，不编译出 JS 文件</span></span><br><span class="line"><span class="variable">$ </span>tsc index.js --declaration --emitDeclarationOnly</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个 TS 文件编译成单个 JS 文件</span></span><br><span class="line"><span class="variable">$ </span>tsc app.ts util.ts --target esnext --outfile index.js</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="命令行参数">命令行参数 <a href="about:blank#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0">#</a></h2><p>tsc 的命令行参数，大部分与 tsconfig.json 的属性一一对应。</p><p>下面只是按照首字母排序，简单罗列出主要的一些参数，详细解释可以参考《tsconfig.json 配置文件》一章。</p><p><code>--all</code>：输出所有可用的参数。</p><p><code>--allowJs</code>：允许 TS 脚本加载 JS 模块，编译时将 JS 一起拷贝到输出目录。</p><p><code>--allowUnreachableCode</code>：如果 TS 脚本有不可能运行到的代码，不报错。</p><p><code>--allowUnusedLabels</code>：如果 TS 脚本有没有用到的标签，不报错。</p><p><code>--alwaysStrict</code>：总是在编译产物的头部添加<code>use strict</code>。</p><p><code>--baseUrl</code>：指定非相对位置的模块定位的基准 URL。</p><p><code>--build</code>：启用增量编译。</p><p><code>--checkJs</code>：对 JS 脚本进行类型检查。</p><p><code>--declaration</code>：为 TS 脚本生成一个类型生成文件。</p><p><code>--declarationDir</code>：指定生成的类型声明文件的所在目录。</p><p><code>--declarationMap</code>：为<code>.d.ts</code>文件生成 SourceMap 文件。</p><p><code>--diagnostics</code>：构建后输出编译性能信息。</p><p><code>--emitBOM</code>：在编译输出的 UTF-8 文件头部加上 BOM 标志。</p><p><code>--emitDeclarationOnly</code>：只编译输出类型声明文件，不输出 JS 文件。</p><p><code>--esModuleInterop</code>：更容易使用 import 命令加载 CommonJS 模块。</p><p><code>--exactOptionalPropertyTypes</code>：不允许将可选属性设置为<code>undefined</code>。</p><p><code>--experimentalDecorators</code>：支持早期的装饰器语法。</p><p><code>--explainFiles</code>：输出进行编译的文件信息。</p><p><code>--forceConsistentCasingInFileNames</code>：文件名大小写敏感，默认打开。</p><p><code>--help</code>：输出帮助信息。</p><p><code>--importHelpers</code>：从外部库（比如 tslib）输入辅助函数。</p><p><code>--incremental</code>：启用增量构建。</p><p><code>--init</code>：在当前目录创建一个全新的<code>tsconfig.json</code>文件，里面是预设的设置。</p><p><code>--inlineSourceMap</code>：SourceMap 信息嵌入 JS 文件，而不是生成独立的<code>.js.map</code>文件。</p><p><code>--inlineSources</code>：将 TypeScript 源码作为 SourceMap 嵌入编译出来的 JS 文件。</p><p><code>--isolatedModules</code>：确保每个模块能够独立编译，不依赖其他输入的模块。</p><p><code>--jsx</code>：设置如何处理 JSX 文件。</p><p><code>--lib</code>：设置目标环境需要哪些内置库的类型描述。</p><p><code>--listEmittedFiles</code>：编译后输出编译产物的文件名。</p><p><code>--listFiles</code>：编译过程中，列出读取的文件名。</p><p><code>--listFilesOnly</code>：列出编译所要处理的文件，然后停止编译。</p><p><code>--locale</code>：指定编译时输出的语言，不影响编译结果。</p><p><code>--mapRoot</code>：指定 SourceMap 文件的位置。</p><p><code>--module</code>：指定编译生成的模块格式。</p><p><code>--moduleResolution</code>：指定如何根据模块名找到模块的位置。</p><p><code>--moduleSuffixes</code>：指定模块文件的后缀名。</p><p><code>--newLine</code>：指定编译产物的换行符，可以设为<code>crlf</code>或者<code>lf</code>。</p><p><code>--noEmit</code>：不生成编译产物，只进行类型检查。</p><p><code>--noEmitHelpers</code>：不在编译产物中加入辅助函数。</p><p><code>--noEmitOnError</code>：一旦报错，就停止编译，没有编译产物。</p><p><code>--noFallthroughCasesInSwitch</code>：Switch 结构的<code>case</code>分支必须有终止语句（比如<code>break</code>）。</p><p><code>--noImplicitAny</code>：类型推断只要为<code>any</code>类型就报错。</p><p><code>--noImplicitReturns</code>：函数内部没有显式返回语句（比如<code>return</code>）就报错。</p><p><code>--noImplicitThis</code>：如果<code>this</code>关键字是<code>any</code>类型，就报错。</p><p><code>--noImplicitUseStrict</code>：编译产生的 JS 文件头部不添加<code>use strict</code>语句。</p><p><code>--noResolve</code>：不进行模块定位，除非该模块是由命令行传入。</p><p><code>--noUnusedLocals</code>：如果有未使用的局部变量就报错。</p><p><code>--noUnusedParameters</code>：如果有未使用的函数参数就报错。</p><p><code>--outDir</code>：指定编译产物的存放目录。</p><p><code>--outFile</code>：所有编译产物打包成一个指定文件。</p><p><code>--preserveConstEnums</code>：不将<code>const enum</code>结构在生成的代码中，替换成常量。</p><p><code>--preserveWatchOutput</code>： watch 模式下不清屏。</p><p><code>--pretty</code>：美化显示编译时的终端输出。这是默认值，但是可以关闭<code>--pretty false</code>。</p><p><code>--project</code>（或者<code>-p</code>）：指定编译配置文件，或者该文件所在的目录。</p><p><code>--removeComments</code>：编译结果中移除代码注释。</p><p><code>--resolveJsonModule</code>：允许加载 JSON 文件。</p><p><code>--rootDir</code>：指定加载文件所在的根目录，该目录里面的目录结构会被复制到输出目录。</p><p><code>--rootDirs</code>：允许模块定位时，多个目录被当成一个虚拟目录。</p><p><code>--skipDefaultLibCheck</code>：跳过 TypeScript 内置类型声明文件的类型检查。</p><p><code>--skipLibCheck</code>：跳过<code>.d.ts</code>类型声明文件的类型检查。这样可以加快编译速度。</p><p><code>--showConfig</code>：终端输出编译配置信息，而不进行配置。</p><p><code>--sourcemap</code>：为编译产生的 JS 文件生成 SourceMap 文件（.map 文件）。</p><p><code>--sourceRoot</code>：指定 SourceMap 文件里面的 TypeScript 源码根目录位置。</p><p><code>--strict</code>：打开 TypeScript 严格检查模式。</p><p><code>--strictBindCallApply</code>：bind, call、apply 这三个函数的类型，匹配原始函数。</p><p><code>--strictFunctionTypes</code>：如果函数 B 的参数是函数 A 参数的子类型，那么函数 B 不能替代函数 A。</p><p><code>--strictNullChecks</code>：对<code>null</code>和<code>undefined</code>进行严格类型检查。</p><p><code>--strictPropertyInitialization</code>：类的属性必须进行初始值，但是允许在构造函数里面赋值。</p><p><code>--suppressExcessPropertyErrors</code>：关闭对象字面量的多余参数的报错。</p><p><code>--target</code>：指定编译出来的 JS 代码的版本，TypeScript 还会在编译时自动加入对应的库类型声明文件。</p><p><code>--traceResolution</code>：编译时在终端输出模块解析（moduleResolution）的具体步骤。</p><p><code>--typeRoots</code>：设置类型模块所在的目录，替代默认的<code>node_modules/@types</code>。</p><p><code>--types</code>：设置<code>typeRoots</code>目录下需要包括在编译之中的类型模块。</p><p><code>--version</code>：终端输出 tsc 的版本号。</p><p><code>--watch</code>（或者<code>-w</code>）：进入观察模式，只要文件有修改，就会自动重新编译。</p><p>本文转自 <a href="https://wangdoc.com/typescript/tsc">https://wangdoc.com/typescript/tsc</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">??TypeScript tsc 命令行编译器</summary>
    
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript tsconfig.json</title>
    <link href="https://www.fomal.cc/posts/31.html"/>
    <id>https://www.fomal.cc/posts/31.html</id>
    <published>2023-06-25T10:50:00.000Z</published>
    <updated>2023-06-25T10:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>tsconfig.json</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><h2 id="简介">简介 <a href="about:blank#%E7%AE%80%E4%BB%8B">#</a></h2><p><code>tsconfig.json</code>是 TypeScript 项目的配置文件，放在项目的根目录。反过来说，如果一个目录里面有<code>tsconfig.json</code>，TypeScript 就认为这是项目的根目录。</p><p>如果项目源码是 JavaScript，但是想用 TypeScript 处理，那么配置文件的名字是<code>jsconfig.json</code>，它跟<code>tsconfig</code>的写法是一样的。</p><p><code>tsconfig.json</code>文件主要供<code>tsc</code>编译器使用，它的命令行参数<code>--project</code>或<code>-p</code>可以指定<code>tsconfig.json</code>的位置（目录或文件皆可）。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> tsc <span class="literal">-p</span> ./<span class="built_in">dir</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果不指定配置文件的位置，<code>tsc</code>就会在当前目录下搜索<code>tsconfig.json</code>文件，如果不存在，就到上一级目录搜索，直到找到为止。</p><p><code>tsconfig.json</code>文件的格式，是一个 JSON 对象，最简单的情况可以只放置一个空对象<code>&#123;&#125;</code>。下面是一个示例。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./built&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/**/*&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本章后面会详细介绍<code>tsconfig.json</code>的各个属性，这里简单说一下，上面示例的四个属性的含义。</p><ul><li>include：指定哪些文件需要编译。</li><li>allowJs：指定源目录的 JavaScript 文件是否原样拷贝到编译后的目录。</li><li>outDir：指定编译产物存放的目录。</li><li>target：指定编译产物的 JS 版本。</li></ul><p><code>tsconfig.json</code>文件可以不必手写，使用 tsc 命令的<code>--init</code>参数自动生成。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tsc <span class="comment">--init</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面命令生成的<code>tsconfig.json</code>文件，里面会有一些默认配置。</p><p>你也可以使用别人预先写好的 tsconfig.json 文件，npm 的<code>@tsconfig</code>名称空间下面有很多模块，都是写好的<code>tsconfig.json</code>样本，比如 <code>@tsconfig/recommended</code>和<code>@tsconfig/node16</code>。</p><p>这些模块需要安装，以<code>@tsconfig/deno</code>为例。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>npm install --save-dev <span class="variable">@tsconfig</span>/deno</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="variable">$ </span>yarn add --dev <span class="variable">@tsconfig</span>/deno</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装以后，就可以在<code>tsconfig.json</code>里面引用这个模块，相当于继承它的设置，然后进行扩展。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;@tsconfig/deno/tsconfig.json&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>@tsconfig</code>空间下包含的完整 tsconfig 文件目录，可以查看 <a href="https://github.com/tsconfig/bases/tree/main/bases">GitHub</a>。</p><p><code>tsconfig.json</code>的一级属性并不多，只有很少几个，但是<code>compilerOptions</code>属性有很多二级属性。下面先逐一介绍一级属性，然后再介绍<code>compilerOptions</code>的二级属性，按照首字母排序。</p><h2 id="exclude">exclude <a href="about:blank#exclude">#</a></h2><p><code>exclude</code>属性是一个数组，必须与<code>include</code>属性一起使用，用来从编译列表中去除指定的文件。它也支持使用与<code>include</code>属性相同的通配符。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [<span class="string">&quot;**/*&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;**/*.spec.ts&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="extends">extends <a href="about:blank#extends">#</a></h2><p><code>tsconfig.json</code>可以继承另一个<code>tsconfig.json</code>文件的配置。如果一个项目有多个配置，可以把共同的配置写成<code>tsconfig.base.json</code>，其他的配置文件继承该文件，这样便于维护和修改。</p><p><code>extends</code>属性用来指定所要继承的配置文件。它可以是本地文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../tsconfig.base.json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果<code>extends</code>属性指定的路径不是以<code>./</code>或<code>../</code>开头，那么编译器将在<code>node_modules</code>目录下查找指定的配置文件。</p><p><code>extends</code>属性也可以继承已发布的 npm 模块里面的 tsconfig 文件。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;@tsconfig/node12/tsconfig.json&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>extends</code>指定的<code>tsconfig.json</code>会先加载，然后加载当前的<code>tsconfig.json</code>。如果两者有重名的属性，后者会覆盖前者。</p><h2 id="files">files <a href="about:blank#files">#</a></h2><p><code>files</code>属性指定编译的文件列表，如果其中有一个文件不存在，就会报错。</p><p>它是一个数组，排在前面的文件先编译。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;files&quot;</span>: [<span class="string">&quot;a.ts&quot;</span>, <span class="string">&quot;b.ts&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该属性必须逐一列出文件，不支持文件匹配。如果文件较多，建议使用<code>include</code>和<code>exclude</code>属性。</p><h2 id="include">include <a href="about:blank#include">#</a></h2><p><code>include</code>属性指定所要编译的文件列表，既支持逐一列出文件，也支持通配符。文件位置相对于当前配置文件而定。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [<span class="string">&quot;src/**/*&quot;</span>, <span class="string">&quot;tests/**/*&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>include</code>属性支持三种通配符。</p><ul><li><code>?</code>：指代单个字符</li><li><code>*</code>：指代任意字符，不含路径分隔符</li><li><code>**</code>：指定任意目录层级。</li></ul><p>如果不指定文件后缀名，默认包括<code>.ts</code>、<code>.tsx</code>和<code>.d.ts</code>文件。如果打开了<code>allowJs</code>，那么还包括<code>.js</code>和<code>.jsx</code>。</p><h2 id="references">references <a href="about:blank#references">#</a></h2><p><code>references</code>属性是一个数组，数组成员为对象，适合一个大项目由许多小项目构成的情况，用来设置需要引用的底层项目。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;references&quot;</span>: [</span><br><span class="line">    &#123; <span class="string">&quot;path&quot;</span>: <span class="string">&quot;../pkg1&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;path&quot;</span>: <span class="string">&quot;../pkg2/tsconfig.json&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>references</code>数组成员对象的<code>path</code>属性，既可以是含有文件<code>tsconfig.json</code>的目录，也可以直接是该文件。</p><p>与此同时，引用的底层项目的<code>tsconfig.json</code>必须启用<code>composite</code>属性。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;composite&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="compilerOptions">compilerOptions <a href="about:blank#compileroptions">#</a></h2><p><code>compilerOptions</code>属性用来定制编译行为。这个属性可以省略，这时编译器将使用默认设置。</p><h3 id="allowJs">allowJs <a href="about:blank#allowjs">#</a></h3><p><code>allowJs</code>允许 TypeScript 项目加载 JS 脚本。编译时，也会将 JS 文件，一起拷贝到输出目录。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="alwaysStrict">alwaysStrict <a href="about:blank#alwaysstrict">#</a></h3><p><code>alwaysStrict</code>确保脚本以 ECMAScript 严格模式进行解析，因此脚本头部不用写<code>&quot;use strict&quot;</code>。它的值是一个布尔值，默认为<code>true</code>。</p><h3 id="allowSyntheticDefaultImports">allowSyntheticDefaultImports <a href="about:blank#allowsyntheticdefaultimports">#</a></h3><p><code>allowSyntheticDefaultImports</code>允许<code>import</code>命令默认加载没有<code>default</code>输出的模块。</p><p>比如，打开这个设置，就可以写<code>import React from &quot;react&quot;;</code>，而不是<code>import * as React from &quot;react&quot;;</code>。</p><h3 id="allowUnreachableCode">allowUnreachableCode <a href="about:blank#allowunreachablecode">#</a></h3><p><code>allowUnreachableCode</code>设置是否允许存在不可能执行到的代码。它的值有三种可能。</p><ul><li><code>undefined</code>： 默认值，编辑器显示警告。</li><li><code>true</code>：忽略不可能执行到的代码。</li><li><code>false</code>：编译器报错。</li></ul><h3 id="allowUnusedLabels">allowUnusedLabels <a href="about:blank#allowunusedlabels">#</a></h3><p><code>allowUnusedLabels</code>设置是否允许存在没有用到的代码标签（label）。它的值有三种可能。</p><ul><li><code>undefined</code>： 默认值，编辑器显示警告。</li><li><code>true</code>：忽略没有用到的代码标签。</li><li><code>false</code>：编译器报错。</li></ul><h3 id="baseUrl">baseUrl <a href="about:blank#baseurl">#</a></h3><p><code>baseUrl</code>的值为字符串，指定 TypeScript 项目的基准目录。</p><p>由于默认是以 tsconfig.json 的位置作为基准目录，所以一般情况不需要使用该属性。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>baseUrl</code>为当前目录<code>./</code>。那么，当遇到下面的语句，TypeScript 将以<code>./</code>为起点，寻找<code>hello/world.ts</code>。</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; helloWorld &#125; <span class="keyword">from</span> <span class="string">&quot;hello/world&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="checkJs">checkJs <a href="about:blank#checkjs">#</a></h3><p><code>checkJS</code>设置对 JS 文件同样进行类型检查。打开这个属性，也会自动打开<code>allowJs</code>。它等同于在 JS 脚本的头部添加<code>// @ts-check</code>命令。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="composite">composite <a href="about:blank#composite">#</a></h3><p><code>composite</code>打开某些设置，使得 TypeScript 项目可以进行增量构建，往往跟<code>incremental</code>属性配合使用。</p><h3 id="declaration">declaration <a href="about:blank#declaration">#</a></h3><p><code>declaration</code>设置编译时是否为每个脚本生成类型声明文件<code>.d.ts</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="declarationDir">declarationDir <a href="about:blank#declarationdir">#</a></h3><p><code>declarationDir</code>设置生成的<code>.d.ts</code>文件所在的目录。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;declarationDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./types&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="declarationMap">declarationMap <a href="about:blank#declarationmap">#</a></h3><p><code>declarationMap</code>设置生成<code>.d.ts</code>类型声明文件的同时，还会生成对应的 Source Map 文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;declarationMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="emitBOM">emitBOM <a href="about:blank#emitbom">#</a></h3><p><code>emitBOM</code>设置是否在编译结果的文件头添加字节顺序标志 BOM，默认值是<code>false</code>。</p><h3 id="emitDeclarationOnly">emitDeclarationOnly <a href="about:blank#emitdeclarationonly">#</a></h3><p><code>emitDeclarationOnly</code>设置编译后只生成<code>.d.ts</code>文件，不生成<code>.js</code>文件。</p><h3 id="esModuleInterop">esModuleInterop <a href="about:blank#esmoduleinterop">#</a></h3><p><code>esModuleInterop</code>修复了一些 CommonJS 和 ES6 模块之间的兼容性问题。</p><p>如果<code>module</code>属性为<code>node16</code>或<code>nodenext</code>，则<code>esModuleInterop</code>默认为<code>true</code>，其他情况默认为<code>false</code>。</p><p>打开这个属性，使用<code>import</code>命令加载 CommonJS 模块时，TypeScript 会严格检查兼容性问题是否存在。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span></span><br><span class="line">moment(); <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，根据 ES6 规范，<code>import * as moment</code>里面的<code>moment</code>是一个对象，不能当作函数调用，所以第二行报错了。</p><p>解决方法就是改写上面的语句，改成加载默认接口。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span></span><br><span class="line">moment(); <span class="comment">// 不报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开<code>esModuleInterop</code>以后，如果将上面的代码编译成 CommonJS 模块格式，就会加入一些辅助函数，保证编译后的代码行为正确。</p><p>注意，打开<code>esModuleInterop</code>，将自动打开<code>allowSyntheticDefaultImports</code>。</p><h3 id="exactOptionalPropertyTypes">exactOptionalPropertyTypes <a href="about:blank#exactoptionalpropertytypes">#</a></h3><p><code>exactOptionalPropertyTypes</code>设置可选属性不能赋值为<code>undefined</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开 exactOptionalPropertyTypes</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyObj</span> &#123;</span><br><span class="line">  foo?: <span class="string">&#x27;A&#x27;</span> | <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:<span class="title class_">MyObj</span> = &#123; <span class="attr">foo</span>: <span class="string">&#x27;A&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">foo</span> = <span class="literal">undefined</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>foo</code>是可选属性，打开<code>exactOptionalPropertyTypes</code>以后，该属性就不能显式赋值为<code>undefined</code>。</p><h3 id="forceConsistentCasingInFileNames">forceConsistentCasingInFileNames <a href="about:blank#forceconsistentcasinginfilenames">#</a></h3><p><code>forceConsistentCasingInFileNames</code>设置文件名是否为大小写敏感，默认为<code>true</code>。</p><h3 id="incremental">incremental <a href="about:blank#incremental">#</a></h3><p><code>incremental</code>让 TypeScript 项目构建时产生文件<code>tsbuildinfo</code>，从而完成增量构建。</p><h3 id="inlineSourceMap">inlineSourceMap <a href="about:blank#inlinesourcemap">#</a></h3><p><code>inlineSourceMap</code>设置将 SourceMap 文件写入编译后的 JS 文件中，否则会单独生成一个<code>.js.map</code>文件。</p><h3 id="inlineSources">inlineSources <a href="about:blank#inlinesources">#</a></h3><p><code>inlineSources</code>设置将原始的<code>.ts</code>代码嵌入编译后的 JS 中。</p><p>它要求<code>sourceMap</code>或<code>inlineSourceMap</code>至少打开一个。</p><h3 id="isolatedModules">isolatedModules <a href="about:blank#isolatedmodules">#</a></h3><p><code>isolatedModules</code>设置如果当前 TypeScript 脚本作为单个模块编译，是否会因为缺少其他脚本的类型信息而报错，主要便于非官方的编译工具（比如 Babel）正确编译单个脚本。</p><h3 id="jsx">jsx <a href="about:blank#jsx">#</a></h3><p><code>jsx</code>设置如何处理<code>.tsx</code>文件。它可以取以下五个值。</p><ul><li><code>preserve</code>：保持 jsx 语法不变，输出的文件名为<code>.jsx</code>。</li><li><code>react</code>：将<code>&lt;div /&gt;</code>编译成<code>React.createElement(&quot;div&quot;)</code>，输出的文件名为<code>.js</code>。</li><li><code>react-native</code>：保持 jsx 语法不变，输出的文件后缀名为<code>.js</code>。</li><li><code>react-jsx</code>：将<code>&lt;div /&gt;</code>编译成<code>_jsx(&quot;div&quot;)</code>，输出的文件名为<code>.js</code>。</li><li><code>react-jsxdev</code>：跟<code>react-jsx</code>类似，但是为<code>_jsx()</code>加上更多的开发调试项，输出的文件名为<code>.js</code>。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="lib">lib <a href="about:blank#lib">#</a></h3><p><code>lib</code>值是一个数组，描述项目需要加载的 TypeScript 内置类型描述文件，跟三斜线指令<code>/// &lt;reference lib=&quot;&quot; /&gt;</code>作用相同。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;lib&quot;</span>: [<span class="string">&quot;dom&quot;</span>, <span class="string">&quot;es2021&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>TypeScript 内置的类型描述文件，主要有以下一些，完整的清单可以参考 <a href="https://github.com/microsoft/TypeScript/tree/main/src/lib">TypeScript 源码</a>。</p><ul><li>ES5</li><li>ES2015</li><li>ES6</li><li>ES2016</li><li>ES7</li><li>ES2017</li><li>ES2018</li><li>ES2019</li><li>ES2020</li><li>ES2021</li><li>ES2022</li><li>ESNext</li><li>DOM</li><li>WebWorker</li><li>ScriptHost</li></ul><h3 id="listEmittedFiles">listEmittedFiles <a href="about:blank#listemittedfiles">#</a></h3><p><code>listEmittedFiles</code>设置编译时在终端显示，生成了哪些文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;listEmittedFiles&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="listFiles">listFiles <a href="about:blank#listfiles">#</a></h3><p><code>listFiles</code>设置编译时在终端显示，参与本次编译的文件列表。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;listFiles&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mapRoot">mapRoot <a href="about:blank#maproot">#</a></h3><p><code>mapRoot</code>指定 SourceMap 文件的位置，而不是默认的生成位置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mapRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://my-website.com/debug/sourcemaps/&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="module">module <a href="about:blank#module">#</a></h3><p><code>module</code>指定编译产物的模块格式。它的默认值与<code>target</code>属性有关，如果<code>target</code>是<code>ES3</code>或<code>ES5</code>，它的默认值是<code>commonjs</code>，否则就是<code>ES6/ES2015</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它可以取以下值：none、commonjs、amd、umd、system、es6/es2015、es2020、es2022、esnext、node16、nodenext。</p><h3 id="moduleResolution">moduleResolution <a href="about:blank#moduleresolution">#</a></h3><p><code>moduleResolution</code>确定模块路径的算法，即如何查找模块。它可以取以下四种值。</p><ul><li><code>node</code>：采用 Node.js 的 CommonJS 模块算法。</li><li><code>node16</code>或<code>nodenext</code>：采用 Node.js 的 ECMAScript 模块算法，从 TypeScript 4.7 开始支持。</li><li><code>classic</code>：TypeScript 1.6 之前的算法，新项目不建议使用。</li><li><code>bundler</code>：TypeScript 5.0 新增的选项，表示当前代码会被其他打包器（比如 Webpack、Vite、esbuild、Parcel、rollup、swc）处理，从而放宽加载规则，它要求<code>module</code>设为<code>es2015</code>或更高版本，详见加入该功能的 <a href="https://github.com/microsoft/TypeScript/pull/51669">PR 说明</a>。</li></ul><p>它的默认值与<code>module</code>属性有关，如果<code>module</code>为<code>AMD</code>、<code>UMD</code>、<code>System</code>或<code>ES6/ES2015</code>，默认值为<code>classic</code>；如果<code>module</code>为<code>node16</code>或<code>nodenext</code>，默认值为这两个值；其他情况下,默认值为<code>Node</code>。</p><h3 id="moduleSuffixes">moduleSuffixes <a href="about:blank#modulesuffixes">#</a></h3><p><code>moduleSuffixes</code>指定模块的后缀名。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;moduleSuffixes&quot;</span>: [<span class="string">&quot;.ios&quot;</span>, <span class="string">&quot;.native&quot;</span>, <span class="string">&quot;&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的设置使得 TypeScript 对于语句<code>import * as foo from &quot;./foo&quot;;</code>，会搜索以下脚本<code>./foo.ios.ts</code>、<code>./foo.native.ts</code>和<code>./foo.ts</code>。</p><h3 id="newLine">newLine <a href="about:blank#newline">#</a></h3><p><code>newLine</code>设置换行符为<code>CRLF</code>（Windows）还是<code>LF</code>（Linux）。</p><h3 id="noEmit">noEmit <a href="about:blank#noemit">#</a></h3><p><code>noEmit</code>设置是否产生编译结果。如果不生成，TypeScript 编译就纯粹作为类型检查了。</p><h3 id="noEmitHelpers">noEmitHelpers <a href="about:blank#noemithelpers">#</a></h3><p><code>noEmitHelpers</code>设置在编译结果文件不插入 TypeScript 辅助函数，而是通过外部引入辅助函数来解决，比如 NPM 模块<code>tslib</code>。</p><h3 id="noEmitOnError">noEmitOnError <a href="about:blank#noemitonerror">#</a></h3><p><code>noEmitOnError</code>指定一旦编译报错，就不生成编译产物，默认为<code>false</code>。</p><h3 id="noFallthroughCasesInSwitch">noFallthroughCasesInSwitch <a href="about:blank#nofallthroughcasesinswitch">#</a></h3><p><code>noFallthroughCasesInSwitch</code>设置是否对没有<code>break</code>语句（或者<code>return</code>和<code>throw</code>语句）的 switch 分支报错，即<code>case</code>代码里面必须有终结语句（比如<code>break</code>）。</p><h3 id="noImplicitAny">noImplicitAny <a href="about:blank#noimplicitany">#</a></h3><p><code>noImplicitAny</code>设置当一个表达式没有明确的类型描述、且编译器无法推断出具体类型时，是否允许将它推断为<code>any</code>类型。</p><p>它是一个布尔值，默认为<code>true</code>，即只要推断出<code>any</code>类型就报错。</p><h3 id="noImplicitReturns">noImplicitReturns <a href="about:blank#noimplicitreturns">#</a></h3><p><code>noImplicitReturns</code>设置是否要求函数任何情况下都必须返回一个值，即函数必须有<code>return</code>语句。</p><h3 id="noImplicitThis">noImplicitThis <a href="about:blank#noimplicitthis">#</a></h3><p><code>noImplicitThis</code>设置如果<code>this</code>被推断为<code>any</code>类型是否报错。</p><h3 id="noUnusedLocals">noUnusedLocals <a href="about:blank#nounusedlocals">#</a></h3><p><code>noUnusedLocals</code>设置是否允许未使用的局部变量。</p><h3 id="noUnusedParameters">noUnusedParameters <a href="about:blank#nounusedparameters">#</a></h3><p><code>noUnusedParameters</code>设置是否允许未使用的函数参数。</p><h3 id="outDir">outDir <a href="about:blank#outdir">#</a></h3><p><code>outDir</code>指定编译产物的存放目录。如果不指定，编译出来的<code>.js</code>文件存放在对应的<code>.ts</code>文件的相同位置。</p><h3 id="outFile">outFile <a href="about:blank#outfile">#</a></h3><p><code>outFile</code>设置将所有非模块的全局文件，编译在同一个文件里面。它只有在<code>module</code>属性为<code>None</code>、<code>System</code>、<code>AMD</code>时才生效，并且不能用来打包 CommonJS 或 ES6 模块。</p><h3 id="paths">paths <a href="about:blank#paths">#</a></h3><p><code>paths</code>设置模块名和模块路径的映射，也就是 TypeScript 如何导入<code>require</code>或<code>imports</code>语句加载的模块。</p><p><code>paths</code>基于<code>baseUrl</code>进行加载，所以必须同时设置后者。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    &quot;baseUrl&quot;: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      &quot;<span class="selector-tag">b</span>&quot;: [<span class="string">&quot;bar/b&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它还可以使用通配符“*”。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@bar/*&quot;</span>: [<span class="string">&quot;bar/*&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="preserveConstEnums">preserveConstEnums <a href="about:blank#preserveconstenums">#</a></h3><p><code>preserveConstEnums</code>将<code>const enum</code>结构保留下来，不替换成常量值。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;preserveConstEnums&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="pretty">pretty <a href="about:blank#pretty">#</a></h3><p><code>pretty</code>设置美化输出终端的编译信息，默认为<code>true</code>。</p><h3 id="removeComments">removeComments <a href="about:blank#removecomments">#</a></h3><p><code>removeComments</code>移除 TypeScript 脚本里面的注释，默认为<code>false</code>。</p><h3 id="resolveJsonModule">resolveJsonModule <a href="about:blank#resolvejsonmodule">#</a></h3><p><code>resolveJsonModule</code>允许 import 命令导入 JSON 文件。</p><h3 id="rootDir">rootDir <a href="about:blank#rootdir">#</a></h3><p><code>rootDir</code>设置源码脚本所在的目录，主要跟编译后的脚本结构有关。<code>rootDir</code>对应目录下的所有脚本，会成为输出目录里面的顶层脚本。</p><h3 id="rootDirs">rootDirs <a href="about:blank#rootdirs">#</a></h3><p><code>rootDirs</code>把多个不同目录，合并成一个虚拟目录，便于模块定位。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;rootDirs&quot;</span>: [<span class="string">&quot;bar&quot;</span>, <span class="string">&quot;foo&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>rootDirs</code>将<code>bar</code>和<code>foo</code>组成一个虚拟目录。</p><h3 id="sourceMap">sourceMap <a href="about:blank#sourcemap">#</a></h3><p><code>sourceMap</code>设置编译时是否生成 SourceMap 文件。</p><h3 id="sourceRoot">sourceRoot <a href="about:blank#sourceroot">#</a></h3><p><code>sourceRoot</code>在 SourceMap 里面设置 TypeScript 源文件的位置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://my-website.com/debug/source/&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="strict">strict <a href="about:blank#strict">#</a></h3><p><code>strict</code>用来打开 TypeScript 的严格检查。它的值是一个布尔值，默认是关闭的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个设置相当于同时打开以下的一系列设置。</p><ul><li>alwaysStrict</li><li>strictNullChecks</li><li>strictBindCallApply</li><li>strictFunctionTypes</li><li>strictPropertyInitialization</li><li>noImplicitAny</li><li>noImplicitThis</li><li>useUnknownInCatchVariables</li></ul><p>打开<code>strict</code>的时候，允许单独关闭其中一项。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alwaysStrict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="strictBindCallApply">strictBindCallApply <a href="about:blank#strictbindcallapply">#</a></h3><p><code>strictBindCallApply</code>设置是否对函数的<code>call()</code>、<code>bind()</code>、<code>apply()</code>这三个方法进行类型检查。</p><p>如果不打开<code>strictBindCallApply</code>编译选项，编译器不会对以上三个方法进行类型检查，参数类型都是<code>any</code>，传入任何参数都不会产生编译错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x: string</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// strictBindCallApply:false</span></span><br><span class="line"><span class="keyword">const</span> n = fn.<span class="title function_">call</span>(<span class="literal">undefined</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 以上不报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="strictFunctionTypes">strictFunctionTypes <a href="about:blank#strictfunctiontypes">#</a></h3><p><code>strictFunctionTypes</code>允许对函数更严格的参数检查。具体来说，如果函数 B 的参数是函数 A 参数的子类型，那么函数 B 不能替代函数 A。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span> + x.<span class="title function_">toLowerCase</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StringOrNumberFunc</span> = <span class="function">(<span class="params">ns:<span class="built_in">string</span>|<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开 strictFunctionTypes，下面代码会报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">func</span>:<span class="title class_">StringOrNumberFunc</span> = fn;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，函数<code>fn()</code>的参数是<code>StringOrNumberFunc</code>参数的子集，因此<code>fn</code>不能替代<code>StringOrNumberFunc</code>。</p><h3 id="strictNullChecks">strictNullChecks <a href="about:blank#strictnullchecks">#</a></h3><p><code>strictNullChecks</code>设置对<code>null</code>和<code>undefined</code>进行严格类型检查。如果打开<code>strict</code>属性，这一项就会自动设为<code>true</code>，否则为<code>false</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">value</span>:<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// strictNullChecks:false</span></span><br><span class="line"><span class="comment">// 下面语句不报错</span></span><br><span class="line"><span class="keyword">value</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它可以理解成只要打开，就需要显式检查<code>null</code>或<code>undefined</code>。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">x:string|null</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (x === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// do nothing</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;Hello, &quot;</span> + x.toUpperCase());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="strictPropertyInitialization">strictPropertyInitialization <a href="about:blank#strictpropertyinitialization">#</a></h3><p><code>strictPropertyInitialization</code>设置类的实例属性都必须初始化，包括以下几种情况。</p><ul><li>设为<code>undefined</code>类型</li><li>显式初始化</li><li>构造函数中赋值</li></ul><p>注意，使用该属性的同时，必须打开<code>strictNullChecks</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// strictPropertyInitialization：true</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="comment">// 报错，属性 username 没有初始化</span></span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方法一</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  username = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方法二</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">username</span>:<span class="built_in">string</span>|<span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方法三</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">username</span>:<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">username:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">username</span> = username;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> username:<span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方法四：赋值断言</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  username!:<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">username:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initialize</span>(username);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">initialize</span>(<span class="params">username:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">username</span> = username;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="suppressExcessPropertyErrors">suppressExcessPropertyErrors <a href="about:blank#suppressexcesspropertyerrors">#</a></h3><p><code>suppressExcessPropertyErrors</code>关闭对象字面量的多余参数的报错。</p><h3 id="target">target <a href="about:blank#target">#</a></h3><p><code>target</code>指定编译出来的 JavaScript 代码的 ECMAScript 版本，比如<code>es2021</code>，默认是<code>es3</code>。</p><p>它可以取以下值。</p><ul><li>es3</li><li>es5</li><li>es6/es2015</li><li>es2016</li><li>es2017</li><li>es2018</li><li>es2019</li><li>es2020</li><li>es2021</li><li>es2022</li><li>esnext</li></ul><p>注意，如果编译的目标版本过老，比如<code>&quot;target&quot;: &quot;es3&quot;</code>，有些语法可能无法编译，<code>tsc</code>命令会报错。</p><h3 id="traceResolution">traceResolution <a href="about:blank#traceresolution">#</a></h3><p><code>traceResolution</code>设置编译时，在终端输出模块解析的具体步骤。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;traceResolution&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="typeRoots">typeRoots <a href="about:blank#typeroots">#</a></h3><p><code>typeRoots</code>设置类型模块所在的目录，默认是<code>node_modules/@types</code>，该目录里面的模块会自动加入编译。一旦指定了该属性，就不会再用默认值<code>node_modules/@types</code>里面的类型模块。</p><p>该属性的值是一个数组，数组的每个成员就是一个目录，它们的路径是相对于<code>tsconfig.json</code>位置。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;typeRoots&quot;</span>: [<span class="string">&quot;./typings&quot;</span>, <span class="string">&quot;./vendor/types&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="types">types <a href="about:blank#types">#</a></h3><p>默认情况下，<code>typeRoots</code>目录下所有模块都会自动加入编译，如果指定了<code>types</code>属性，那么只有其中列出的模块才会自动加入编译。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;types&quot;</span>: [<span class="string">&quot;node&quot;</span>, <span class="string">&quot;jest&quot;</span>, <span class="string">&quot;express&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的设置表示，默认情况下，只有<code>./node_modules/@types/node</code>、<code>./node_modules/@types/jest</code>和<code>./node_modules/@types/express</code>会自动加入编译，其他<code>node_modules/@types/</code>目录下的模块不会加入编译。</p><p>如果<code>&quot;types&quot;: []</code>，就表示不会自动将所有<code>@types</code>模块加入编译。</p><h3 id="useUnknownInCatchVariables">useUnknownInCatchVariables <a href="about:blank#useunknownincatchvariables">#</a></h3><p><code>useUnknownInCatchVariables</code>设置<code>catch</code>语句捕获的<code>try</code>抛出的返回值类型，从<code>any</code>变成<code>unknown</code>。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  <span class="built_in">someExternalFunction</span>();</span><br><span class="line">&#125; catch (err) &#123;</span><br><span class="line">  err; <span class="comment">// 类型 any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，默认情况下，<code>catch</code>语句的参数<code>err</code>类型是<code>any</code>，即可以是任何值。</p><p>打开<code>useUnknownInCatchVariables</code>以后，<code>err</code>的类型抛出的错误将是<code>unknown</code>类型。这带来的变化就是使用<code>err</code>之前，必须缩小它的类型，否则会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">someExternalFunction</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err <span class="keyword">instanceof</span> <span class="title class_">Error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考链接">参考链接 <a href="about:blank#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">#</a></h2><ul><li><a href="https://mariusschulz.com/blog/strict-property-initialization-in-typescript">Strict Property Initialization in TypeScript</a>, Marius Schulz</li></ul><p>本文转自 <a href="https://wangdoc.com/typescript/tsconfig.json">https://wangdoc.com/typescript/tsconfig.json</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">??TypeScript tsconfig.json</summary>
    
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 的注释指令</title>
    <link href="https://www.fomal.cc/posts/30.html"/>
    <id>https://www.fomal.cc/posts/30.html</id>
    <published>2023-06-24T10:50:00.000Z</published>
    <updated>2023-06-24T10:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>TypeScript 的注释指令</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><p>TypeScript 接受一些注释指令。</p><p>所谓“注释指令”，指的是采用 JS 双斜杠注释的形式，向编译器发出的命令。</p><h2 id="ts-nocheck"><code>// @ts-nocheck</code> <a href="about:blank#-ts-nocheck">#</a></h2><p><code>// @ts-nocheck</code>告诉编译器不对当前脚本进行类型检查，可以用于 TypeScript 脚本，也可以用于 JavaScript 脚本。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-nocheck</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="built_in">document</span>.getElementById(<span class="number">123</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>document.getElementById(123)</code>存在类型错误，但是编译器不对该脚本进行类型检查，所以不会报错。</p><h2 id="ts-check"><code>// @ts-check</code> <a href="about:blank#-ts-check">#</a></h2><p>如果一个 JavaScript 脚本顶部添加了<code>// @ts-check</code>，那么编译器将对该脚本进行类型检查，不论是否启用了<code>checkJs</code>编译选项。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line">let isChecked = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(isChceked); <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例是一个 JavaScript 脚本，<code>// @ts-check</code>告诉 TypeScript 编译器对其进行类型检查，所以最后一行会报错，提示拼写错误。</p><h2 id="ts-ignore"><code>// @ts-ignore</code> <a href="about:blank#-ts-ignore">#</a></h2><p><code>// @ts-ignore</code>告诉编译器不对下一行代码进行类型检查，可以用于 TypeScript 脚本，也可以用于 JavaScript 脚本。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let <span class="keyword">x</span>:number<span class="comment">;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="keyword">x</span> <span class="operator">=</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line">// <span class="title">@ts-ignore</span></span><br><span class="line"><span class="keyword">x</span> <span class="operator">=</span> <span class="keyword">false</span><span class="comment">; // 不报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，最后一行是类型错误，变量<code>x</code>的类型是<code>number</code>，不能等于布尔值。但是因为前面加上了<code>// @ts-ignore</code>，编译器会跳过这一行的类型检查，所以不会报错。</p><h2 id="ts-expect-error"><code>// @ts-expect-error</code> <a href="about:blank#-ts-expect-error">#</a></h2><p><code>// @ts-expect-error</code>主要用在测试用例，当下一行有类型错误时，它会压制 TypeScript 的报错信息（即不显示报错信息），把错误留给代码自己处理。</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function doStuff(<span class="name">abc</span>: <span class="built_in">string</span>, <span class="name">xyz</span>: <span class="built_in">string</span>) &#123;</span><br><span class="line">  <span class="built_in">assert</span>(typeof abc === <span class="string">&quot;string&quot;</span>);</span><br><span class="line">  <span class="built_in">assert</span>(typeof xyz === <span class="string">&quot;string&quot;</span>);</span><br><span class="line">  // <span class="keyword">do</span> some stuff</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  // @ts-expect-<span class="built_in">error</span></span><br><span class="line">  doStuff(<span class="number">123</span>, <span class="number">456</span>);</span><br><span class="line">&#125;).toThrow();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例是一个测试用例，倒数第二行的<code>doStuff(123, 456)</code>的参数类型与定义不一致，TypeScript 引擎会报错。但是，测试用例本身测试的就是这个错误，已经有专门的处理代码，所以这里可以使用<code>// @ts-expect-error</code>，不显示引擎的报错信息。</p><p>如果下一行没有类型错误，<code>// @ts-expect-error</code>则会显示一行提示。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-expect-error</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span> + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 输出 Unused &#x27;@ts-expect-error&#x27; directive.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，第二行是正确代码，这时系统会给出一个提示，表示<code>@ts-expect-error</code>没有用到。</p><h2 id="JSDoc">JSDoc <a href="about:blank#jsdoc">#</a></h2><p>TypeScript 直接处理 JS 文件时，如果无法推断出类型，会使用 JS 脚本里面的 JSDoc 注释。</p><p>使用 JSDoc 时，有两个基本要求。</p><p>（1）JSDoc 注释必须以<code>/**</code>开始，其中星号（<code>*</code>）的数量必须为两个。若使用其他形式的多行注释，则 JSDoc 会忽略该条注释。</p><p>（2）JSDoc 注释必须与它描述的代码处于相邻的位置，并且注释在上，代码在下。</p><p>下面是 JSDoc 的一个简单例子。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; somebody</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">somebody</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Hello &#x27;</span> + somebody);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，注释里面的<code>@param</code>是一个 JSDoc 声明，表示下面的函数<code>sayHello()</code>的参数<code>somebody</code>类型为<code>string</code>。</p><p>TypeScript 编译器支持大部分的 JSDoc 声明，下面介绍其中的一些。</p><h3 id="typedef">@typedef <a href="about:blank#typedef">#</a></h3><p><code>@typedef</code>命令创建自定义类型，等同于 TypeScript 里面的类型别名。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @typedef &#123;(<span class="built_in">number</span> | <span class="built_in">string</span>)&#125; NumberLike</span><br><span class="line"> */</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，定义了一个名为<code>NumberLike</code>的新类型，它是由<code>number</code>和<code>string</code>构成的联合类型，等同于 TypeScript 的如下语句。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NumberLike = <span class="keyword">string</span> | <span class="keyword">number</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="type">@type <a href="about:blank#type">#</a></h3><p><code>@type</code>命令定义变量的类型。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @<span class="class"><span class="keyword">type</span> &#123;<span class="title">string</span>&#125;</span></span><br><span class="line"> */</span><br><span class="line"><span class="title">let</span> a;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>@type</code>定义了变量<code>a</code>的类型为<code>string</code>。</p><p>在<code>@type</code>命令中可以使用由<code>@typedef</code>命令创建的类型。</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@typedef</span> &#123;(number | string)&#125; NumberLike</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type</span> &#123;NumberLike&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>@type</code>命令中允许使用 TypeScript 类型及其语法。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**@<span class="class"><span class="keyword">type</span> &#123;<span class="title">true</span> | <span class="title">false</span>&#125; */</span></span><br><span class="line"><span class="title">let</span> a;</span><br><span class="line"></span><br><span class="line">/** @<span class="class"><span class="keyword">type</span> &#123;<span class="title">number</span>[]&#125; */</span></span><br><span class="line"><span class="title">let</span> b;</span><br><span class="line"></span><br><span class="line">/** @<span class="class"><span class="keyword">type</span> &#123;<span class="type">Array</span>&lt;<span class="title">number</span>&gt;&#125; */</span></span><br><span class="line"><span class="title">let</span> c;</span><br><span class="line"></span><br><span class="line">/** @<span class="class"><span class="keyword">type</span> &#123;&#123; <span class="title">readonly</span> <span class="title">x</span>: <span class="title">number</span>, <span class="title">y</span>?: <span class="title">string</span> &#125;&#125; */</span></span><br><span class="line"><span class="title">let</span> d;</span><br><span class="line"></span><br><span class="line">/** @<span class="class"><span class="keyword">type</span> &#123;(<span class="title">s</span>: <span class="title">string</span>, <span class="title">b</span>: <span class="title">boolean</span>) =&gt; <span class="title">number</span>&#125; */</span></span><br><span class="line"><span class="title">let</span> e;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="param">@param <a href="about:blank#param">#</a></h3><p><code>@param</code>命令用于定义函数参数的类型。</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;string&#125;  x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">function</span> <span class="title function_">foo</span>(<span class="params">x</span>) &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果是可选参数，需要将参数名放在方括号<code>[]</code>里面。</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;string&#125;  [x]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">function</span> <span class="title function_">foo</span>(<span class="params">x</span>) &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方括号里面，还可以指定参数默认值。</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;string&#125; [x=&quot;bar&quot;]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">function</span> <span class="title function_">foo</span>(<span class="params">x</span>) &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，参数<code>x</code>的默认值是字符串<code>bar</code>。</p><h3 id="return，-returns">@return，@returns <a href="about:blank#returnreturns">#</a></h3><p><code>@return</code>和<code>@returns</code>命令的作用相同，指定函数返回值的类型。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @<span class="keyword">return</span> &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> <span class="title">foo</span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @returns &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> <span class="title">bar</span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="extends-和类型修饰符">@extends 和类型修饰符 <a href="about:blank#extends-%E5%92%8C%E7%B1%BB%E5%9E%8B%E4%BF%AE%E9%A5%B0%E7%AC%A6">#</a></h3><p><code>@extends</code>命令用于定义继承的基类。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @extends &#123;Base&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>@public</code>、<code>@protected</code>、<code>@private</code>分别指定类的公开成员、保护成员和私有成员。</p><p><code>@readonly</code>指定只读成员。</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@public</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@readonly</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  <span class="doctag">@protected</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本文转自 <a href="https://wangdoc.com/typescript/comment">https://wangdoc.com/typescript/comment</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">??TypeScript 的注释指令</summary>
    
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 类型工具</title>
    <link href="https://www.fomal.cc/posts/29.html"/>
    <id>https://www.fomal.cc/posts/29.html</id>
    <published>2023-06-23T10:50:00.000Z</published>
    <updated>2023-06-23T10:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>TypeScript 类型工具</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><p>TypeScript 提供了一些内置的类型工具，用来方便地处理各种类型，以及生成新的类型。</p><p>TypeScript 内置了17个类型工具，可以直接使用。</p><h2 id="Awaited-Type"><code>Awaited&lt;Type&gt;</code> <a href="about:blank#awaitedtype">#</a></h2><p><code>Awaited&lt;Type&gt;</code>用来取出 Promise 的返回值类型，适合用在描述<code>then()</code>方法和 await 命令的参数类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> A = <span class="title class_">Awaited</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Awaited&lt;Type&gt;</code>会返回 Promise 的返回值类型（string）。</p><p>它也可以返回多重 Promise 的返回值类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="keyword">type</span> B = <span class="title class_">Awaited</span>&lt;<span class="title class_">Promise</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt;&gt;&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果它的类型参数不是 Promise 类型，那么就会原样返回。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// number | boolean</span></span><br><span class="line"><span class="keyword">type</span> C = <span class="title class_">Awaited</span>&lt;<span class="built_in">boolean</span> | <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt;&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类型参数是一个联合类型，其中的<code>boolean</code>会原样返回，所以最终返回的是<code>number|boolean</code>。</p><p><code>Awaited&lt;Type&gt;</code>的实现如下。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type Awaited<span class="operator">&lt;</span><span class="built_in">T</span><span class="operator">&gt;</span> <span class="operator">=</span></span><br><span class="line">  <span class="built_in">T</span> extends null <span class="operator">|</span> undefined <span class="operator">?</span> <span class="built_in">T</span> <span class="operator">:</span></span><br><span class="line">  <span class="built_in">T</span> extends object <span class="operator">&amp;</span> <span class="punctuation">&#123;</span></span><br><span class="line">    then<span class="punctuation">(</span></span><br><span class="line">      onfulfilled<span class="operator">:</span> infer <span class="built_in">F</span><span class="punctuation">,</span></span><br><span class="line">      ...args<span class="operator">:</span> infer _</span><br><span class="line">    <span class="punctuation">)</span><span class="operator">:</span> <span class="built_in">any</span>;</span><br><span class="line">  <span class="punctuation">&#125;</span> <span class="operator">?</span> <span class="built_in">F</span> extends <span class="punctuation">(</span></span><br><span class="line">    value<span class="operator">:</span> infer V<span class="punctuation">,</span></span><br><span class="line">    ...args<span class="operator">:</span> infer _</span><br><span class="line">  <span class="punctuation">)</span> <span class="operator">=</span><span class="operator">&gt;</span> <span class="built_in">any</span> <span class="operator">?</span> Awaited<span class="operator">&lt;</span>...<span class="operator">&gt;</span> <span class="operator">:</span> never<span class="operator">:</span></span><br><span class="line">  <span class="built_in">T</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ConstructorParameters-Type"><code>ConstructorParameters&lt;Type&gt;</code> <a href="about:blank#constructorparameterstype">#</a></h2><p><code>ConstructorParameters&lt;Type&gt;</code>提取构造方法<code>Type</code>的参数类型，组成一个元组类型返回。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ConstructorParameters</span>&lt;</span><br><span class="line">  <span class="keyword">new</span> (<span class="attr">x</span>: <span class="built_in">string</span>, <span class="attr">y</span>: <span class="built_in">number</span>) =&gt; <span class="built_in">object</span></span><br><span class="line">&gt;; <span class="comment">// [x: string, y: number]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ConstructorParameters</span>&lt;</span><br><span class="line">  <span class="keyword">new</span> (x?: <span class="built_in">string</span>) =&gt; <span class="built_in">object</span></span><br><span class="line">&gt;; <span class="comment">// [x?: string | undefined]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它可以返回一些内置构造方法的参数类型。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T1 = ConstructorParameters<span class="tag">&lt;</span></span><br><span class="line"><span class="tag">  ErrorConstructor</span></span><br><span class="line"><span class="tag">&gt;</span>; // [message?: <span class="keyword">string</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T2 = ConstructorParameters<span class="tag">&lt;</span></span><br><span class="line"><span class="tag">  FunctionConstructor</span></span><br><span class="line"><span class="tag">&gt;</span>; // <span class="keyword">string</span>[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T3 = ConstructorParameters<span class="tag">&lt;</span></span><br><span class="line"><span class="tag">  RegExpConstructor</span></span><br><span class="line"><span class="tag">&gt;</span>; // [pattern:<span class="keyword">string</span>|RegExp, flags?:<span class="keyword">string</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果参数类型不是构造方法，就会报错。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T1 = ConstructorParameters&lt;<span class="keyword">string</span>&gt;; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T2 = ConstructorParameters&lt;<span class="function"><span class="keyword">Function</span>&gt;;</span> <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>any</code>类型和<code>never</code>类型是两个特殊值，分别返回<code>unknown[]</code>和<code>never</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="built_in">any</span>&gt;;  <span class="comment">// unknown[]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="built_in">never</span>&gt;; <span class="comment">// never</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>ConstructorParameters&lt;Type&gt;</code>的实现如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ConstructorParameters</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span></span><br><span class="line">&gt; = T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="keyword">new</span> (...<span class="attr">args</span>: infer P) </span><br><span class="line">  =&gt; <span class="built_in">any</span> ? P : <span class="built_in">never</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Exclude-UnionType-ExcludedMembers"><code>Exclude&lt;UnionType, ExcludedMembers&gt;</code> <a href="about:blank#excludeuniontype-excludedmembers">#</a></h2><p><code>Exclude&lt;UnionType, ExcludedMembers&gt;</code>用来从联合类型<code>UnionType</code>里面，删除某些类型<code>ExcludedMembers</code>，组成一个新的类型返回。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Exclude</span>&lt;<span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;b&#x27;</span>|<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// &#x27;b&#x27;|&#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Exclude</span>&lt;<span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;b&#x27;</span>|<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;b&#x27;</span>&gt;; <span class="comment">// &#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">Exclude</span>&lt;<span class="built_in">string</span>|(<span class="function">() =&gt;</span> <span class="built_in">void</span>), <span class="title class_">Function</span>&gt;; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">Exclude</span>&lt;<span class="built_in">string</span> | <span class="built_in">string</span>[], <span class="built_in">any</span>[]&gt;; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T5</span> = <span class="title class_">Exclude</span>&lt;(<span class="function">() =&gt;</span> <span class="built_in">void</span>) | <span class="literal">null</span>, <span class="title class_">Function</span>&gt;; <span class="comment">// null</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T6</span> = <span class="title class_">Exclude</span>&lt;<span class="number">200</span> | <span class="number">400</span>, <span class="number">200</span> | <span class="number">201</span>&gt;; <span class="comment">// 400</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T7</span> = <span class="title class_">Exclude</span>&lt;<span class="built_in">number</span>, <span class="built_in">boolean</span>&gt;; <span class="comment">// number</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Exclude&lt;UnionType, ExcludedMembers&gt;</code>的实现如下。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> Exclude&lt;<span class="built_in">T</span>, U&gt; = <span class="built_in">T</span> extends U ? never <span class="symbol">:</span> <span class="built_in">T</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，等号右边的部分，表示先判断<code>T</code>是否兼容<code>U</code>，如果是的就返回<code>never</code>类型，否则返回当前类型<code>T</code>。由于<code>never</code>类型是任何其他类型的子类型，它跟其他类型组成联合类型时，可以直接将<code>never</code>类型从联合类型中“消掉”，因此<code>Exclude&lt;T, U&gt;</code>就相当于删除兼容的类型，剩下不兼容的类型。</p><h2 id="Extract-Type-Union"><code>Extract&lt;Type, Union&gt;</code> <a href="about:blank#extracttype-union">#</a></h2><p><code>Extract&lt;UnionType, Union&gt;</code>用来从联合类型<code>UnionType</code>之中，提取指定类型<code>Union</code>，组成一个新类型返回。它与<code>Exclude&lt;T, U&gt;</code>正好相反。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Extract</span>&lt;<span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;b&#x27;</span>|<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;; <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Extract</span>&lt;<span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;b&#x27;</span>|<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;b&#x27;</span>&gt;; <span class="comment">// &#x27;a&#x27;|&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">Extract</span>&lt;<span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;b&#x27;</span>|<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;d&#x27;</span>&gt;; <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">Extract</span>&lt;<span class="built_in">string</span> | <span class="built_in">string</span>[], <span class="built_in">any</span>[]&gt;; <span class="comment">// string[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T5</span> = <span class="title class_">Extract</span>&lt;(<span class="function">() =&gt;</span> <span class="built_in">void</span>) | <span class="literal">null</span>, <span class="title class_">Function</span>&gt;; <span class="comment">// () =&gt; void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T6</span> = <span class="title class_">Extract</span>&lt;<span class="number">200</span> | <span class="number">400</span>, <span class="number">200</span> | <span class="number">201</span>&gt;; <span class="comment">// 200</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果参数类型<code>Union</code>不包含在联合类型<code>UnionType</code>之中，则返回<code>never</code>类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T = <span class="title class_">Extract</span>&lt;<span class="built_in">string</span>|<span class="built_in">number</span>, <span class="built_in">boolean</span>&gt;; <span class="comment">// never</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Extract&lt;UnionType, Union&gt;</code>的实现如下。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> Extract&lt;<span class="built_in">T</span>, U&gt; = <span class="built_in">T</span> extends U ? <span class="built_in">T</span> <span class="symbol">:</span> never;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="InstanceType-Type"><code>InstanceType&lt;Type&gt;</code> <a href="about:blank#instancetypetype">#</a></h2><p><code>InstanceType&lt;Type&gt;</code>提取构造函数的返回值的类型（即实例类型），参数<code>Type</code>是一个构造函数，等同于构造函数的<code>ReturnType&lt;Type&gt;</code>。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T = InstanceType&lt;</span><br><span class="line">  <span class="built_in">new</span> () =&gt; <span class="keyword">object</span></span><br><span class="line">&gt;; // <span class="keyword">object</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类型参数是一个构造函数<code>new () =&gt; object</code>，返回值是该构造函数的实例类型（<code>object</code>）。</p><p>下面是一些例子。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type A <span class="operator">=</span> InstanceType&lt;ErrorConstructor&gt;<span class="comment">; // Error</span></span><br><span class="line">type B <span class="operator">=</span> InstanceType&lt;FunctionConstructor&gt;<span class="comment">; // Function</span></span><br><span class="line">type C <span class="operator">=</span> InstanceType&lt;RegExpConstructor&gt;<span class="comment">; // RegExp</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>InstanceType&lt;T&gt;</code>的参数都是 TypeScript 内置的原生对象的构造函数类型，<code>InstanceType&lt;T&gt;</code>的返回值就是这些构造函数的实例类型。</p><p>由于 Class 作为类型，代表实例类型。要获取它的构造方法，必须把它当成值，然后用<code>typeof</code>运算符获取它的构造方法类型。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class C &#123;</span><br><span class="line">  x <span class="operator">=</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">  y <span class="operator">=</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type T <span class="operator">=</span> InstanceType&lt;typeof C&gt;<span class="comment">; // C</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>typeof C</code>是<code>C</code>的构造方法类型，然后 InstanceType 就能获得实例类型，即<code>C</code>本身。</p><p>如果类型参数不是构造方法，就会报错。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T1 = InstanceType&lt;<span class="keyword">string</span>&gt;; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T2 = InstanceType&lt;<span class="function"><span class="keyword">Function</span>&gt;;</span> <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果类型参数是<code>any</code>或<code>never</code>两个特殊值，分别返回<code>any</code>和<code>never</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">InstanceType</span>&lt;<span class="built_in">any</span>&gt;; <span class="comment">// any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">InstanceType</span>&lt;<span class="built_in">never</span>&gt;; <span class="comment">// never</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>InstanceType&lt;Type&gt;</code>的实现如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">InstanceType</span>&lt;</span><br><span class="line">  T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="keyword">new</span> (...<span class="attr">args</span>:<span class="built_in">any</span>) =&gt; <span class="built_in">any</span></span><br><span class="line">&gt; = T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; infer R ? R :</span><br><span class="line">  <span class="built_in">any</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="NonNullable-Type"><code>NonNullable&lt;Type&gt;</code> <a href="about:blank#nonnullabletype">#</a></h2><p><code>NonNullable&lt;Type&gt;</code>用来从联合类型<code>Type</code>删除<code>null</code>类型和<code>undefined</code>类型，组成一个新类型返回，也就是返回<code>Type</code>的非空类型版本。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string|number</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">string</span>|<span class="built_in">number</span>|<span class="literal">undefined</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// string[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">string</span>[]|<span class="literal">null</span>|<span class="literal">undefined</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">boolean</span>&gt;; <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">number</span>|<span class="literal">null</span>&gt;; <span class="comment">// number</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T5</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">string</span>|<span class="literal">undefined</span>&gt;; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T6</span> = <span class="title class_">NonNullable</span>&lt;<span class="literal">null</span>|<span class="literal">undefined</span>&gt;; <span class="comment">// never</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>NonNullable&lt;Type&gt;</code>的实现如下。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">NonNullable</span>&lt;<span class="type">T</span>&gt; = <span class="type">T</span> &amp; &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，<code>T &amp; &#123;&#125;</code>等同于求<code>T &amp; Object</code>的交叉类型。由于 TypeScript 的非空值都属于<code>Object</code>的子类型，所以会返回自身；而<code>null</code>和<code>undefined</code>不属于<code>Object</code>，会返回<code>never</code>类型。</p><h2 id="Omit-Type-Keys"><code>Omit&lt;Type, Keys&gt;</code> <a href="about:blank#omittype-keys">#</a></h2><p><code>Omit&lt;Type, Keys&gt;</code>用来从对象类型<code>Type</code>中，删除指定的属性<code>Keys</code>，组成一个新的对象类型返回。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Omit</span>&lt;A, <span class="string">&#x27;x&#x27;</span>&gt;;       <span class="comment">// &#123; y: number &#125;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Omit</span>&lt;A, <span class="string">&#x27;y&#x27;</span>&gt;;       <span class="comment">// &#123; x: number &#125;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">Omit</span>&lt;A, <span class="string">&#x27;x&#x27;</span> | <span class="string">&#x27;y&#x27;</span>&gt;; <span class="comment">// &#123; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Omit&lt;Type, Keys&gt;</code>从对象类型<code>A</code>里面删除指定属性，返回剩下的属性。</p><p>指定删除的键名<code>Keys</code>可以是对象类型<code>Type</code>中不存在的属性，但必须兼容<code>string|number|symbol</code>。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  x: <span class="keyword">number</span>;</span><br><span class="line">  y: <span class="keyword">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T = Omit&lt;A, <span class="string">&#x27;z&#x27;</span>&gt;; // &#123; x: <span class="keyword">number</span>; y: <span class="keyword">number</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，对象类型<code>A</code>中不存在属性<code>z</code>，所以就原样返回了。</p><p><code>Omit&lt;Type, Keys&gt;</code>的实现如下。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Omit&lt;T</span>, <span class="title">K</span> <span class="keyword">extends</span> <span class="title">keyof</span> <span class="title">any&gt;</span> </span></span><br><span class="line">  = <span class="type">Pick</span>&lt;<span class="type">T</span>, <span class="type">Exclude</span>&lt;keyof <span class="type">T</span>, <span class="type">K</span>&gt;&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="OmitThisParameter-Type"><code>OmitThisParameter&lt;Type&gt;</code> <a href="about:blank#omitthisparametertype">#</a></h2><p><code>OmitThisParameter&lt;Type&gt;</code>从函数类型中移除 this 参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params"><span class="variable language_">this</span>: <span class="built_in">Number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type T = <span class="title class_">OmitThisParameter</span>&lt;<span class="keyword">typeof</span> toHex&gt;; <span class="comment">// () =&gt; string</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>OmitThisParameter&lt;T&gt;</code>给出了函数<code>toHex()</code>的类型，并将其中的<code>this</code>参数删除。</p><p>如果函数没有 this 参数，则返回原始函数类型。</p><p><code>OmitThisParameter&lt;Type&gt;</code>的实现如下。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> OmitThisParameter&lt;<span class="built_in">T</span>&gt; =</span><br><span class="line">  unknown extends ThisParameterType&lt;<span class="built_in">T</span>&gt; ? <span class="built_in">T</span> <span class="symbol">:</span></span><br><span class="line">  <span class="built_in">T</span> extends (...ar<span class="symbol">gs:</span> infer A) =&gt; infer R ?</span><br><span class="line">  (...ar<span class="symbol">gs:</span> A) =&gt; R <span class="symbol">:</span> <span class="built_in">T</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Parameters-Type"><code>Parameters&lt;Type&gt;</code> <a href="about:blank#parameterstype">#</a></h2><p><code>Parameters&lt;Type&gt;</code>从函数类型<code>Type</code>里面提取参数类型，组成一个元组返回。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Parameters</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;; <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Parameters</span>&lt;<span class="function">(<span class="params">s:<span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>&gt;; <span class="comment">// [s:string]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">Parameters</span>&lt;&lt;T&gt;<span class="function">(<span class="params">arg: T</span>) =&gt;</span> T&gt;;    <span class="comment">// [arg: unknown]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">Parameters</span>&lt;</span><br><span class="line">  <span class="function">(<span class="params">x:&#123; a: <span class="built_in">number</span>; b: <span class="built_in">string</span> &#125;</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&gt;; <span class="comment">// [x: &#123; a: number, b: string &#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T5</span> = <span class="title class_">Parameters</span>&lt;</span><br><span class="line">  <span class="function">(<span class="params">a:<span class="built_in">number</span>, b:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line">&gt;; <span class="comment">// [a:number, b:number]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Parameters&lt;Type&gt;</code>的返回值会包括函数的参数名，这一点需要注意。</p><p>如果参数类型<code>Type</code>不是带有参数的函数形式，会报错。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">type</span> T1 = Parameters&lt;<span class="keyword">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">type</span> T2 = Parameters&lt;<span class="function"><span class="keyword">Function</span>&gt;;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于<code>any</code>和<code>never</code>是两个特殊值，会返回<code>unknown[]</code>和<code>never</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Parameters</span>&lt;<span class="built_in">any</span>&gt;; <span class="comment">// unknown[]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Parameters</span>&lt;<span class="built_in">never</span>&gt;; <span class="comment">// never</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Parameters&lt;Type&gt;</code>主要用于从外部模块提供的函数类型中，获取参数类型。</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SecretName &#123;</span><br><span class="line">  first: <span class="built_in">string</span>;</span><br><span class="line">  last: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> SecretSanta &#123;</span><br><span class="line">  name: SecretName;</span><br><span class="line">  gift: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="built_in">function</span> getGift(</span><br><span class="line">  name: SecretName,</span><br><span class="line">  gift: <span class="built_in">string</span></span><br><span class="line">): SecretSanta &#123;</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，模块只输出了函数<code>getGift()</code>，没有输出参数<code>SecretName</code>和返回值<code>SecretSanta</code>。这时就可以通过<code>Parameters&lt;T&gt;</code>和<code>ReturnType&lt;T&gt;</code>拿到这两个接口类型。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ParaT</span> <span class="operator">=</span> Parameters<span class="operator">&lt;</span><span class="built_in">typeof</span> getGift<span class="operator">&gt;</span>[<span class="number">0</span>]; <span class="comment">// SecretName</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReturnT</span> <span class="operator">=</span> ReturnType<span class="operator">&lt;</span><span class="built_in">typeof</span> getGift<span class="operator">&gt;</span>; <span class="comment">// SecretSanta</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Parameters&lt;Type&gt;</code>的实现如下。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Parameters&lt;T</span> <span class="keyword">extends</span> (<span class="params">...args: any</span>) <span class="title">=&gt;</span> <span class="title">any&gt;</span> </span>= </span><br><span class="line">  <span class="type">T</span> <span class="keyword">extends</span> (...args: infer <span class="type">P</span>)</span><br><span class="line">  =&gt; any ? <span class="type">P</span> : never</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Partial-Type"><code>Partial&lt;Type&gt;</code> <a href="about:blank#partialtype">#</a></h2><p><code>Partial&lt;Type&gt;</code>返回一个新类型，将参数类型<code>Type</code>的所有属性变为可选属性。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  x: <span class="keyword">number</span>;</span><br><span class="line">  y: <span class="keyword">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> T = Partial&lt;A&gt;; // &#123; x?: <span class="keyword">number</span>; y?: <span class="keyword">number</span>; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Partial&lt;Type&gt;</code>的实现如下。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">Partial</span>&lt;<span class="type">T</span>&gt; = &#123;</span><br><span class="line">  [<span class="type">P</span> in keyof <span class="type">T</span>]?: <span class="type">T</span>[<span class="type">P</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Pick-Type-Keys"><code>Pick&lt;Type, Keys&gt;</code> <a href="about:blank#picktype-keys">#</a></h2><p><code>Pick&lt;Type, Keys&gt;</code>返回一个新的对象类型，第一个参数<code>Type</code>是一个对象类型，第二个参数<code>Keys</code>是<code>Type</code>里面被选定的键名。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Pick</span>&lt;A, <span class="string">&#x27;x&#x27;</span>&gt;; <span class="comment">// &#123; x: number &#125;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Pick</span>&lt;A, <span class="string">&#x27;y&#x27;</span>&gt;; <span class="comment">// &#123; y: number &#125;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">Pick</span>&lt;A, <span class="string">&#x27;x&#x27;</span>|<span class="string">&#x27;y&#x27;</span>&gt;;  <span class="comment">// &#123; x: number; y: number &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Pick&lt;Type, Keys&gt;</code>会从对象类型<code>A</code>里面挑出指定的键名，组成一个新的对象类型。</p><p>指定的键名<code>Keys</code>必须是对象键名<code>Type</code>里面已经存在的键名，否则会报错。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T = <span class="title class_">Pick</span>&lt;A, <span class="string">&#x27;z&#x27;</span>&gt;; <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，对象类型<code>A</code>不存在键名<code>z</code>，所以报错了。</p><p><code>Pick&lt;Type, Keys&gt;</code>的实现如下。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Pick&lt;T</span>, <span class="title">K</span> <span class="keyword">extends</span> <span class="title">keyof</span> <span class="title">T&gt;</span> </span>= &#123;</span><br><span class="line">  [<span class="type">P</span> in <span class="type">K</span>]: <span class="type">T</span>[<span class="type">P</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Readonly-Type"><code>Readonly&lt;Type&gt;</code> <a href="about:blank#readonlytype">#</a></h2><p><code>Readonly&lt;Type&gt;</code>返回一个新类型，将参数类型<code>Type</code>的所有属性变为只读属性。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  x: <span class="keyword">number</span>;</span><br><span class="line">  y?: <span class="keyword">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// &#123; readonly x: <span class="keyword">number</span>; readonly y?: <span class="keyword">number</span>; &#125;</span><br><span class="line"><span class="keyword">type</span> T = Readonly&lt;A&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>y</code>是可选属性，<code>Readonly&lt;Type&gt;</code>不会改变这一点，只会让<code>y</code>变成只读。</p><p><code>Readonly&lt;Type&gt;</code>的实现如下。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">Readonly</span>&lt;<span class="type">T</span>&gt; = &#123;</span><br><span class="line">  readonly [<span class="type">P</span> in keyof <span class="type">T</span>]: <span class="type">T</span>[<span class="type">P</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以自定义类型工具<code>Mutable&lt;Type&gt;</code>，将参数类型的所有属性变成可变属性。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">Mutable</span>&lt;<span class="type">T</span>&gt; = &#123;</span><br><span class="line">  -readonly [<span class="type">P</span> in keyof <span class="type">T</span>]: <span class="type">T</span>[<span class="type">P</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，<code>-readonly</code>表示去除属性的只读标志。</p><p>相应地，<code>+readonly</code>就表示增加只读标志，等同于<code>readonly</code>。因此，<code>Readonly&lt;Type&gt;</code>的实现也可以写成下面这样。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">Readonly</span>&lt;<span class="type">T</span>&gt; = &#123;</span><br><span class="line">  +readonly [<span class="type">P</span> in keyof <span class="type">T</span>]: <span class="type">T</span>[<span class="type">P</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Readonly&lt;Type&gt;</code>可以与<code>Partial&lt;Type&gt;</code>结合使用，将所有属性变成只读的可选属性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">worker</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">Partial</span>&lt;<span class="title class_">Person</span>&gt;&gt;</span><br><span class="line">  = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">worker.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Record-Keys-Type"><code>Record&lt;Keys, Type&gt;</code> <a href="about:blank#recordkeys-type">#</a></h2><p><code>Record&lt;Keys, Type&gt;</code>返回一个对象类型，参数<code>Keys</code>用作键名，参数<code>Type</code>用作键值类型。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// &#123; a: number &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="type">T </span>= <span class="keyword">Record</span>&lt;<span class="string">&#x27;a&#x27;</span>, number&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Record&lt;Keys, Type&gt;</code>的第一个参数<code>a</code>，用作对象的键名，第二个参数<code>number</code>是<code>a</code>的键值类型。</p><p>参数<code>Keys</code>可以是联合类型，这时会依次展开为多个键。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// &#123; a: number, b: number &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="type">T </span>= <span class="keyword">Record</span>&lt;<span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;b&#x27;</span>, number&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，第一个参数是联合类型<code>'a'|'b'</code>，展开成两个键名<code>a</code>和<code>b</code>。</p><p>如果参数<code>Type</code>是联合类型，就表明键值是联合类型。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// &#123; a: <span class="built_in">number</span>|<span class="built_in">string</span> &#125;</span><br><span class="line">type T = Record&lt;<span class="string">&#x27;a&#x27;</span>, <span class="built_in">number</span>|<span class="built_in">string</span>&gt;<span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参数<code>Keys</code>的类型必须兼容<code>string|number|symbol</code>，否则不能用作键名，会报错。</p><p><code>Record&lt;Keys, Type&gt;</code>的实现如下。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Record&lt;K</span> <span class="keyword">extends</span> <span class="title">string|number|symbol</span>, <span class="title">T&gt;</span></span></span><br><span class="line">  = &#123; [<span class="type">P</span> in <span class="type">K</span>]: <span class="type">T</span>; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Required-Type"><code>Required&lt;Type&gt;</code> <a href="about:blank#requiredtype">#</a></h2><p><code>Required&lt;Type&gt;</code>返回一个新类型，将参数类型<code>Type</code>的所有属性变为必选属性。它与<code>Partial&lt;Type&gt;</code>的作用正好相反。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  x?: <span class="keyword">number</span>;</span><br><span class="line">  y: <span class="keyword">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T = Required&lt;A&gt;; // &#123; x: <span class="keyword">number</span>; y: <span class="keyword">number</span>; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Required&lt;Type&gt;</code>的实现如下。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">Required</span>&lt;<span class="type">T</span>&gt; = &#123;</span><br><span class="line">  [<span class="type">P</span> in keyof <span class="type">T</span>]-?: <span class="type">T</span>[<span class="type">P</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，符号<code>-?</code>表示去除可选属性的“问号”，使其变成必选属性。</p><p>相对应地，符号<code>+?</code>表示增加可选属性的“问号”，等同于<code>?</code>。因此，前面的<code>Partial&lt;Type&gt;</code>的定义也可以写成下面这样。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">Partial</span>&lt;<span class="type">T</span>&gt; = &#123;</span><br><span class="line">  [<span class="type">P</span> in keyof <span class="type">T</span>]+?: <span class="type">T</span>[<span class="type">P</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ReadonlyArray-Type"><code>ReadonlyArray&lt;Type&gt;</code> <a href="about:blank#readonlyarraytype">#</a></h2><p><code>ReadonlyArray&lt;Type&gt;</code>用来生成一个只读数组类型，类型参数<code>Type</code>表示数组成员的类型。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const values: ReadonlyArray&lt;string&gt; </span><br><span class="line">  = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">values[<span class="number">0</span>] = <span class="string">&#x27;x&#x27;</span>; <span class="comment">// 报错</span></span><br><span class="line">values.<span class="built_in">push</span>(<span class="string">&#x27;x&#x27;</span>); <span class="comment">// 报错</span></span><br><span class="line">values.<span class="built_in">pop</span>(); <span class="comment">// 报错</span></span><br><span class="line">values.<span class="built_in">splice</span>(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，变量<code>values</code>的类型是一个只读数组，所以修改成员会报错，并且那些会修改源数组的方法<code>push()</code>、<code>pop()</code>、<code>splice()</code>等都不存在。</p><p><code>ReadonlyArray&lt;Type&gt;</code>的实现如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ReadonlyArray</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">readonly</span> [<span class="attr">n</span>: <span class="built_in">number</span>]: T;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ReturnType-Type"><code>ReturnType&lt;Type&gt;</code> <a href="about:blank#returntypetype">#</a></h2><p><code>ReturnType&lt;Type&gt;</code>提取函数类型<code>Type</code>的返回值类型，作为一个新类型返回。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ReturnType</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;; <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ReturnType</span>&lt;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">string</span>; <span class="attr">b</span>: <span class="built_in">number</span></span><br><span class="line">&#125;&gt;; <span class="comment">// &#123; a: string; b: number &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">ReturnType</span>&lt;<span class="function">(<span class="params">s:<span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>&gt;; <span class="comment">// void</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">ReturnType</span>&lt;<span class="function">() =&gt;</span> <span class="function">() =&gt;</span> <span class="built_in">any</span>[]&gt;; <span class="comment">// () =&gt; any[]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T5</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> <span class="title class_">Math</span>.<span class="property">random</span>&gt;; <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T6</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> <span class="title class_">Array</span>.<span class="property">isArray</span>&gt;; <span class="comment">// boolean</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果参数类型是泛型函数，返回值取决于泛型类型。如果泛型不带有限制条件，就会返回<code>unknown</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ReturnType</span>&lt;&lt;T&gt;<span class="function">() =&gt;</span> T&gt;; <span class="comment">// unknown</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ReturnType</span>&lt;</span><br><span class="line">  &lt;T <span class="keyword">extends</span> U, U <span class="keyword">extends</span> <span class="built_in">number</span>[]&gt;<span class="function">() =&gt;</span> T</span><br><span class="line">&gt;; <span class="comment">// number[]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果类型不是函数，会报错。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ReturnType</span>&lt;<span class="built_in">boolean</span>&gt;; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ReturnType</span>&lt;<span class="title class_">Function</span>&gt;; <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>any</code>和<code>never</code>是两个特殊值，分别返回<code>any</code>和<code>never</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ReturnType</span>&lt;<span class="built_in">any</span>&gt;; <span class="comment">// any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ReturnType</span>&lt;<span class="built_in">never</span>&gt;; <span class="comment">// never</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>ReturnType&lt;Type&gt;</code>的实现如下。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ReturnType&lt;</span><br><span class="line">  T <span class="keyword">extends</span> (...args: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span></span><br><span class="line">&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> (...args: <span class="built_in">any</span>) =&gt; infer R ? R : <span class="built_in">any</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ThisParameterType-Type"><code>ThisParameterType&lt;Type&gt;</code> <a href="about:blank#thisparametertypetype">#</a></h2><p><code>ThisParameterType&lt;Type&gt;</code>提取函数类型中<code>this</code>参数的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params"><span class="variable language_">this</span>:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T = <span class="title class_">ThisParameterType</span>&lt;<span class="keyword">typeof</span> toHex&gt;; <span class="comment">// number</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果函数没有<code>this</code>参数，则返回<code>unknown</code>。</p><p><code>ThisParameterType&lt;Type&gt;</code>的实现如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ThisParameterType</span>&lt;T&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> (</span><br><span class="line">    <span class="attr">this</span>: infer U,</span><br><span class="line">    ...<span class="attr">args</span>: <span class="built_in">never</span></span><br><span class="line">  ) =&gt; <span class="built_in">any</span> ? U : <span class="built_in">unknown</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ThisType-Type"><code>ThisType&lt;Type&gt;</code> <a href="about:blank#thistypetype">#</a></h2><p><code>ThisType&lt;Type&gt;</code>不返回类型，只用来跟其他类型组成交叉类型，用来提示 TypeScript 其他类型里面的<code>this</code>的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">HelperThisValue</span> &#123;</span><br><span class="line">  <span class="attr">logError</span>: <span class="function">(<span class="params">error:<span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">helperFunctions</span>:</span><br><span class="line">  &#123; [<span class="attr">name</span>: <span class="built_in">string</span>]: <span class="title class_">Function</span> &#125; &amp;</span><br><span class="line">  <span class="title class_">ThisType</span>&lt;<span class="title class_">HelperThisValue</span>&gt;</span><br><span class="line">= &#123;</span><br><span class="line">  <span class="attr">hello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">logError</span>(<span class="string">&quot;Error: Something wrong!&quot;</span>); <span class="comment">// 正确</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">update</span>(); <span class="comment">// 报错</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，变量<code>helperFunctions</code>的类型是一个正常的对象类型与<code>ThisType&lt;HelperThisValue&gt;</code>组成的交叉类型。</p><p>这里的<code>ThisType</code>的作用是提示 TypeScript，变量<code>helperFunctions</code>的<code>this</code>应该满足<code>HelperThisValue</code>的条件。所以，<code>this.logError()</code>可以正确调用，而<code>this.update()</code>会报错，因为<code>HelperThisValue</code>里面没有这个方法。</p><p>注意，使用这个类型工具时，必须打开<code>noImplicitThis</code>设置。</p><p>下面是另一个例子。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">ThisType</span>&lt;&#123; <span class="attr">x</span>: <span class="built_in">number</span> &#125;&gt; &amp;</span><br><span class="line">  &#123; <span class="attr">getX</span>: <span class="function">() =&gt;</span> <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line">obj = &#123;</span><br><span class="line">  <span class="title function_">getX</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span>; <span class="comment">// 报错</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>getX()</code>里面的<code>this.y</code>会报错，因为根据<code>ThisType&lt;&#123; x: number &#125;&gt;</code>，这个对象的<code>this</code>不包含属性<code>y</code>。</p><p><code>ThisType&lt;Type&gt;</code>的实现就是一个空接口。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="symbol">ThisType</span>&lt;<span class="symbol">T</span>&gt; &#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符串类型工具">字符串类型工具 <a href="about:blank#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E5%B7%A5%E5%85%B7">#</a></h2><p>TypeScript 内置了四个字符串类型工具，专门用来操作字符串类型。这四个工具类型都定义在 TypeScript 自带的<code>.d.ts</code>文件里面。</p><p>它们的实现都是在底层调用 JavaScript 引擎提供 JavaScript 字符操作方法。</p><h3 id="Uppercase-StringType"><code>Uppercase&lt;StringType&gt;</code> <a href="about:blank#uppercasestringtype">#</a></h3><p><code>Uppercase&lt;StringType&gt;</code>将字符串类型的每个字符转为大写。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">A </span>= <span class="symbol">&#x27;hello</span>&#x27;;</span><br><span class="line"></span><br><span class="line">// <span class="string">&quot;HELLO&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="type">B </span>= Uppercase&lt;A&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Uppercase&lt;T&gt;</code>将 hello 转为 HELLO。</p><h3 id="Lowercase-StringType"><code>Lowercase&lt;StringType&gt;</code> <a href="about:blank#lowercasestringtype">#</a></h3><p><code>Lowercase&lt;StringType&gt;</code>将字符串的每个字符转为小写。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">A </span>= <span class="symbol">&#x27;HELLO</span>&#x27;;</span><br><span class="line"></span><br><span class="line">// <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="type">B </span>= Lowercase&lt;A&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Lowercase&lt;T&gt;</code>将 HELLO 转为 hello。</p><h3 id="Capitalize-StringType"><code>Capitalize&lt;StringType&gt;</code> <a href="about:blank#capitalizestringtype">#</a></h3><p><code>Capitalize&lt;StringType&gt;</code>将字符串的第一个字符转为大写。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">A </span>= <span class="symbol">&#x27;hello</span>&#x27;;</span><br><span class="line"></span><br><span class="line">// <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="type">B </span>= Capitalize&lt;A&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Capitalize&lt;T&gt;</code>将 hello 转为 Hello。</p><h3 id="Uncapitalize-StringType"><code>Uncapitalize&lt;StringType&gt;</code> <a href="about:blank#uncapitalizestringtype">#</a></h3><p><code>Uncapitalize&lt;StringType&gt;</code> 将字符串的第一个字符转为小写。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">A </span>= <span class="symbol">&#x27;HELLO</span>&#x27;;</span><br><span class="line"></span><br><span class="line">// <span class="string">&quot;hELLO&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="type">B </span>= Uncapitalize&lt;A&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Uncapitalize&lt;T&gt;</code>将 HELLO 转为 hELLO。</p><h2 id="参考链接">参考链接 <a href="about:blank#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">#</a></h2><ul><li><a href="https://stackoverflow.com/questions/55029032/what-is-typescripts-thistype-used-for">What is TypeScript’s ThisType used for?</a></li></ul><p>本文转自 <a href="https://wangdoc.com/typescript/utility">https://wangdoc.com/typescript/utility</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">??TypeScript 类型工具</summary>
    
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 的类型映射</title>
    <link href="https://www.fomal.cc/posts/28.html"/>
    <id>https://www.fomal.cc/posts/28.html</id>
    <published>2023-06-22T10:50:00.000Z</published>
    <updated>2023-06-22T10:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>TypeScript 的类型映射</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><h2 id="简介">简介 <a href="about:blank#%E7%AE%80%E4%BB%8B">#</a></h2><p>映射（mapping）指的是，将一种类型按照映射规则，转换成另一种类型，通常用于对象类型。</p><p>举例来说，现有一个类型<code>A</code>和另一个类型<code>B</code>。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">  foo: <span class="keyword">number</span>;</span><br><span class="line">  bar: <span class="keyword">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = &#123;</span><br><span class="line">  foo: <span class="keyword">string</span>;</span><br><span class="line">  bar: <span class="keyword">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，这两个类型的属性结构是一样的，但是属性的类型不一样。如果属性数量多的话，逐个写起来就很麻烦。</p><p>使用类型映射，就可以从类型<code>A</code>得到类型<code>B</code>。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">A</span> = &#123;</span><br><span class="line">  foo: number;</span><br><span class="line">  bar: number;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="type">B</span> = &#123;</span><br><span class="line">  [prop in keyof <span class="type">A</span>]: string;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类型<code>B</code>采用了属性名索引的写法，<code>[prop in keyof A]</code>表示依次得到类型<code>A</code>的所有属性名，然后将每个属性的类型改成<code>string</code>。</p><p>在语法上，<code>[prop in keyof A]</code>是一个属性名表达式，表示这里的属性名需要计算得到。具体的计算规则如下：</p><ul><li><code>prop</code>：属性名变量，名字可以随便起。</li><li><code>in</code>：运算符，用来取出右侧的联合类型的每一个成员。</li><li><code>keyof A</code>：返回类型<code>A</code>的每一个属性名，组成一个联合类型。</li></ul><p>下面是复制原始类型的例子。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">A</span> = &#123;</span><br><span class="line">  foo: number;</span><br><span class="line">  bar: string;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="type">B</span> = &#123;</span><br><span class="line">  [prop in keyof <span class="type">A</span>]: <span class="type">A</span>[prop];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类型<code>B</code>原样复制了类型<code>A</code>。</p><p>为了增加代码复用性，可以把常用的映射写成泛型。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">ToBoolean</span>&lt;<span class="type">Type</span>&gt; = &#123;</span><br><span class="line">  [<span class="type">Property</span> in keyof <span class="type">Type</span>]: boolean;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，定义了一个泛型，可以将其他对象的所有属性值都改成 boolean 类型。</p><p>下面是另一个例子。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">MyObj</span> = &#123;</span><br><span class="line">  [<span class="type">P</span> in 0|1|2]: string;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 等同于</span><br><span class="line"><span class="keyword">type</span> <span class="type">MyObj</span> = &#123;</span><br><span class="line">  0: string;</span><br><span class="line">  1: string;</span><br><span class="line">  2: string;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，联合类型<code>0|1|2</code>映射成了三个属性名。</p><p>不使用联合类型，直接使用某种具体类型进行属性名映射，也是可以的。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">MyObj</span> = &#123;</span><br><span class="line">  [p in &#x27;foo&#x27;]: number;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 等同于</span><br><span class="line"><span class="keyword">type</span> <span class="type">MyObj</span> = &#123;</span><br><span class="line">  foo: number;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>p in 'foo'</code>可以看成只有一个成员的联合类型，因此得到了只有这一个属性的对象类型。</p><p>甚至还可以写成<code>p in string</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyObj</span> = &#123;</span><br><span class="line">  [p <span class="keyword">in</span> <span class="built_in">string</span>]: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyObj</span> = &#123;</span><br><span class="line">  [<span class="attr">p</span>: <span class="built_in">string</span>]: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>[p in string]</code>就是属性名索引形式<code>[p: string]</code>的映射写法。</p><p>通过映射，可以把某个对象的所有属性改成可选属性。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">A</span> = &#123;</span><br><span class="line">  a: string;</span><br><span class="line">  b: number;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="type">B</span> = &#123;</span><br><span class="line">  [<span class="type">Prop</span> in keyof <span class="type">A</span>]?: <span class="type">A</span>[<span class="type">Prop</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类型<code>B</code>在类型<code>A</code>的所有属性名后面添加问号，使得这些属性都变成了可选属性。</p><p>事实上，TypeScript 的内置工具类型<code>Partial&lt;T&gt;</code>，就是这样实现的。</p><p>TypeScript内置的工具类型<code>Readonly&lt;T&gt;</code>可以将所有属性改为只读属性，实现也是通过映射。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 将 <span class="type">T</span> 的所有属性改为只读属性</span><br><span class="line"><span class="keyword">type</span> <span class="type">Readonly</span>&lt;<span class="type">T</span>&gt; = &#123;</span><br><span class="line">  readonly [<span class="type">P</span> in keyof <span class="type">T</span>]: <span class="type">T</span>[<span class="type">P</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它的用法如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T = &#123; <span class="attr">a</span>: <span class="built_in">string</span>; <span class="attr">b</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReadonlyT</span> = <span class="title class_">Readonly</span>&lt;T&gt;;</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   readonly a: string;</span></span><br><span class="line"><span class="comment">//   readonly b: number;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="映射修饰符">映射修饰符 <a href="about:blank#%E6%98%A0%E5%B0%84%E4%BF%AE%E9%A5%B0%E7%AC%A6">#</a></h2><p>映射会原样复制原始对象的可选属性和只读属性。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">A</span> = &#123;</span><br><span class="line">  a?: string;</span><br><span class="line">  readonly b: number;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="type">B</span> = &#123;</span><br><span class="line">  [<span class="type">Prop</span> in keyof <span class="type">A</span>]: <span class="type">A</span>[<span class="type">Prop</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 等同于</span><br><span class="line"><span class="keyword">type</span> <span class="type">B</span> = &#123;</span><br><span class="line">  a?: string;</span><br><span class="line">  readonly b: number;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类型<code>B</code>是类型<code>A</code>的映射，把<code>A</code>的可选属性和只读属性都保留下来。</p><p>如果要删改可选和只读这两个特性，并不是很方便。为了解决这个问题，TypeScript 引入了两个映射修饰符，用来在映射时添加或移除某个属性的<code>?</code>修饰符和<code>readonly</code>修饰符。</p><ul><li><code>+</code>修饰符：写成<code>+?</code>或<code>+readonly</code>，为映射属性添加<code>?</code>修饰符或<code>readonly</code>修饰符。</li><li><code>–</code>修饰符：写成<code>-?</code>或<code>-readonly</code>，为映射属性移除<code>?</code>修饰符或<code>readonly</code>修饰符。</li></ul><p>下面是添加或移除可选属性的例子。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 添加可选属性</span><br><span class="line"><span class="keyword">type</span> <span class="type">Optional</span>&lt;<span class="type">Type</span>&gt; = &#123;</span><br><span class="line">  [<span class="type">Prop</span> in keyof <span class="type">Type</span>]+?: <span class="type">Type</span>[<span class="type">Prop</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 移除可选属性</span><br><span class="line"><span class="keyword">type</span> <span class="type">Concrete</span>&lt;<span class="type">Type</span>&gt; = &#123;</span><br><span class="line">  [<span class="type">Prop</span> in keyof <span class="type">Type</span>]-?: <span class="type">Type</span>[<span class="type">Prop</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，<code>+?</code>或<code>-?</code>要写在属性名的后面。</p><p>下面是添加或移除只读属性的例子。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 添加 readonly</span><br><span class="line"><span class="keyword">type</span> <span class="type">CreateImmutable</span>&lt;<span class="type">Type</span>&gt; = &#123;</span><br><span class="line">  +readonly [<span class="type">Prop</span> in keyof <span class="type">Type</span>]: <span class="type">Type</span>[<span class="type">Prop</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 移除 readonly</span><br><span class="line"><span class="keyword">type</span> <span class="type">CreateMutable</span>&lt;<span class="type">Type</span>&gt; = &#123;</span><br><span class="line">  -readonly [<span class="type">Prop</span> in keyof <span class="type">Type</span>]: <span class="type">Type</span>[<span class="type">Prop</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，<code>+readonly</code>和<code>-readonly</code>要写在属性名的前面。</p><p>如果同时增删<code>?</code>和<code>readonly</code>这两个修饰符，写成下面这样。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 增加</span><br><span class="line"><span class="keyword">type</span> <span class="type">MyObj</span>&lt;<span class="type">T</span>&gt; = &#123;</span><br><span class="line">  +readonly [<span class="type">P</span> in keyof <span class="type">T</span>]+?: <span class="type">T</span>[<span class="type">P</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 移除</span><br><span class="line"><span class="keyword">type</span> <span class="type">MyObj</span>&lt;<span class="type">T</span>&gt; = &#123;</span><br><span class="line">  -readonly [<span class="type">P</span> in keyof <span class="type">T</span>]-?: <span class="type">T</span>[<span class="type">P</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>TypeScript 原生的工具类型<code>Required&lt;T&gt;</code>专门移除可选属性，就是使用<code>-?</code>修饰符实现的。</p><p>注意，<code>–?</code>修饰符移除了可选属性以后，该属性就不能等于<code>undefined</code>了，实际变成必选属性了。但是，这个修饰符不会移除<code>null</code>类型。</p><p>另外，<code>+?</code>修饰符可以简写成<code>?</code>，<code>+readonly</code>修饰符可以简写成<code>readonly</code>。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">A</span>&lt;<span class="type">T</span>&gt; = &#123;</span><br><span class="line">  +readonly [<span class="type">P</span> in keyof <span class="type">T</span>]+?: <span class="type">T</span>[<span class="type">P</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 等同于</span><br><span class="line"><span class="keyword">type</span> <span class="type">A</span>&lt;<span class="type">T</span>&gt; = &#123;</span><br><span class="line">  readonly [<span class="type">P</span> in keyof <span class="type">T</span>]?: <span class="type">T</span>[<span class="type">P</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="键名重映射">键名重映射 <a href="about:blank#%E9%94%AE%E5%90%8D%E9%87%8D%E6%98%A0%E5%B0%84">#</a></h2><h3 id="语法">语法 <a href="about:blank#%E8%AF%AD%E6%B3%95">#</a></h3><p>TypeScript 4.1 引入了键名重映射（key remapping），允许改变键名。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">bar</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = &#123;</span><br><span class="line">  [p <span class="keyword">in</span> keyof A <span class="keyword">as</span> <span class="string">`<span class="subst">$&#123;p&#125;</span>ID`</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">type</span> B = &#123;</span><br><span class="line">  <span class="attr">fooID</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">barID</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类型<code>B</code>是类型<code>A</code>的映射，但在映射时把属性名改掉了，在原始属性名后面加上了字符串<code>ID</code>。</p><p>可以看到，键名重映射的语法是在键名映射的后面加上<code>as + 新类型</code>子句。这里的“新类型”通常是一个模板字符串，里面可以对原始键名进行各种操作。</p><p>下面是另一个例子。</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">  <span class="name">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="name">age</span>: number;</span><br><span class="line">  <span class="name">location</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> Getters&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T</span><br><span class="line">    as `get$&#123;Capitalize&lt;<span class="built_in">string</span> &amp; P&gt;&#125;`]: <span class="function"><span class="params">()</span> =&gt;</span> T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> LazyPerson = Getters&lt;Person&gt;;</span><br><span class="line">// 等同于</span><br><span class="line"><span class="built_in">type</span> LazyPerson = &#123;</span><br><span class="line">  <span class="name">getName</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">  <span class="name">getAge</span>: <span class="function"><span class="params">()</span> =&gt;</span> number;</span><br><span class="line">  <span class="name">getLocation</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类型<code>LazyPerson</code>是类型<code>Person</code>的映射，并且把键名改掉了。</p><p>它的修改键名的代码是一个模板字符串<code>get$&#123;Capitalize&lt;string &amp; P&gt;&#125;</code>，下面是各个部分的解释。</p><ul><li><code>get</code>：为键名添加的前缀。</li><li><code>Capitalize&lt;T&gt;</code>：一个原生的工具泛型，用来将<code>T</code>的首字母变成大写。</li><li><code>string &amp; P</code>：一个交叉类型，其中的<code>P</code>是 keyof 运算符返回的键名联合类型<code>string|number|symbol</code>，但是<code>Capitalize&lt;T&gt;</code>只能接受字符串作为类型参数，因此<code>string &amp; P</code>只返回<code>P</code>的字符串属性名。</li></ul><h3 id="属性过滤">属性过滤 <a href="about:blank#%E5%B1%9E%E6%80%A7%E8%BF%87%E6%BB%A4">#</a></h3><p>键名重映射还可以过滤掉某些属性。下面的例子是只保留字符串属性。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">User</span> = &#123;</span><br><span class="line">  name: string,</span><br><span class="line">  age: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="type">Filter</span>&lt;<span class="type">T</span>&gt; = &#123;</span><br><span class="line">  [<span class="type">K</span> in keyof <span class="type">T</span></span><br><span class="line">    as <span class="type">T</span>[<span class="type">K</span>] extends string ? <span class="type">K</span> : never]: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="type">FilteredUser</span> = <span class="type">Filter</span>&lt;<span class="type">User</span>&gt; // &#123; name: string &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，映射<code>K in keyof T</code>获取类型<code>T</code>的每一个属性以后，然后使用<code>as Type</code>修改键名。</p><p>它的键名重映射<code>as T[K] extends string ? K : never]</code>，使用了条件运算符。如果属性值<code>T[K]</code>的类型是字符串，那么属性名不变，否则属性名类型改为<code>never</code>，即这个属性名不存在。这样就等于过滤了不符合条件的属性，只保留属性值为字符串的属性。</p><h3 id="联合类型的映射">联合类型的映射 <a href="about:blank#%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%98%A0%E5%B0%84">#</a></h3><p>由于键名重映射可以修改键名类型，所以原始键名的类型不必是<code>string|number|symbol</code>，任意的联合类型都可以用来进行键名重映射。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> S = &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&#x27;square&#x27;</span>,</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> C = &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&#x27;circle&#x27;</span>,</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyEvents</span>&lt;<span class="title class_">Events</span> <span class="keyword">extends</span> &#123; <span class="attr">kind</span>: <span class="built_in">string</span> &#125;&gt; = &#123;</span><br><span class="line">  [E <span class="keyword">in</span> <span class="title class_">Events</span> <span class="keyword">as</span> E[<span class="string">&#x27;kind&#x27;</span>]]: <span class="function">(<span class="params">event: E</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Config</span> = <span class="title class_">MyEvents</span>&lt;S|C&gt;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Config</span> = &#123;</span><br><span class="line">  <span class="attr">square</span>: <span class="function">(<span class="params">event:S</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">circle</span>: <span class="function">(<span class="params">event:C</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，原始键名的映射是<code>E in Events</code>，这里的<code>Events</code>是两个对象组成的联合类型<code>S|C</code>。所以，<code>E</code>是一个对象，然后再通过键名重映射，得到字符串键名<code>E['kind']</code>。</p><h2 id="参考链接">参考链接 <a href="about:blank#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">#</a></h2><ul><li><a href="https://mariusschulz.com/blog/mapped-type-modifiers-in-typescript">Mapped Type Modifiers in TypeScript</a>, Marius Schulz</li></ul><p>本文转自 <a href="https://wangdoc.com/typescript/mapping">https://wangdoc.com/typescript/mapping</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">??TypeScript 的类型映射</summary>
    
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 类型运算符</title>
    <link href="https://www.fomal.cc/posts/27.html"/>
    <id>https://www.fomal.cc/posts/27.html</id>
    <published>2023-06-21T10:50:00.000Z</published>
    <updated>2023-06-21T10:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>TypeScript 类型运算符</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><p>TypeScript 提供强大的类型运算能力，可以使用各种类型运算符，对已有的类型进行计算，得到新类型。</p><h2 id="keyof-运算符">keyof 运算符 <a href="about:blank#keyof-%E8%BF%90%E7%AE%97%E7%AC%A6">#</a></h2><h3 id="简介">简介 <a href="about:blank#%E7%AE%80%E4%BB%8B">#</a></h3><p>keyof 是一个单目运算符，接受一个对象类型作为参数，返回该对象的所有键名组成的联合类型。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">MyObj </span>= &#123;</span><br><span class="line">  foo: number,</span><br><span class="line">  bar: string,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="type">Keys </span>= keyof MyObj; // <span class="symbol">&#x27;foo</span><span class="string">&#x27;|&#x27;</span>bar&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>keyof MyObj</code>返回<code>MyObj</code>的所有键名组成的联合类型，即<code>'foo'|'bar'</code>。</p><p>下面是另一个例子。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="symbol">T</span> &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="built_in">bool</span>ean;</span><br><span class="line">  a: <span class="built_in">string</span>;</span><br><span class="line">  b(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type KeyT = keyof T; <span class="comment">// 0 | &#x27;a&#x27; | &#x27;b&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于 JavaScript 对象的键名只有三种类型，所以对于任意对象的键名的联合类型就是<code>string|number|symbol</code>。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">string</span> | <span class="keyword">number</span> | symbol</span><br><span class="line"><span class="keyword">type</span> KeyT = keyof any;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于没有自定义键名的类型使用 keyof 运算符，返回<code>never</code>类型，表示不可能有这样类型的键名。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> KeyT = keyof <span class="keyword">object</span>;  <span class="comment">// never</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，由于<code>object</code>类型没有自身的属性，也就没有键名，所以<code>keyof object</code>返回<code>never</code>类型。</p><p>由于 keyof 返回的类型是<code>string|number|symbol</code>，如果有些场合只需要其中的一种类型，那么可以采用交叉类型的写法。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Capital&lt;T</span> <span class="keyword">extends</span> <span class="title">string&gt;</span> </span>= <span class="type">Capitalize</span>&lt;<span class="type">T</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">MyKeys&lt;Obj</span> <span class="keyword">extends</span> <span class="title">object&gt;</span> </span>= <span class="type">Capital</span>&lt;keyof <span class="type">Obj</span>&gt;; <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类型<code>Capital</code>只接受字符串作为类型参数，传入<code>keyof Obj</code>会报错，原因是这时的类型参数是<code>string|number|symbol</code>，跟字符串不兼容。采用下面的交叉类型写法，就不会报错。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">MyKeys&lt;Obj</span> <span class="keyword">extends</span> <span class="title">object&gt;</span> </span>= <span class="type">Capital</span>&lt;string &amp; keyof <span class="type">Obj</span>&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>string &amp; keyof Obj</code>等同于<code>string &amp; string|number|symbol</code>进行交集运算，最后返回<code>string</code>，因此<code>Capital&lt;T extends string&gt;</code>就不会报错了。</p><p>如果对象属性名采用索引形式，keyof 会返回属性名的索引类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例一</span></span><br><span class="line"><span class="keyword">interface</span> T &#123;</span><br><span class="line">  [<span class="attr">prop</span>: <span class="built_in">number</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">KeyT</span> = keyof T;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例二</span></span><br><span class="line"><span class="keyword">interface</span> T &#123;</span><br><span class="line">  [<span class="attr">prop</span>: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// string|number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">KeyT</span> = keyof T;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的示例二，<code>keyof T</code>返回的类型是<code>string|number</code>，原因是 JavaScript 属性名为字符串时，包含了属性名为数值的情况，因为数值属性名会自动转为字符串。</p><p>如果 keyof 运算符用于数组或元组类型，得到的结果可能出人意料。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">Result </span>= keyof [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">// 返回 number | <span class="string">&quot;0&quot;</span> | <span class="string">&quot;1&quot;</span> | <span class="string">&quot;2&quot;</span></span><br><span class="line">// | <span class="string">&quot;length&quot;</span> | <span class="string">&quot;pop&quot;</span> | <span class="string">&quot;push&quot;</span> | ···</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，keyof 会返回数组的所有键名，包括数字键名和继承的键名。</p><p>对于联合类型，keyof 返回成员共有的键名。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">A</span> = &#123; a: string; z: boolean &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="type">B</span> = &#123; b: string; z: boolean &#125;;</span><br><span class="line"></span><br><span class="line">// 返回 <span class="string">&#x27;z&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="type">KeyT</span> = keyof (<span class="type">A</span> | <span class="type">B</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于交叉类型，keyof 返回所有键名。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">A</span> = &#123; a: string; x: boolean &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="type">B</span> = &#123; b: string; y: number &#125;;</span><br><span class="line"></span><br><span class="line">// 返回 <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;x&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;y&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="type">KeyT</span> = keyof (<span class="type">A</span> &amp; <span class="type">B</span>);</span><br><span class="line"></span><br><span class="line">// 相当于</span><br><span class="line"><span class="title">keyof</span> (<span class="type">A</span> &amp; <span class="type">B</span>) ≡ keyof <span class="type">A</span> | keyof <span class="type">B</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>keyof 取出的是键名组成的联合类型，如果想取出键值组成的联合类型，可以像下面这样写。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyObj = &#123;</span><br><span class="line">  foo: <span class="keyword">number</span>,</span><br><span class="line">  bar: <span class="keyword">string</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Keys = keyof MyObj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Values = MyObj[Keys]; // <span class="keyword">number</span>|<span class="keyword">string</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Keys</code>是键名组成的联合类型，而<code>MyObj[Keys]</code>会取出每个键名对应的键值类型，组成一个新的联合类型，即<code>number|string</code>。</p><h3 id="keyof-运算符的用途">keyof 运算符的用途 <a href="about:blank#keyof-%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E7%94%A8%E9%80%94">#</a></h3><p>keyof 运算符往往用于精确表达对象的属性类型。</p><p>举例来说，取出对象的某个指定属性的值，JavaScript 版本可以写成下面这样。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">prop</span>(obj, key) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">obj[key]</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面这个函数添加类型，只能写成下面这样。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">prop</span>(<span class="params"></span></span><br><span class="line"><span class="params">  obj: &#123; [p:<span class="built_in">string</span>]: <span class="built_in">any</span> &#125;,</span></span><br><span class="line"><span class="params">  key: <span class="built_in">string</span></span></span><br><span class="line"><span class="params"></span>):<span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的类型声明有两个问题，一是无法表示参数<code>key</code>与参数<code>obj</code>之间的关系，二是返回值类型只能写成<code>any</code>。</p><p>有了 keyof 以后，就可以解决这两个问题，精确表达返回值类型。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">prop&lt;Obj,</span> K extends keyof Obj&gt;(</span><br><span class="line">  obj:Obj, key:K</span><br><span class="line">):Obj[K] &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">obj[key]</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>K extends keyof Obj</code>表示<code>K</code>是<code>Obj</code>的一个属性名，传入其他字符串会报错。返回值类型<code>Obj[K]</code>就表示<code>K</code>这个属性值的类型。</p><p>keyof 的另一个用途是用于属性映射，即将一个类型的所有属性逐一映射成其他值。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">NewProps</span>&lt;<span class="type">Obj</span>&gt; = &#123;</span></span><br><span class="line"><span class="class">  [<span class="type">Prop</span> <span class="title">in</span> <span class="title">keyof</span> <span class="type">Obj</span>]: <span class="title">boolean</span>;</span></span><br><span class="line"><span class="class">&#125;;</span></span><br><span class="line"></span><br><span class="line">// 用法</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">MyObj</span> = &#123; <span class="title">foo</span>: <span class="title">number</span>; &#125;;</span></span><br><span class="line"></span><br><span class="line">// 等于 &#123; foo: boolean; &#125;</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">NewObj</span> = <span class="type">NewProps</span>&lt;<span class="type">MyObj</span>&gt;;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类型<code>NewProps</code>是类型<code>Obj</code>的映射类型，前者继承了后者的所有属性，但是把所有属性值类型都改成了<code>boolean</code>。</p><p>下面的例子是去掉 readonly 修饰符。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">Mutable</span>&lt;<span class="type">Obj</span>&gt; = &#123;</span></span><br><span class="line"><span class="class">  -<span class="title">readonly</span> [<span class="type">Prop</span> <span class="title">in</span> <span class="title">keyof</span> <span class="type">Obj</span>]: <span class="type">Obj</span>[<span class="type">Prop</span>];</span></span><br><span class="line"><span class="class">&#125;;</span></span><br><span class="line"></span><br><span class="line">// 用法</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">MyObj</span> = &#123;</span></span><br><span class="line"><span class="class">  <span class="title">readonly</span> <span class="title">foo</span>: <span class="title">number</span>;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"></span><br><span class="line">// 等于 &#123; foo: number; &#125;</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">NewObj</span> = <span class="type">Mutable</span>&lt;<span class="type">MyObj</span>&gt;;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>[Prop in keyof Obj]</code>是<code>Obj</code>类型的所有属性名，<code>-readonly</code>表示去除这些属性的只读特性。对应地，还有<code>+readonly</code>的写法，表示添加只读属性设置。</p><p>下面的例子是让可选属性变成必有的属性。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">Concrete</span>&lt;<span class="type">Obj</span>&gt; = &#123;</span></span><br><span class="line"><span class="class">  [<span class="type">Prop</span> <span class="title">in</span> <span class="title">keyof</span> <span class="type">Obj</span>]-?: <span class="type">Obj</span>[<span class="type">Prop</span>];</span></span><br><span class="line"><span class="class">&#125;;</span></span><br><span class="line"></span><br><span class="line">// 用法</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">MyObj</span> = &#123;</span></span><br><span class="line"><span class="class">  <span class="title">foo</span>?: <span class="title">number</span>;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"></span><br><span class="line">// 等于 &#123; foo: number; &#125;</span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">NewObj</span> = <span class="type">Concrete</span>&lt;<span class="type">MyObj</span>&gt;;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>[Prop in keyof Obj]</code>后面的<code>-?</code>表示去除可选属性设置。对应地，还有<code>+?</code>的写法，表示添加可选属性设置。</p><h2 id="in-运算符">in 运算符 <a href="about:blank#in-%E8%BF%90%E7%AE%97%E7%AC%A6">#</a></h2><p>JavaScript 语言中，<code>in</code>运算符用来确定对象是否包含某个属性名。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123; <span class="attr">a</span>: <span class="number">123</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;a&#x27;</span> in obj)</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;found a&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>in</code>运算符用来判断对象<code>obj</code>是否包含属性<code>a</code>。</p><p><code>in</code>运算符的左侧是一个字符串，表示属性名，右侧是一个对象。它的返回值是一个布尔值。</p><p>TypeScript 语言的类型运算中，<code>in</code>运算符有不同的用法，用来取出（遍历）联合类型的每一个成员类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> U = <span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;b&#x27;</span>|<span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  [<span class="title class_">Prop</span> <span class="keyword">in</span> U]: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">number</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>[Prop in U]</code>表示依次取出联合类型<code>U</code>的每一个成员。</p><p>上一小节的例子也提到，<code>[Prop in keyof Obj]</code>表示取出对象<code>Obj</code>的每一个键名。</p><h2 id="方括号运算符">方括号运算符 <a href="about:blank#%E6%96%B9%E6%8B%AC%E5%8F%B7%E8%BF%90%E7%AE%97%E7%AC%A6">#</a></h2><p>方括号运算符（<code>[]</code>）用于取出对象的键值类型，比如<code>T[K]</code>会返回对象<code>T</code>的属性<code>K</code>的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">alive</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Age 的类型是 number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age</span> = <span class="title class_">Person</span>[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Person['age']</code>返回属性<code>age</code>的类型，本例是<code>number</code>。</p><p>方括号的参数如果是联合类型，那么返回的也是联合类型。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">type Person = &#123;</span><br><span class="line">  age:<span class="built_in"> number</span>;</span><br><span class="line"> <span class="built_in"> name</span>:<span class="built_in"> string</span>;</span><br><span class="line">  alive:<span class="built_in"> boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//<span class="built_in"> number</span><span class="built_in">|string</span></span><br><span class="line">type T = Person[<span class="string">&#x27;age&#x27;</span>|<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">//<span class="built_in"> number</span><span class="built_in">|string</span><span class="built_in">|boolean</span></span><br><span class="line">type A = Person[keyof Person];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，方括号里面是属性名的联合类型，所以返回的也是对应的属性值的联合类型。</p><p>如果访问不存在的属性，会报错。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">T </span>= Person[<span class="symbol">&#x27;notExisted</span>&#x27;]; // 报错</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方括号运算符的参数也可以是属性名的索引类型。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Obj = &#123;</span><br><span class="line">  [key:<span class="keyword">string</span>]: <span class="keyword">number</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// <span class="keyword">number</span></span><br><span class="line"><span class="keyword">type</span> T = Obj[<span class="keyword">string</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Obj</code>的属性名是字符串的索引类型，所以可以写成<code>Obj[string]</code>，代表所有字符串属性名，返回的就是它们的类型<code>number</code>。</p><p>这个语法对于数组也适用，可以使用<code>number</code>作为方括号的参数。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyArray 的类型是 &#123; [key:number]: string &#125;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyArray</span> = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于 (typeof MyArray)[number]</span></span><br><span class="line"><span class="comment">// 返回 string</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = <span class="keyword">typeof</span> <span class="title class_">MyArray</span>[<span class="built_in">number</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>MyArray</code>是一个数组，它的类型实际上是属性名的数值索引，而<code>typeof MyArray[number]</code>的<code>typeof</code>运算优先级高于方括号，所以返回的是所有数值键名的键值类型<code>string</code>。</p><p>注意，方括号里面不能有值的运算。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例一</span></span><br><span class="line"><span class="keyword">const</span> key = <span class="string">&#x27;age&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> Age = Person[key]; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例二</span></span><br><span class="line"><span class="keyword">type</span> Age = Person[<span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;g&#x27;</span> + <span class="string">&#x27;e&#x27;</span>]; <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面两个示例，方括号里面都涉及值的运算，编译时不会进行这种运算，所以会报错。</p><h2 id="extends…-条件运算符">extends…?: 条件运算符 <a href="about:blank#extends-%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6">#</a></h2><p>TypeScript 提供类似 JavaScript 的<code>?:</code>运算符这样的三元运算符，但多出了一个<code>extends</code>关键字。</p><p>条件运算符<code>extends...?:</code>可以根据当前类型是否符合某种条件，返回不同的类型。</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T extends U ? <span class="keyword">X</span> : <span class="keyword">Y</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面式子中的<code>extends</code>用来判断，类型<code>T</code>是否可以赋值给类型<code>U</code>，即<code>T</code>是否为<code>U</code>的子类型，这里的<code>T</code>和<code>U</code>可以是任意类型。</p><p>如果<code>T</code>能够赋值给类型<code>U</code>，表达式的结果为类型<code>X</code>，否则结果为类型<code>Y</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> T = <span class="number">1</span> <span class="keyword">extends</span> <span class="built_in">number</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>1</code>是<code>number</code>的子类型，所以返回<code>true</code>。</p><p>下面是另外一个例子。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">live</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">woof</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> ? <span class="built_in">number</span> : <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">RegExp</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> ? <span class="built_in">number</span> : <span class="built_in">string</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Dog</code>是<code>Animal</code>的子类型，所以<code>T1</code>的类型是<code>number</code>。<code>RegExp</code>不是<code>Animal</code>的子类型，所以<code>T2</code>的类型是<code>string</code>。</p><p>一般来说，调换<code>extends</code>两侧类型，会返回相反的结果。举例来说，有两个类<code>Cat</code>和<code>Animal</code>，前者是后者的子类型，那么<code>Cat extends Animal</code>就为真，而<code>Animal extends Cat</code>就为伪。</p><p>如果需要判断的类型是一个联合类型，那么条件运算符会展开这个联合类型。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(A|B) <span class="keyword">extends</span> <span class="title class_">U</span> ? X : Y</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line">(A <span class="keyword">extends</span> <span class="title class_">U</span> ? X : Y) |</span><br><span class="line">(B <span class="keyword">extends</span> <span class="title class_">U</span> ? X : Y)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>A|B</code>是一个联合类型，进行条件运算时，相当于<code>A</code>和<code>B</code>分别进行运算符，返回结果组成一个联合类型。</p><p>如果不希望联合类型被条件运算符展开，可以把<code>extends</code>两侧的操作数都放在方括号里面。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例一</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ToArray</span>&lt;<span class="title class_">Type</span>&gt; =</span><br><span class="line">  <span class="title class_">Type</span> <span class="keyword">extends</span> <span class="built_in">any</span> ? <span class="title class_">Type</span>[] : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// string[]|number[]</span></span><br><span class="line"><span class="keyword">type</span> T = <span class="title class_">ToArray</span>&lt;<span class="built_in">string</span>|<span class="built_in">number</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例二</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ToArray</span>&lt;<span class="title class_">Type</span>&gt; =</span><br><span class="line">  [<span class="title class_">Type</span>] <span class="keyword">extends</span> [<span class="built_in">any</span>] ? <span class="title class_">Type</span>[] : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (string | number)[]</span></span><br><span class="line"><span class="keyword">type</span> T = <span class="title class_">ToArray</span>&lt;<span class="built_in">string</span>|<span class="built_in">number</span>&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的示例一，传入<code>ToArray&lt;Type&gt;</code>的类型参数是一个联合类型，所以会被展开，返回的也是联合类型。示例二是<code>extends</code>两侧的运算数都放在方括号里面，所以传入的联合类型不会展开，返回的是一个数组。</p><p>条件运算符还可以嵌套使用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">LiteralTypeName</span>&lt;T&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> <span class="literal">undefined</span> ? <span class="string">&quot;undefined&quot;</span> :</span><br><span class="line">  T <span class="keyword">extends</span> <span class="literal">null</span> ? <span class="string">&quot;null&quot;</span> :</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">boolean</span> ? <span class="string">&quot;boolean&quot;</span> :</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">number</span> ? <span class="string">&quot;number&quot;</span> :</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">bigint</span> ? <span class="string">&quot;bigint&quot;</span> :</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">string</span> ? <span class="string">&quot;string&quot;</span> :</span><br><span class="line">  <span class="built_in">never</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例是一个多重判断，返回一个字符串的值类型，对应当前类型。下面是它的用法。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// <span class="string">&quot;bigint&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="type">Result1 </span>= LiteralTypeName&lt;<span class="number">123</span>n&gt;;</span><br><span class="line"></span><br><span class="line">// <span class="string">&quot;string&quot;</span> | <span class="string">&quot;number&quot;</span> | <span class="string">&quot;boolean&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="type">Result2 </span>= LiteralTypeName&lt;<span class="literal">true</span> | <span class="number">1</span> | <span class="string">&#x27;a&#x27;</span>&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="infer-关键字">infer 关键字 <a href="about:blank#infer-%E5%85%B3%E9%94%AE%E5%AD%97">#</a></h2><p><code>infer</code>关键字用来定义泛型里面推断出来的类型参数，而不是外部传入的类型参数。</p><p>它通常跟条件运算符一起使用，用在<code>extends</code>关键字后面的父类型之中。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">Flatten&lt;<span class="keyword">Type</span>&gt; </span>=</span><br><span class="line">  <span class="keyword">Type</span> <span class="type">extends </span><span class="keyword">Array</span>&lt;infer Item&gt; ? Item : <span class="type">Type</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>infer Item</code>表示<code>Item</code>这个参数是 TypeScript 自己推断出来的，不用显式传入，而<code>Flatten&lt;Type&gt;</code>则表示<code>Type</code>这个类型参数是外部传入的。<code>Type extends Array&lt;infer Item&gt;</code>则表示，如果参数<code>Type</code>是一个数组，那么就将该数组的成员类型推断为<code>Item</code>，即<code>Item</code>是从<code>Type</code>推断出来的。</p><p>一旦使用<code>Infer Item</code>定义了<code>Item</code>，后面的代码就可以直接调用<code>Item</code>了。下面是上例的泛型<code>Flatten&lt;Type&gt;</code>的用法。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="built_in">type</span> <span class="built_in">Str</span> = <span class="built_in">Flatten</span>&lt;string[]&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="built_in">type</span> Num = <span class="built_in">Flatten</span>&lt;number&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，第一个例子<code>Flatten&lt;string[]&gt;</code>传入的类型参数是<code>string[]</code>，可以推断出<code>Item</code>的类型是<code>string</code>，所以返回的是<code>string</code>。第二个例子<code>Flatten&lt;number&gt;</code>传入的类型参数是<code>number</code>，它不是数组，所以直接返回自身。</p><p>如果不用<code>infer</code>定义类型参数，那么就要传入两个类型参数。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">Flatten&lt;<span class="keyword">Type</span>, </span>Item&gt; =</span><br><span class="line">  <span class="keyword">Type</span> <span class="type">extends </span><span class="keyword">Array</span>&lt;Item&gt; ? Item : <span class="type">Type</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面是不使用<code>infer</code>的写法，每次调用<code>Flatten</code>的时候，都要传入两个参数，就比较麻烦。</p><p>下面的例子使用<code>infer</code>，推断函数的参数类型和返回值类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ReturnPromise</span>&lt;T&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> (...<span class="attr">args</span>: infer A) =&gt; infer R </span><br><span class="line">  ? <span class="function">(<span class="params">...args: A</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;R&gt; </span><br><span class="line">  : T;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，如果<code>T</code>是函数，就返回这个函数的 Promise 版本，否则原样返回。<code>infer A</code>表示该函数的参数类型为<code>A</code>，<code>infer R</code>表示该函数的返回值类型为<code>R</code>。</p><p>如果不使用<code>infer</code>，就不得不把<code>ReturnPromise&lt;T&gt;</code>写成<code>ReturnPromise&lt;T, A, R&gt;</code>，这样就很麻烦，相当于开发者必须人肉推断编译器可以完成的工作。</p><p>下面是<code>infer</code>提取对象指定属性的例子。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyType</span><span class="operator">&lt;</span>T<span class="operator">&gt;</span> <span class="operator">=</span></span><br><span class="line">  T <span class="keyword">extends</span> &#123;</span><br><span class="line">    a<span class="operator">:</span> infer M,</span><br><span class="line">    b<span class="operator">:</span> infer N</span><br><span class="line">  &#125; <span class="operator">?</span> [M, N] <span class="operator">:</span> never;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法示例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">T</span> <span class="operator">=</span> MyType<span class="operator">&lt;</span>&#123; a<span class="operator">:</span> <span class="type">string</span>; b<span class="operator">:</span> number &#125;<span class="operator">&gt;</span>;</span><br><span class="line"><span class="comment">// [string, number]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>infer</code>提取了参数对象的属性<code>a</code>和属性<code>b</code>的类型。</p><p>下面是<code>infer</code>通过正则匹配提取类型参数的例子。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Str</span> = <span class="string">&#x27;foo-bar&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bar</span> = <span class="title class_">Str</span> <span class="keyword">extends</span> <span class="string">`foo-<span class="subst">$&#123;infer rest&#125;</span>`</span> ? rest : <span class="built_in">never</span> <span class="comment">// &#x27;bar&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>rest</code>是从模板字符串提取的类型参数。</p><h2 id="is-运算符">is 运算符 <a href="about:blank#is-%E8%BF%90%E7%AE%97%E7%AC%A6">#</a></h2><p>函数返回布尔值的时候，可以使用<code>is</code>运算符，限定返回值与参数之间的关系。</p><p><code>is</code>运算符用来描述返回值属于<code>true</code>还是<code>false</code>。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isFish</span><span class="params">(</span></span><br><span class="line"><span class="params">  pet: Fish|Bird</span></span><br><span class="line"><span class="params">)</span>:pet <span class="title function_">is</span> <span class="title function_">Fish</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (pet <span class="keyword">as</span> Fish).swim !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，函数<code>isFish()</code>的返回值类型为<code>pet is Fish</code>，表示如果参数<code>pet</code>类型为<code>Fish</code>，则返回<code>true</code>，否则返回<code>false</code>。</p><p><code>is</code>运算符总是用于描述函数的返回值类型，写法采用<code>parameterName is Type</code>的形式，即左侧为当前函数的参数名，右侧为某一种类型。它返回一个布尔值，表示左侧参数是否属于右侧的类型。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">A </span>= &#123; a: string &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="type">B </span>= &#123; b: string &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title">isTypeA</span>(x: A|B): x <span class="keyword">is</span> A &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> x) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，返回值类型<code>x is A</code>可以准确描述函数体内部的运算逻辑。</p><p><code>is</code>运算符可以用于类型保护。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isCat</span><span class="params">(a:any)</span>: a <span class="title function_">is</span> <span class="title function_">Cat</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a.name === <span class="string">&#x27;kitty&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let x:Cat|Dog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isCat(x)) &#123;</span><br><span class="line">  x.meow(); <span class="comment">// 正确，因为 x 肯定是 Cat 类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，函数<code>isCat()</code>的返回类型是<code>a is Cat</code>，它是一个布尔值。后面的<code>if</code>语句就用这个返回值进行判断，从而起到类型保护的作用，确保<code>x</code>是 Cat 类型，从而<code>x.meow()</code>不会报错（假定<code>Cat</code>类型拥有<code>meow()</code>方法）。</p><p><code>is</code>运算符还有一种特殊用法，就是用在类（class）的内部，描述类的方法的返回值。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">  isStudent():<span class="keyword">this</span> <span class="keyword">is</span> Student &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  isStudent():<span class="keyword">this</span> <span class="keyword">is</span> Student &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>isStudent()</code>方法的返回值类型，取决于该方法内部的<code>this</code>是否为<code>Student</code>对象。如果是的，就返回布尔值<code>true</code>，否则返回<code>false</code>。</p><p>注意，<code>this is T</code>这种写法，只能用来描述方法的返回值类型，而不能用来描述属性的类型。</p><h2 id="模板字符串">模板字符串 <a href="about:blank#%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2">#</a></h2><p>TypeScript 允许使用模板字符串，构建类型。</p><p>模板字符串的最大特点，就是内部可以引用其他类型。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">World</span> = &quot;world&quot;;</span><br><span class="line"></span><br><span class="line">// <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="type">Greeting</span> = `hello $&#123;<span class="type">World</span>&#125;`;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类型<code>Greeting</code>是一个模板字符串，里面引用了另一个字符串类型<code>world</code>，因此<code>Greeting</code>实际上是字符串<code>hello world</code>。</p><p>注意，模板字符串可以引用的类型一共7种，分别是 string、number、bigint、boolean、null、undefined、Enum。引用这7种以外的类型会报错。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">Num</span> = 123;</span><br><span class="line"><span class="keyword">type</span> <span class="type">Obj</span> = &#123; n : 123 &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="type">T1</span> = `$&#123;<span class="type">Num</span>&#125; received`; // 正确</span><br><span class="line"><span class="keyword">type</span> <span class="type">T2</span> = `$&#123;<span class="type">Obj</span>&#125; received`; // 报错</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，模板字符串引用数值类型的别名<code>Num</code>是可以的，但是引用对象类型的别名<code>Obj</code>就会报错。</p><p>模板字符串里面引用的类型，如果是一个联合类型，那么它返回的也是一个联合类型，即模板字符串可以展开联合类型。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">T </span>= <span class="string">&#x27;A&#x27;</span>|<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"></span><br><span class="line">// <span class="string">&quot;A_id&quot;</span>|<span class="string">&quot;B_id&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="type">U </span>= `$&#123;T&#125;_id`;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类型<code>U</code>是一个模板字符串，里面引用了一个联合类型<code>T</code>，导致最后得到的也是一个联合类型。</p><p>如果模板字符串引用两个联合类型，它会交叉展开这两个类型。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">T </span>= <span class="string">&#x27;A&#x27;</span>|<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="type">U </span>= <span class="string">&#x27;1&#x27;</span>|<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"></span><br><span class="line">// <span class="symbol">&#x27;A1</span><span class="string">&#x27;|&#x27;</span>A2<span class="string">&#x27;|&#x27;</span>B1<span class="string">&#x27;|&#x27;</span>B2&#x27;</span><br><span class="line"><span class="keyword">type</span> <span class="type">V </span>= `$&#123;T&#125;$&#123;U&#125;`;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>T</code>和<code>U</code>都是联合类型，各自有两个成员，模板字符串里面引用了这两个类型，最后得到的就是一个4个成员的联合类型。</p><h2 id="satisfies-运算符">satisfies 运算符 <a href="about:blank#satisfies-%E8%BF%90%E7%AE%97%E7%AC%A6">#</a></h2><p><code>satisfies</code>运算符用来检测某个值是否符合指定类型。有时候，不方便将某个值指定为某种类型，但是希望这个值符合类型条件，这时候就可以用<code>satisfies</code>运算符对其进行检测。<a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-9.html#the-satisfies-operator">TypeScript 4.9</a>添加了这个运算符。</p><p>举例来说，有一个对象的属性名拼写错误。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const <span class="attr">palette</span> <span class="operator">=</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">  red:</span> [<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line"><span class="symbol">  green:</span> <span class="string">&quot;#00ff00&quot;</span>,</span><br><span class="line"><span class="symbol">  bleu:</span> [<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>] <span class="comment">// 属性名拼写错误</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，对象<code>palette</code>的属性名拼写错了，将<code>blue</code>拼成了<code>bleu</code>，我们希望通过指定类型，发现这个错误。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Colors</span> = <span class="string">&quot;red&quot;</span> | <span class="string">&quot;green&quot;</span> | <span class="string">&quot;blue&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">RGB</span> = [<span class="built_in">number</span>, <span class="built_in">number</span>, <span class="built_in">number</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">palette</span>: <span class="title class_">Record</span>&lt;<span class="title class_">Colors</span>, <span class="built_in">string</span>|<span class="variable constant_">RGB</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">red</span>: [<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  <span class="attr">green</span>: <span class="string">&quot;#00ff00&quot;</span>,</span><br><span class="line">  <span class="attr">bleu</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>] <span class="comment">// 报错</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，变量<code>palette</code>的类型被指定为<code>Record&lt;Colors, string|RGB&gt;</code>，这是一个类型工具，用来返回一个对象，详细介绍见《类型工具》一章。简单说，它的第一个类型参数指定对象的属性名，第二个类型参数指定对象的属性值。</p><p>本例的<code>Record&lt;Colors, string|RGB&gt;</code>，就表示变量<code>palette</code>的属性名应该符合类型<code>Colors</code>，属性值应该符合类型<code>string|RGB</code>，要么是字符串，要么是元组<code>RGB</code>。属性名<code>bleu</code>不符合类型<code>Colors</code>，所以就报错了。</p><p>这样的写法，虽然可以发现属性名的拼写错误，但是带来了新的问题。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greenComponent = <span class="keyword">palette</span>.green.substring(1, 6); <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>palette.green</code>属性调用<code>substring()</code>方法会报错，原因是这个方法只有字符串才有，而<code>palette.green</code>的类型是<code>srting|RGB</code>，除了字符串，还可能是元组<code>RGB</code>，而元组并不存在<code>substring()</code>方法，所以报错了。</p><p>如果要避免报错，要么精确给出变量<code>palette</code>每个属性的类型，要么对<code>palette.green</code>的值进行类型缩小。两种做法都比较麻烦，也不是很有必要。</p><p>这时就可以使用<code>satisfies</code>运算符，对<code>palette</code>进行类型检测，但是不改变 TypeScript 对<code>palette</code>的类型推断。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Colors</span> = <span class="string">&quot;red&quot;</span> | <span class="string">&quot;green&quot;</span> | <span class="string">&quot;blue&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">RGB</span> = [<span class="built_in">number</span>, <span class="built_in">number</span>, <span class="built_in">number</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> palette = &#123;</span><br><span class="line">  <span class="attr">red</span>: [<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  <span class="attr">green</span>: <span class="string">&quot;#00ff00&quot;</span>,</span><br><span class="line">  <span class="attr">bleu</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>] <span class="comment">// 报错</span></span><br><span class="line">&#125; satisfies <span class="title class_">Record</span>&lt;<span class="title class_">Colors</span>, <span class="built_in">string</span>|<span class="variable constant_">RGB</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> greenComponent = palette.<span class="property">green</span>.<span class="title function_">substring</span>(<span class="number">1</span>); <span class="comment">// 不报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，变量<code>palette</code>的值后面增加了<code>satisfies Record&lt;Colors, string|RGB&gt;</code>，表示该值必须满足<code>Record&lt;Colors, string|RGB&gt;</code>这个条件，所以能够检测出属性名<code>bleu</code>的拼写错误。同时，它不会改变<code>palette</code>的类型推断，所以，TypeScript 知道<code>palette.green</code>是一个字符串，对其调用<code>substring()</code>方法就不会报错。</p><p><code>satisfies</code>也可以检测属性值。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> palette = &#123;</span><br><span class="line">  <span class="built_in">red</span>: [<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  <span class="built_in">green</span>: <span class="string">&quot;#00ff00&quot;</span>,</span><br><span class="line">  <span class="built_in">blue</span>: [<span class="number">0</span>, <span class="number">0</span>] <span class="comment">// 报错</span></span><br><span class="line">&#125; satisfies Record&lt;Colors, string|RGB&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，属性<code>blue</code>的值只有两个成员，不符合元组<code>RGB</code>必须有三个成员的条件，从而报错了。</p><p>本文转自 <a href="https://wangdoc.com/typescript/operator">https://wangdoc.com/typescript/operator</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">??TypeScript 类型运算符</summary>
    
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript d.ts 类型声明文件</title>
    <link href="https://www.fomal.cc/posts/26.html"/>
    <id>https://www.fomal.cc/posts/26.html</id>
    <published>2023-06-20T10:50:00.000Z</published>
    <updated>2023-06-20T10:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>d.ts 类型声明文件</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><h2 id="简介">简介 <a href="about:blank#%E7%AE%80%E4%BB%8B">#</a></h2><p>单独使用的模块，一般会同时提供一个单独的类型声明文件（declaration file），把本模块的外部接口的所有类型都写在这个文件里面，便于模块使用者了解接口，也便于编译器检查使用者的用法是否正确。</p><p>类型声明文件里面只有类型代码，没有具体的代码实现。它的文件名一般为<code>[模块名].d.ts</code>的形式，其中的<code>d</code>表示 declaration（声明）。</p><p>举例来说，有一个模块的代码如下。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const maxInterval = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title">getArrayLength</span>(arr) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">arr.length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  getArrayLength,</span><br><span class="line">  maxInterval,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它的类型声明文件可以写成下面这样。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">export</span> function <span class="title">getArrayLength</span><span class="params">(arr: any[])</span>: number;</span></span><br><span class="line"><span class="keyword">export</span> <span class="type">const</span> maxInterval: <span class="number">12</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>类型声明文件也可以使用<code>export =</code>命令，输出对外接口。下面是 moment 模块的类型声明文件的例子。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;moment&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">moment</span>(<span class="params"></span>): <span class="built_in">any</span>;</span><br><span class="line">  <span class="keyword">export</span> = moment;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，模块<code>moment</code>内部有一个函数<code>moment()</code>，而<code>export =</code>表示<code>module.exports</code>输出的就是这个函数。</p><p>除了使用<code>export =</code>，模块输出在类型声明文件中，也可以使用<code>export default</code>表示。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块输出</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="number">3.142</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型输出文件</span></span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">pi</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pi;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">pi</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">export</span>= pi;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，模块输出的是一个整数，那么可以用<code>export default</code>或<code>export =</code>表示输出这个值。</p><p>下面是一个如何使用类型声明文件的简单例子。有一个类型声明文件<code>types.d.ts</code>。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types.d.ts</span></span><br><span class="line">export <span class="keyword">interface</span> <span class="symbol">Character</span> &#123;</span><br><span class="line">  catchphrase?: <span class="built_in">string</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，就可以在 TypeScript 脚本里面导入该文件声明的类型。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">index</span>.ts</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="type">Character</span> &#125; <span class="keyword">from</span> &quot;./types&quot;;</span><br><span class="line"></span><br><span class="line">export const <span class="type">character</span>:<span class="type">Character</span> = &#123;</span><br><span class="line">  catchphrase: &quot;Yee-haw!&quot;,</span><br><span class="line">  <span class="type">name</span>: &quot;Sandy Cheeks&quot;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>类型声明文件也可以包括在项目的 tsconfig.json 文件里面，这样的话，编译器打包项目时，会自动将类型声明文件加入编译，而不必在每个脚本里面加载类型声明文件。比如，moment 模块的类型声明文件是<code>moment.d.ts</code>，使用 moment 模块的项目可以将其加入项目的 tsconfig.json 文件。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">&quot;files&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;src/index.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typings/moment.d.ts&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类型声明文件的来源">类型声明文件的来源 <a href="about:blank#%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%A5%E6%BA%90">#</a></h2><p>类型声明文件主要有以下三种来源。</p><ul><li>TypeScript 编译器自动生成。</li><li>TypeScript 内置类型文件。</li><li>外部模块的类型声明文件，需要自己安装。</li></ul><h3 id="自动生成">自动生成 <a href="about:blank#%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90">#</a></h3><p>只要使用编译选项<code>declaration</code>，编译器就会在编译时自动生成单独的类型声明文件。</p><p>下面是在<code>tsconfig.json</code>文件里面，打开这个选项。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你也可以在命令行打开这个选项。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tsc <span class="comment">--declaration</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="内置声明文件">内置声明文件 <a href="about:blank#%E5%86%85%E7%BD%AE%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6">#</a></h3><p>安装 TypeScript 语言时，会同时安装一些内置的类型声明文件，主要是内置的全局对象（JavaScript 语言接口和运行环境 API）的类型声明。</p><p>这些内置声明文件位于 TypeScript 语言安装目录的<code>lib</code>文件夹内，数量大概有几十个，下面是其中一些主要文件。</p><ul><li>lib.d.ts</li><li>lib.dom.d.ts</li><li>lib.es2015.d.ts</li><li>lib.es2016.d.ts</li><li>lib.es2017.d.ts</li><li>lib.es2018.d.ts</li><li>lib.es2019.d.ts</li><li>lib.es2020.d.ts</li><li>lib.es5.d.ts</li><li>lib.es6.d.ts</li></ul><p>这些内置声明文件的文件名统一为“lib.[description].d.ts”的形式，其中<code>description</code>部分描述了文件内容。比如，<code>lib.dom.d.ts</code>这个文件就描述了 DOM 结构的类型。</p><p>如果开发者想了解全局对象的类型接口（比如 ES6 全局对象的类型），那么就可以去查看这些内置声明文件。</p><p>TypeScript 编译器会自动根据编译目标<code>target</code>的值，加载对应的内置声明文件，所以不需要特别的配置。但是，可以使用编译选项<code>lib</code>，指定加载哪些内置声明文件。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;lib&quot;</span>: [<span class="string">&quot;dom&quot;</span>, <span class="string">&quot;es2021&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>lib</code>选项指定加载<code>dom</code>和<code>es2021</code>这两个内置类型声明文件。</p><p>编译选项<code>noLib</code>会禁止加载任何内置声明文件。</p><h3 id="外部类型声明文件">外部类型声明文件 <a href="about:blank#%E5%A4%96%E9%83%A8%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6">#</a></h3><p>如果项目中使用了外部的某个第三方代码库，那么就需要这个库的类型声明文件。</p><p>这时又分成三种情况。</p><p>（1）这个库自带了类型声明文件。</p><p>一般来说，如果这个库的源码包含了<code>[vendor].d.ts</code>文件，那么就自带了类型声明文件。其中的<code>vendor</code>表示这个库的名字，比如<code>moment</code>这个库就自带<code>moment.d.ts</code>。使用这个库可能需要单独加载它的类型声明文件。</p><p>（2）这个库没有自带，但是可以找到社区制作的类型声明文件。</p><p>第三方库如果没有提供类型声明文件，社区往往会提供。TypeScript 社区主要使用 <a href="https://github.com/DefinitelyTyped/DefinitelyTyped">DefinitelyTyped 仓库</a>，各种类型声明文件都会提交到那里，已经包含了几千个第三方库。</p><p>这些声明文件都会作为一个单独的库，发布到 npm 的<code>@types</code>名称空间之下。比如，jQuery 的类型声明文件就发布成<code>@types/jquery</code>这个库，使用时安装这个库就可以了。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> install @types/jquery --save-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行上面的命令，<code>@types/jquery</code>这个库就安装到项目的<code>node_modules/@types/jquery</code>目录，里面的<code>index.d.ts</code>文件就是 jQuery 的类型声明文件。如果类型声明文件不是<code>index.d.ts</code>，那么就需要在<code>package.json</code>的<code>types</code>或<code>typings</code>字段，指定类型声明文件的文件名。</p><p>TypeScript 会自动加载<code>node_modules/@types</code>目录下的模块，但可以使用编译选项<code>typeRoots</code>改变这种行为。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;typeRoots&quot;</span>: [<span class="string">&quot;./typings&quot;</span>, <span class="string">&quot;./vendor/types&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例表示，TypeScript 不再去<code>node_modules/@types</code>目录，而是去跟当前<code>tsconfig.json</code>同级的<code>typings</code>和<code>vendor/types</code>子目录，加载类型模块了。</p><p>默认情况下，TypeScript 会自动加载<code>typeRoots</code>目录里的所有模块，编译选项<code>types</code>可以指定加载哪些模块。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;types&quot;</span> : [<span class="string">&quot;jquery&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面设置中，<code>types</code>属性是一个数组，成员是所要加载的类型模块，要加载几个模块，这个数组就有几个成员，每个类型模块在<code>typeRoots</code>目录下都有一个自己的子目录。这样的话，TypeScript 就会自动去<code>jquery</code>子目录，加载 jQuery 的类型声明文件。</p><p>（3）找不到类型声明文件，需要自己写。</p><p>有时实在没有第三方库的类型声明文件，又很难完整给出该库的类型描述，这时你可以告诉 TypeScript 相关对象的类型是<code>any</code>。比如，使用 jQuery 的脚本可以写成下面这样。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="attr">$</span>:<span class="built_in">any</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> <span class="title class_">JQuery</span> = <span class="built_in">any</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="attr">$</span>:<span class="title class_">JQuery</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码表示，jQuery 的<code>$</code>对象是外部引入的，类型是<code>any</code>，也就是 TypeScript 不用对它进行类型检查。</p><p>也可以采用下面的写法，将整个外部模块的类型设为<code>any</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> <span class="string">&#x27;模块名&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有了上面的命令，指定模块的所有接口都将视为<code>any</code>类型。</p><h2 id="declare-关键字">declare 关键字 <a href="about:blank#declare-%E5%85%B3%E9%94%AE%E5%AD%97">#</a></h2><p>类型声明文件只包含类型描述，不包含具体实现，所以非常适合使用 declare 语句来描述类型。declare 关键字的具体用法，详见《declare 关键字》一章，这里讲解如何在类型声明文件里面使用它。</p><p>类型声明文件里面，变量的类型描述必须使用<code>declare</code>命令，否则会报错，因为变量声明语句是值相关代码。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> foo:<span class="keyword">string</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>interface 类型有没有<code>declare</code>都可以，因为 interface 是完全的类型代码。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="symbol">Foo</span> &#123;&#125; <span class="comment">// 正确</span></span><br><span class="line">declare <span class="keyword">interface</span> <span class="symbol">Foo</span> &#123;&#125; <span class="comment">// 正确</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>类型声明文件里面，顶层可以使用<code>export</code>命令，也可以不用，除非使用者脚本会显式使用<code>export</code>命令输入类型。</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Data &#123;</span><br><span class="line">  <span class="keyword">version</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是类型声明文件的一些例子。先看 moment 模块的类型描述文件<code>moment.d.ts</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> module <span class="string">&#x27;moment&#x27;</span> &#123;</span><br><span class="line">  export <span class="class"><span class="keyword">interface</span> <span class="title">Moment</span> </span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">format</span>(<span class="attr">format</span>:<span class="keyword">string</span>): <span class="keyword">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">add</span>(</span><br><span class="line">      <span class="attr">amount</span>: number,</span><br><span class="line">      <span class="attr">unit</span>: <span class="string">&#x27;days&#x27;</span> | <span class="string">&#x27;months&#x27;</span> | <span class="string">&#x27;years&#x27;</span></span><br><span class="line">    ): Moment;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">subtract</span>(</span><br><span class="line">      <span class="attr">amount</span>:number,</span><br><span class="line">      <span class="attr">unit</span>:<span class="string">&#x27;days&#x27;</span> | <span class="string">&#x27;months&#x27;</span> | <span class="string">&#x27;years&#x27;</span></span><br><span class="line">    ): Moment;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">moment</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    input?: <span class="keyword">string</span> | Date</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>): <span class="title">Moment</span></span>;</span><br><span class="line"></span><br><span class="line">  export <span class="keyword">default</span> moment;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，可以注意一下默认接口<code>moment()</code>的写法。</p><p>下面是 D3 库的类型声明文件<code>D3.d.ts</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> D3 &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Selectors</span> &#123;</span><br><span class="line">    <span class="attr">select</span>: &#123;</span><br><span class="line">      (<span class="attr">selector</span>: <span class="built_in">string</span>): <span class="title class_">Selection</span>;</span><br><span class="line">      (<span class="attr">element</span>: <span class="title class_">EventTarget</span>): <span class="title class_">Selection</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Base</span> <span class="keyword">extends</span> <span class="title class_">Selectors</span> &#123;</span><br><span class="line">    <span class="attr">event</span>: <span class="title class_">Event</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="attr">d3</span>: <span class="variable constant_">D3</span>.<span class="property">Base</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模块发布">模块发布 <a href="about:blank#%E6%A8%A1%E5%9D%97%E5%8F%91%E5%B8%83">#</a></h2><p>当前模块如果包含自己的类型声明文件，可以在 package.json 文件里面添加一个<code>types</code>字段或<code>typings</code>字段，指明类型声明文件的位置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;awesome&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Vandelay Industries&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./lib/main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./lib/main.d.ts&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>types</code>字段给出了类型声明文件的位置。</p><p>注意，如果类型声明文件名为<code>index.d.ts</code>，且在项目的根目录中，那就不需要在<code>package.json</code>里面注明了。</p><p>有时，类型声明文件会单独发布成一个 npm 模块，这时用户就必须同时加载该模块。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;browserify-typescript-extension&quot;</span>,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;Vandelay Industries&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;./lib/main.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;types&quot;</span>: <span class="string">&quot;./lib/main.d.ts&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;browserify&quot;</span>: <span class="string">&quot;latest&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@types/browserify&quot;</span>: <span class="string">&quot;latest&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typescript&quot;</span>: <span class="string">&quot;next&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例是一个模块的 package.json 文件，该模块需要 browserify 模块。由于后者的类型声明文件是一个单独的模块<code>@types/browserify</code>，所以还需要加载那个模块。</p><h2 id="三斜杠命令">三斜杠命令 <a href="about:blank#%E4%B8%89%E6%96%9C%E6%9D%A0%E5%91%BD%E4%BB%A4">#</a></h2><p>如果类型声明文件的内容非常多，可以拆分成多个文件，然后入口文件使用三斜杠命令，加载其他拆分后的文件。</p><p>举例来说，入口文件是<code>main.d.ts</code>，里面的接口定义在<code>interfaces.d.ts</code>，函数定义在<code>functions.d.ts</code>。那么，<code>main.d.ts</code>里面可以用三斜杠命令，加载后面两个文件。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;reference path<span class="operator">=</span><span class="string">&quot;./interfaces.d.ts&quot;</span> /&gt;</span><br><span class="line">/// &lt;reference path<span class="operator">=</span><span class="string">&quot;./functions.d.ts&quot;</span> /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>三斜杠命令（<code>///</code>）是一个 TypeScript 编译器命令，用来指定编译器行为。它只能用在文件的头部，如果用在其他地方，会被当作普通的注释。另外，若一个文件中使用了三斜线命令，那么在三斜线命令之前只允许使用单行注释、多行注释和其他三斜线命令，否则三斜杠命令也会被当作普通的注释。</p><p>除了拆分类型声明文件，三斜杠命令也可以用于普通脚本加载类型声明文件。</p><p>三斜杠命令主要包含三个参数，代表三种不同的命令。</p><ul><li>path</li><li>types</li><li>lib</li></ul><p>下面依次进行讲解。</p><h3 id="reference-path"><code>/// &lt;reference path=&quot;&quot; /&gt;</code> <a href="about:blank#-reference-path-">#</a></h3><p><code>/// &lt;reference path=&quot;&quot; /&gt;</code>是最常见的三斜杠命令，告诉编译器在编译时需要包括的文件，常用来声明当前脚本依赖的类型文件。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;reference path=&quot;./lib.ts&quot; /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count = <span class="keyword">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例表示，当前脚本依赖于<code>./lib.ts</code>，里面是<code>add()</code>的定义。编译当前脚本时，还会同时编译<code>./lib.ts</code>。编译产物会有两个 JS 文件，一个当前脚本，另一个就是<code>./lib.js</code>。</p><p>下面的例子是当前脚本依赖于 Node.js 类型声明文件。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;reference path<span class="operator">=</span><span class="string">&quot;node.d.ts&quot;</span>/&gt;</span><br><span class="line">import * as URL from <span class="string">&quot;url&quot;</span><span class="comment">;</span></span><br><span class="line">let myUrl <span class="operator">=</span> URL.parse(<span class="string">&quot;https://www.typescriptlang.org&quot;</span>)<span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译器会在预处理阶段，找出所有三斜杠引用的文件，将其添加到编译列表中，然后一起编译。</p><p><code>path</code>参数指定了所引入文件的路径。如果该路径是一个相对路径，则基于当前脚本的路径进行计算。</p><p>使用该命令时，有以下两个注意事项。</p><ul><li><code>path</code>参数必须指向一个存在的文件，若文件不存在会报错。</li><li><code>path</code>参数不允许指向当前文件。</li></ul><p>默认情况下，每个三斜杠命令引入的脚本，都会编译成单独的 JS 文件。如果希望编译后只产出一个合并文件，可以使用编译选项<code>outFile</code>。但是，<code>outFile</code>编译选项不支持合并 CommonJS 模块和 ES 模块，只有当编译参数<code>module</code>的值设为 None、System 或 AMD 时，才能编译成一个文件。</p><p>如果打开了编译参数<code>noResolve</code>，则忽略三斜杠指令。将其当作一般的注释，原样保留在编译产物中。</p><h3 id="reference-types"><code>/// &lt;reference types=&quot;&quot; /&gt;</code> <a href="about:blank#-reference-types-">#</a></h3><p>types 参数用来告诉编译器当前脚本依赖某个 DefinitelyTyped 类型库，通常安装在<code>node_modules/@types</code>目录。</p><p>types 参数的值是类型库的名称，也就是安装到<code>node_modules/@types</code>目录中的子目录的名字。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;reference types<span class="operator">=</span><span class="string">&quot;node&quot;</span> /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，这个三斜杠命令表示编译时添加 Node.js 的类型库，实际添加的脚本是<code>node_modules</code>目录里面的<code>@types/node/index.d.ts</code>。</p><p>可以看到，这个命令的作用类似于<code>import</code>命令。</p><p>注意，这个命令只在你自己手写类型声明文件（<code>.d.ts</code>文件）时，才有必要用到，也就是说，只应该用在<code>.d.ts</code>文件中，普通的<code>.ts</code>脚本文件不需要写这个命令。如果是普通的<code>.ts</code>脚本，可以使用<code>tsconfig.json</code>文件的<code>types</code>属性指定依赖的类型库。</p><h3 id="reference-lib"><code>/// &lt;reference lib=&quot;&quot; /&gt;</code> <a href="about:blank#-reference-lib-">#</a></h3><p><code>/// &lt;reference lib=&quot;...&quot; /&gt;</code>命令允许脚本文件显式包含内置 lib 库，等同于在<code>tsconfig.json</code>文件里面使用<code>lib</code>属性指定 lib 库。</p><p>前文说过，安装 TypeScript 软件包时，会同时安装一些内置的类型声明文件，即内置的 lib 库。这些库文件位于 TypeScript 安装目录的<code>lib</code>文件夹中，它们描述了 JavaScript 语言和引擎的标准 API。</p><p>库文件并不是固定的，会随着 TypeScript 版本的升级而更新。库文件统一使用“lib.[description].d.ts”的命名方式，而<code>/// &lt;reference lib=&quot;&quot; /&gt;</code>里面的<code>lib</code>属性的值就是库文件名的<code>description</code>部分，比如<code>lib=&quot;es2015&quot;</code>就表示加载库文件<code>lib.es2015.d.ts</code>。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;reference lib<span class="operator">=</span><span class="string">&quot;es2017.string&quot;</span> /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>es2017.string</code>对应的库文件就是<code>lib.es2017.string.d.ts</code>。</p><p>本文转自 <a href="https://wangdoc.com/typescript/d.ts">https://wangdoc.com/typescript/d.ts</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">??TypeScript d.ts 类型声明文件</summary>
    
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript declare 关键字</title>
    <link href="https://www.fomal.cc/posts/25.html"/>
    <id>https://www.fomal.cc/posts/25.html</id>
    <published>2023-06-19T10:50:00.000Z</published>
    <updated>2023-06-19T10:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>declare 关键字</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><h2 id="简介">简介 <a href="about:blank#%E7%AE%80%E4%BB%8B">#</a></h2><p>declare 关键字用来告诉编译器，某个类型是存在的，可以在当前文件中使用。</p><p>它的主要作用，就是让当前文件可以使用其他文件声明的类型。举例来说，自己的脚本使用外部库定义的函数，编译器会因为不知道外部函数的类型定义而报错，这时就可以在自己的脚本里面使用<code>declare</code>关键字，告诉编译器外部函数的类型。这样的话，编译单个脚本就不会因为使用了外部类型而报错。</p><p>declare 关键字可以描述以下类型。</p><ul><li>变量（const、let、var 命令声明）</li><li>type 或者 interface 命令声明的类型</li><li>class</li><li>enum</li><li>函数（function）</li><li>模块（module）</li><li>命名空间（namespace）</li></ul><p>declare 关键字的重要特点是，它只是通知编译器某个类型是存在的，不用给出具体实现。比如，只描述函数的类型，不给出函数的实现，如果不使用<code>declare</code>，这是做不到的。</p><p>declare 只能用来描述已经存在的变量和数据结构，不能用来声明新的变量和数据结构。另外，所有 declare 语句都不会出现在编译后的文件里面。</p><h2 id="declare-variable">declare variable <a href="about:blank#declare-variable">#</a></h2><p>declare 关键字可以给出外部变量的类型描述。</p><p>举例来说，当前脚本使用了其他脚本定义的全局变量<code>x</code>。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">x</span> <span class="operator">=</span> <span class="number">123</span><span class="comment">; // 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，变量<code>x</code>是其他脚本定义的，当前脚本不知道它的类型，编译器就会报错。</p><p>这时使用 declare 命令给出它的类型，就不会报错了。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> let <span class="keyword">x</span>:number<span class="comment">;</span></span><br><span class="line"><span class="keyword">x</span> <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><p>如果 declare 关键字没有给出变量的具体类型，那么变量类型就是<code>any</code>。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare let x<span class="comment">;</span></span><br><span class="line"><span class="attribute">x</span> <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，变量<code>x</code>的类型为<code>any</code>。</p><p>下面的例子是脚本使用浏览器全局对象<code>document</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="variable language_">document</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，declare 告诉编译器，变量<code>document</code>的类型是外部定义的（具体定义在 TypeScript 内置文件<code>lib.d.ts</code>）。</p><p>如果 TypeScript 没有找到<code>document</code>的外部定义，这里就会假定它的类型是<code>any</code>。</p><p>注意，declare 关键字只用来给出类型描述，是纯的类型代码，不允许设置变量的初始值，即不能涉及值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">x</span>:<span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，declare 设置了变量的初始值，结果就报错了。</p><h2 id="declare-function">declare function <a href="about:blank#declare-function">#</a></h2><p>declare 关键字可以给出外部函数的类型描述。</p><p>下面是一个例子。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">name</span>:<span class="keyword">string</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span>:</span>void;</span><br><span class="line"></span><br><span class="line">sayHello(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，declare 命令给出了<code>sayHello()</code>的类型描述，因此可以直接使用它。</p><p>注意，这种单独的函数类型声明语句，只能用于<code>declare</code>命令后面。一方面，TypeScript 不支持单独的函数类型声明语句；另一方面，declare 关键字后面也不能带有函数的具体实现。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span><span class="params">(</span></span><br><span class="line"><span class="params">  name:string</span></span><br><span class="line"><span class="params">)</span>:void;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span><span class="params">(name)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;你好，&#x27;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，单独写函数的类型声明就会报错。</p><h2 id="declare-class">declare class <a href="about:blank#declare-class">#</a></h2><p>declare 给出 class 类型描述的写法如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>);</span><br><span class="line">  <span class="title function_">eat</span>():<span class="built_in">void</span>;</span><br><span class="line">  <span class="title function_">sleep</span>():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是一个复杂一点的例子。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  <span class="comment">// 静态成员</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">s0</span>():<span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="attr">s1</span>:<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="keyword">public</span> <span class="attr">a</span>:<span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">b</span>:<span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">arg:<span class="built_in">number</span></span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="title function_">m</span>(<span class="attr">x</span>:<span class="built_in">number</span>, <span class="attr">y</span>:<span class="built_in">number</span>):<span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存取器</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">c</span>():<span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">c</span>(<span class="params">value:<span class="built_in">number</span></span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 索引签名</span></span><br><span class="line">  [<span class="attr">index</span>:<span class="built_in">string</span>]:<span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同样的，declare 后面不能给出 Class 的具体实现或初始值。</p><h2 id="declare-module，declare-namespace">declare module，declare namespace <a href="about:blank#declare-moduledeclare-namespace">#</a></h2><p>如果想把变量、函数、类组织在一起，可以将 declare 与 module 或 namespace 一起使用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> <span class="title class_">AnimalLib</span> &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>);</span><br><span class="line">    <span class="title function_">eat</span>():<span class="built_in">void</span>;</span><br><span class="line">    <span class="title function_">sleep</span>():<span class="built_in">void</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">Animals</span> = <span class="string">&#x27;Fish&#x27;</span> | <span class="string">&#x27;Dog&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="title class_">AnimalLib</span> &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>);</span><br><span class="line">    <span class="title function_">eat</span>(): <span class="built_in">void</span>;</span><br><span class="line">    <span class="title function_">sleep</span>(): <span class="built_in">void</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">Animals</span> = <span class="string">&#x27;Fish&#x27;</span> | <span class="string">&#x27;Dog&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，declare 关键字给出了 module 或 namespace 的类型描述。</p><p>declare module 和 declare namespace 里面，加不加 export 关键字都可以。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">var</span> <span class="attr">a</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;io&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">readFile</span>(<span class="params">filename:<span class="built_in">string</span></span>):<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，namespace 和 module 里面使用了 export 关键字。</p><p>下面的例子是当前脚本使用了<code>myLib</code>这个外部库，它有方法<code>makeGreeting()</code>和属性<code>numberOfGreetings</code>。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let result = myLib.makeGreeting(<span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;欢迎词：&#x27;</span> + result);</span><br><span class="line"></span><br><span class="line">let <span class="built_in">count</span> = myLib.numberOfGreetings;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>myLib</code>的类型描述就可以这样写。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> myLib &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">makeGreeting</span>(<span class="params">s:<span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">numberOfGreetings</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>declare 关键字的另一个用途，是为外部模块添加属性和方法时，给出新增部分的类型描述。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Foo</span> <span class="keyword">as</span> <span class="title class_">Bar</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;moduleA&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;moduleA&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="attr">custom</span>: &#123;</span><br><span class="line">      <span class="attr">prop1</span>: <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，从模块<code>moduleA</code>导入了类型<code>Foo</code>，它是一个接口（interface），并将其重命名为<code>Bar</code>，然后用 declare 关键字为<code>Foo</code>增加一个属性<code>custom</code>。这里需要注意的是，虽然接口<code>Foo</code>改名为<code>Bar</code>，但是扩充类型时，还是扩充原始的接口<code>Foo</code>，因为同名 interface 会自动合并类型声明。</p><p>下面是另一个例子。一个项目有多个模块，可以在一个模块中，对另一个模块的接口进行类型扩展。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; A &#125; <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;./a&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>:A = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，脚本<code>a.ts</code>定义了一个接口<code>A</code>，脚本<code>b.ts</code>为这个接口添加了属性<code>y</code>。<code>declare module './a' &#123;&#125;</code>表示对<code>a.ts</code>里面的模块，进行类型声明，而同名 interface 会自动合并，所以等同于扩展类型。</p><p>使用这种语法进行模块的类型扩展时，有两点需要注意：</p><p>（1）<code>declare module NAME</code>语法里面的模块名<code>NAME</code>，跟 import 和 export 的模块名规则是一样的，且必须跟当前文件加载该模块的语句写法（上例<code>import &#123; A &#125; from './a'</code>）保持一致。</p><p>（2）不能创建新的顶层类型。也就是说，只能对<code>a.ts</code>模块中已经存在的类型进行扩展，不允许增加新的顶层类型，比如新定义一个接口<code>B</code>。</p><p>（3）不能对默认的<code>default</code>接口进行扩展，只能对 export 命令输出的命名接口进行扩充。这是因为在进行类型扩展时，需要依赖输出的接口名。</p><p>某些第三方模块，原始作者没有提供接口类型，这时可以在自己的脚本顶部加上下面一行命令。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;模块名&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;hot-new-module&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加上上面的命令以后，外部模块即使没有类型声明，也可以通过编译。但是，从该模块输入的所有接口都将为<code>any</code>类型。</p><p>declare module 描述的模块名可以使用通配符。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;my-plugin-*&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">PluginOptions</span> &#123;</span><br><span class="line">    <span class="attr">enabled</span>: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="attr">priority</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">initialize</span>(<span class="params">options: PluginOptions</span>): <span class="built_in">void</span>;</span><br><span class="line">  <span class="keyword">export</span> = initialize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，模块名<code>my-plugin-*</code>表示适配所有以<code>my-plugin-</code>开头的模块名（比如<code>my-plugin-logger</code>）。</p><h2 id="declare-global">declare global <a href="about:blank#declare-global">#</a></h2><p>如果要为 JavaScript 引擎的原生对象添加属性和方法，可以使用<code>declare global &#123;&#125;</code>语法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="title function_">toSmallString</span>(): <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toSmallString</span> = ():<span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 具体实现</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，为 JavaScript 原生的<code>String</code>对象添加了<code>toSmallString()</code>方法。declare global 给出这个新增方法的类型描述。</p><p>这个示例第一行的空导出语句<code>export &#123;&#125;</code>，作用是强制编译器将这个脚本当作模块处理。这是因为<code>declare global</code>必须用在模块里面。</p><p>下面的示例是为 window 对象（类型接口为<code>Window</code>）添加一个属性<code>myAppConfig</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">    <span class="attr">myAppConfig</span>:<span class="built_in">object</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = <span class="variable language_">window</span>.<span class="property">myAppConfig</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>declare global 只能扩充现有对象的类型描述，不能增加新的顶层类型。</p><h2 id="declare-enum">declare enum <a href="about:blank#declare-enum">#</a></h2><p>declare 关键字给出 enum 类型描述的例子如下，下面的写法都是允许的。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">enum</span> E1 &#123;</span><br><span class="line">  A,</span><br><span class="line">  B,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">enum</span> E2 &#123;</span><br><span class="line">  A = <span class="number">0</span>,</span><br><span class="line">  B = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="keyword">enum</span> E3 &#123;</span><br><span class="line">  A,</span><br><span class="line">  B,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="keyword">enum</span> E4 &#123;</span><br><span class="line">  A = <span class="number">0</span>,</span><br><span class="line">  B = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="declare-module-用于类型声明文件">declare module 用于类型声明文件 <a href="about:blank#declare-module-%E7%94%A8%E4%BA%8E%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6">#</a></h2><p>我们可以为每个模块脚本，定义一个<code>.d.ts</code>文件，把该脚本用到的类型定义都放在这个文件里面。但是，更方便的做法是为整个项目，定义一个大的<code>.d.ts</code>文件，在这个文件里面使用<code>declare module</code>定义每个模块脚本的类型。</p><p>下面的示例是<code>node.d.ts</code>文件的一部分。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;url&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Url</span> &#123;</span><br><span class="line">    protocol?: <span class="built_in">string</span>;</span><br><span class="line">    hostname?: <span class="built_in">string</span>;</span><br><span class="line">    pathname?: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parse</span>(<span class="params"></span></span><br><span class="line"><span class="params">    urlStr: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    parseQueryString?,</span></span><br><span class="line"><span class="params">    slashesDenoteHost?</span></span><br><span class="line"><span class="params">  </span>): <span class="title class_">Url</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;path&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">normalize</span>(<span class="params">p: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">join</span>(<span class="params">...paths: <span class="built_in">any</span>[]</span>): <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">var</span> <span class="attr">sep</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>url</code>和<code>path</code>都是单独的模块脚本，但是它们的类型都定义在<code>node.d.ts</code>这个文件里面。</p><p>使用时，自己的脚本使用三斜杠命令，加载这个类型声明文件。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;reference path<span class="operator">=</span><span class="string">&quot;node.d.ts&quot;</span>/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果没有上面这一行命令，自己的脚本使用外部模块时，就需要在脚本里面使用 declare 命令单独给出外部模块的类型。</p><h2 id="参考链接">参考链接 <a href="about:blank#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">#</a></h2><ul><li><a href="https://timmousk.com/blog/typescript-declare/">How Does The Declare Keyword Work In TypeScript?</a>, Tim Mouskhelichvili</li></ul><p>本文转自 <a href="https://wangdoc.com/typescript/declare">https://wangdoc.com/typescript/declare</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">??TypeScript declare 关键字</summary>
    
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 装饰器（旧语法）</title>
    <link href="https://www.fomal.cc/posts/24.html"/>
    <id>https://www.fomal.cc/posts/24.html</id>
    <published>2023-06-18T10:50:00.000Z</published>
    <updated>2023-06-18T10:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>装饰器（旧语法）</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><p>上一章介绍了装饰器的标准语法，那是在2022年通过成为标准的。但是在此之前，TypeScript 早在2014年就支持装饰器，不过使用的是旧语法。</p><p>装饰器的旧语法与标准语法，有相当大的差异。旧语法以后会被淘汰，但是目前大量现有项目依然在使用它，本章就介绍旧语法下的装饰器。</p><h2 id="experimentalDecorators-编译选项">experimentalDecorators 编译选项 <a href="about:blank#experimentaldecorators-%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9">#</a></h2><p>使用装饰器的旧语法，需要打开<code>--experimentalDecorators</code>编译选项。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">$ tsc</span> <span class="literal">--</span><span class="comment">target ES5</span> <span class="literal">--</span><span class="comment">experimentalDecorators</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此外，还有另外一个编译选项<code>--emitDecoratorMetadata</code>，用来产生一些装饰器的元数据，供其他工具或某些模块（比如 reflect-metadata ）使用。</p><p>这两个编译选项可以在命令行设置，也可以在<code>tsconfig.json</code>文件里面进行设置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;experimentalDecorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;emitDecoratorMetadata&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="装饰器的种类">装饰器的种类 <a href="about:blank#%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E7%A7%8D%E7%B1%BB">#</a></h2><p>按照所装饰的不同对象，装饰器可以分成五类。</p><blockquote><ul><li>类装饰器（Class Decorators）：用于类。</li><li>属性装饰器（Property Decorators）：用于属性。</li><li>方法装饰器（Method Decorators）：用于方法。</li><li>存取器装饰器（Accessor Decorators）：用于类的 set 或 get 方法。</li><li>参数装饰器（Parameter Decorators）：用于方法的参数。</li></ul></blockquote><p>下面是这五种装饰器一起使用的一个示例。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@ClassDecorator</span>() <span class="comment">// （A）</span></span><br><span class="line">class A &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable">@PropertyDecorator</span>() <span class="comment">// （B）</span></span><br><span class="line">  <span class="attribute">name</span>: string;</span><br><span class="line"></span><br><span class="line">  <span class="variable">@MethodDecorator</span>() <span class="comment">//（C）</span></span><br><span class="line">  <span class="built_in">fly</span>(</span><br><span class="line">    <span class="variable">@ParameterDecorator</span>() <span class="comment">// （D）</span></span><br><span class="line">    <span class="attribute">meters</span>: number</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">@AccessorDecorator</span>() <span class="comment">// （E）</span></span><br><span class="line">  get <span class="built_in">egg</span>() &#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">  &#125;</span><br><span class="line">  set <span class="built_in">egg</span>(e) &#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，A 是类装饰器，B 是属性装饰器，C 是方法装饰器，D 是参数装饰器，E 是存取器装饰器。</p><p>注意，构造方法没有方法装饰器，只有参数装饰器。类装饰器其实就是在装饰构造方法。</p><p>另外，装饰器只能用于类，要么应用于类的整体，要么应用于类的内部成员，不能用于独立的函数。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Decorator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;In Decorator&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Decorator <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decorated</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;in decorated&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，装饰器用于一个普通函数，这是无效的，结果报错。</p><h2 id="类装饰器">类装饰器 <a href="about:blank#%E7%B1%BB%E8%A3%85%E9%A5%B0%E5%99%A8">#</a></h2><p>类装饰器应用于类（class），但实际上是应用于类的构造方法。</p><p>类装饰器有唯一参数，就是构造方法，可以在装饰器内部，对构造方法进行各种改造。如果类装饰器有返回值，就会替换掉原来的构造方法。</p><p>类装饰器的类型定义如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ClassDecorator</span> = &lt;<span class="title class_">TFunction</span> <span class="keyword">extends</span> <span class="title class_">Function</span>&gt;</span><br><span class="line">  <span class="function">(<span class="params">target: TFunction</span>) =&gt;</span> <span class="title class_">TFunction</span> | <span class="built_in">void</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面定义中，类型参数<code>TFunction</code>必须是函数，实际上就是构造方法。类装饰器的返回值，要么是返回处理后的原始构造方法，要么返回一个新的构造方法。</p><p>下面就是一个示例。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">f</span><span class="params">(<span class="keyword">target</span>:any)</span> </span>&#123;</span><br><span class="line">  console.log(<span class="string">&#x27;apply decorator&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">target</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@f</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 输出：apply decorator</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，使用了装饰器<code>@f</code>，因此类<code>A</code>的构造方法会自动传入<code>f</code>。</p><p>类<code>A</code>不需要新建实例，装饰器也会执行。装饰器会在代码加载阶段执行，而不是在运行时执行，而且只会执行一次。</p><p>由于 TypeScript 存在编译阶段，所以装饰器对类的行为的改变，实际上发生在编译阶段。这意味着，TypeScript 装饰器能在编译阶段运行代码，也就是说，它本质就是编译时执行的函数。</p><p>下面再看一个示例。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@sealed</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BugReport</span> &#123;</span><br><span class="line">  <span class="keyword">type</span> = <span class="string">&quot;report&quot;</span>;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">t:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sealed</span>(<span class="params">constructor: <span class="built_in">Function</span></span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">seal</span>(constructor);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">seal</span>(constructor.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，装饰器<code>@sealed()</code>会锁定<code>BugReport</code>这个类，使得它无法新增或删除静态成员和实例成员。</p><p>如果除了构造方法，类装饰器还需要其他参数，可以采取“工厂模式”，即把装饰器写在一个函数里面，该函数可以接受其他参数，执行后返回装饰器。但是，这样就需要调用装饰器的时候，先执行一次工厂函数。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factory</span>(<span class="params">info:string</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;received: &#x27;</span>, info);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target:any</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;apply decorator&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@factory(<span class="string">&#x27;log something&#x27;</span>)</span><br><span class="line">class A &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，函数<code>factory()</code>的返回值才是装饰器，所以加载装饰器的时候，要先执行一次<code>@factory('log something')</code>，才能得到装饰器。这样做的好处是，可以加入额外的参数，本例是参数<code>info</code>。</p><p>总之，<code>@</code>后面要么是一个函数名，要么是函数表达式，甚至可以写出下面这样的代码。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@((<span class="function"><span class="keyword">constructor</span>:</span> <span class="function"><span class="keyword">Function</span>) =&gt; <span class="comment">&#123;</span></span></span><br><span class="line"><span class="comment"><span class="function">  console.log(&#x27;log something&#x27;);</span></span></span><br><span class="line"><span class="comment"><span class="function">&#125;</span>)</span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">InlineDecoratorExample</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="comment"><span class="function">  // ...</span></span></span><br><span class="line"><span class="comment"><span class="function">&#125;</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><p>上面示例中，<code>@</code>后面是一个箭头函数，这也是合法的。</p><p>类装饰器可以没有返回值，如果有返回值，就会替代所装饰的类的构造函数。由于 JavaScript 的类等同于构造函数的语法糖，所以装饰器通常返回一个新的类，对原有的类进行修改或扩展。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function decorator(target:any) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">target</span> </span>&#123;</span><br><span class="line">    value = <span class="number">123</span>;  </span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  value = <span class="number">456</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const foo = <span class="keyword">new</span> <span class="type">Foo</span>();</span><br><span class="line">console.log(foo.value); <span class="comment">// 123</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，装饰器<code>decorator</code>返回一个新的类，替代了原来的类。</p><p>上例的装饰器参数<code>target</code>类型是<code>any</code>，可以改成构造方法，这样就更准确了。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Constructor</span> </span>= &#123;</span><br><span class="line">  <span class="keyword">new</span>(...args: any[]): &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function decorator&lt;<span class="type">T</span> <span class="keyword">extends</span> <span class="type">Constructor</span>&gt; (</span><br><span class="line">  target: <span class="type">T</span></span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">target</span> </span>&#123;</span><br><span class="line">    value = <span class="number">123</span>;  </span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时，装饰器的行为就是下面这样。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="title class_"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="title class_"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line">A = decorator(A) || A;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，装饰器要么返回一个新的类<code>A</code>，要么不返回任何值，<code>A</code>保持装饰器处理后的状态。</p><h2 id="方法装饰器">方法装饰器 <a href="about:blank#%E6%96%B9%E6%B3%95%E8%A3%85%E9%A5%B0%E5%99%A8">#</a></h2><p>方法装饰器用来装饰类的方法，它的类型定义如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MethodDecorator</span> = &lt;T&gt;<span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  target: <span class="built_in">Object</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  propertyKey: <span class="built_in">string</span>|<span class="built_in">symbol</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  descriptor: TypedPropertyDescriptor&lt;T&gt;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="title class_">TypedPropertyDescriptor</span>&lt;T&gt; | <span class="built_in">void</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法装饰器一共可以接受三个参数。</p><ul><li>target：（对于类的静态方法）类的构造函数，或者（对于类的实例方法）类的原型。</li><li>propertyKey：所装饰方法的方法名，类型为<code>string|symbol</code>。</li><li>descriptor：所装饰方法的描述对象。</li></ul><p>方法装饰器的返回值（如果有的话），就是修改后的该方法的描述对象，可以覆盖原始方法的描述对象。</p><p>下面是一个示例。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">enumerable</span>(<span class="params">value: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    target: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">    propertyKey: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    descriptor: PropertyDescriptor</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    descriptor.<span class="property">enumerable</span> = value;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="attr">greeting</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">message:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">greeting</span> = message;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@enumerable</span>(<span class="literal">false</span>)</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">greeting</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，方法装饰器<code>@enumerable()</code>装饰 Greeter 类的<code>greet()</code>方法，作用是修改该方法的描述对象的可遍历性属性<code>enumerable</code>。<code>@enumerable(false)</code>表示将该方法修改成不可遍历。</p><p>下面再看一个例子。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logger</span><span class="params">(</span></span><br><span class="line"><span class="params">  target: any,</span></span><br><span class="line"><span class="params">  propertyKey: string,</span></span><br><span class="line"><span class="params">  descriptor: PropertyDescriptor</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> original = descriptor.value;</span><br><span class="line"></span><br><span class="line">  descriptor.value = <span class="keyword">function</span> <span class="params">(<span class="rest_arg">...args</span>)</span> &#123;</span><br><span class="line">    console.log(<span class="string">&#x27;params: &#x27;</span>, ...args);</span><br><span class="line">    <span class="keyword">const</span> result = original.call(<span class="keyword">this</span>, ...args);</span><br><span class="line">    console.log(<span class="string">&#x27;result: &#x27;</span>, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  @logger</span><br><span class="line">  add(x: number, y:number ) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> C()).add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// params:  1 2</span></span><br><span class="line"><span class="comment">// result:  3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，方法装饰器<code>@logger</code>用来装饰<code>add()</code>方法，它的作用是让该方法输出日志。每当<code>add()</code>调用一次，控制台就会打印出参数和运行结果。</p><h2 id="属性装饰器">属性装饰器 <a href="about:blank#%E5%B1%9E%E6%80%A7%E8%A3%85%E9%A5%B0%E5%99%A8">#</a></h2><p>属性装饰器用来装饰属性，类型定义如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PropertyDecorator</span> =</span><br><span class="line">  <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    target: <span class="built_in">Object</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    propertyKey: <span class="built_in">string</span>|<span class="built_in">symbol</span></span></span></span><br><span class="line"><span class="params"><span class="function">  </span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>属性装饰器函数接受两个参数。</p><ul><li>target：（对于实例属性）类的原型对象（prototype），或者（对于静态属性）类的构造函数。</li><li>propertyKey：所装饰属性的属性名，注意类型有可能是字符串，也有可能是 Symbol 值。</li></ul><p>属性装饰器不需要返回值，如果有的话，也会被忽略。</p><p>下面是一个示例。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ValidRange</span>(<span class="params">min:<span class="built_in">number</span>, max:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">target:<span class="built_in">Object</span>, key:<span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, key, &#123;</span><br><span class="line">      <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">v:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; min || v &gt; max) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Not allowed value <span class="subst">$&#123;v&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 Installing ValidRange on year</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="meta">@ValidRange</span>(<span class="number">1920</span>, <span class="number">2020</span>)</span><br><span class="line">  year!: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stud = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错 Not allowed value 2022 </span></span><br><span class="line">stud.<span class="property">year</span> = <span class="number">2022</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，装饰器<code>ValidRange</code>对属性<code>year</code>设立了一个上下限检查器，只要该属性赋值时，超过了上下限，就会报错。</p><p>注意，属性装饰器的第一个参数，对于实例属性是类的原型对象，而不是实例对象（即不是<code>this</code>对象）。这是因为装饰器执行时，类还没有新建实例，所以实例对象不存在。</p><p>由于拿不到<code>this</code>，所以属性装饰器无法获得实例属性的值。这也是它没有在参数里面提供属性描述对象的原因。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logProperty</span>(<span class="params">target: <span class="built_in">Object</span>, member: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> prop = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(target, member);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Property <span class="subst">$&#123;member&#125;</span> <span class="subst">$&#123;prop&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PropertyExample</span> &#123;</span><br><span class="line">  <span class="meta">@logProperty</span></span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span> = <span class="string">&#x27;Foo&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 Property name undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，属性装饰器<code>@logProperty</code>内部想要获取实例属性<code>name</code>的属性描述对象，结果拿到的是<code>undefined</code>。因为上例的<code>target</code>是类的原型对象，不是实例对象，所以拿不到<code>name</code>属性，也就是说<code>target.name</code>是不存在的，所以拿到的是<code>undefined</code>。只有通过<code>this.name</code>才能拿到<code>name</code>属性，但是这时<code>this</code>还不存在。</p><p>属性装饰器不仅无法获得实例属性的值，也不能初始化或修改实例属性，而且它的返回值也会被忽略。因此，它的作用很有限。</p><p>不过，如果属性装饰器设置了当前属性的存取器（getter/setter），然后在构造函数里面就可以对实例属性进行读写。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Min</span>(<span class="params">limit:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span></span><br><span class="line"><span class="params">    target: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="params">    propertyKey: <span class="built_in">string</span></span></span><br><span class="line"><span class="params">  </span>) &#123; </span><br><span class="line">    <span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> getter = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> setter = <span class="keyword">function</span>(<span class="params">newVal:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(newVal.<span class="property">length</span> &lt; limit) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Your password should be bigger than <span class="subst">$&#123;limit&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        value = newVal;</span><br><span class="line">      &#125;      </span><br><span class="line">    &#125;; </span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, propertyKey, &#123;</span><br><span class="line">      <span class="attr">get</span>: getter,</span><br><span class="line">      <span class="attr">set</span>: setter</span><br><span class="line">    &#125;); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Min</span>(<span class="number">8</span>)</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">username: <span class="built_in">string</span>, password: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">username</span> = username;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">password</span> = password;</span><br><span class="line">  &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;Foo&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>); </span><br><span class="line"><span class="comment">// 报错 Your password should be bigger than 8 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，属性装饰器<code>@Min</code>通过设置存取器，拿到了实例属性的值。</p><h2 id="存取器装饰器">存取器装饰器 <a href="about:blank#%E5%AD%98%E5%8F%96%E5%99%A8%E8%A3%85%E9%A5%B0%E5%99%A8">#</a></h2><p>存取器装饰器用来装饰类的存取器（accessor）。所谓“存取器”指的是某个属性的取值器（getter）和存值器（setter）。</p><p>存取器装饰器的类型定义，与方法装饰器一致。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">AccessorDecorator</span> = &lt;T&gt;<span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  target: <span class="built_in">Object</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  propertyKey: <span class="built_in">string</span>|<span class="built_in">symbol</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  descriptor: TypedPropertyDescriptor&lt;T&gt;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="title class_">TypedPropertyDescriptor</span>&lt;T&gt; | <span class="built_in">void</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>存取器装饰器有三个参数。</p><ul><li>target：（对于静态属性的存取器）类的构造函数，或者（对于实例属性的存取器）类的原型。</li><li>propertyKey：存取器的属性名。</li><li>descriptor：存取器的属性描述对象。</li></ul><p>存取器装饰器的返回值（如果有的话），会作为该属性新的描述对象。</p><p>下面是一个示例。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">configurable</span>(<span class="params">value: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    target: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">    propertyKey: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    descriptor: PropertyDescriptor</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    descriptor.<span class="property">configurable</span> = value;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_y</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x:<span class="built_in">number</span>, y:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_x</span> = x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_y</span> = y;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@configurable</span>(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">x</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_x</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@configurable</span>(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">y</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_y</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，装饰器<code>@configurable(false)</code>关闭了所装饰属性（<code>x</code>和<code>y</code>）的属性描述对象的<code>configurable</code>键（即关闭了属性的可配置性）。</p><p>下面的示例是将装饰器用来验证属性值，如果赋值不满足条件就报错。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">validator</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  target: Object,</span></span></span><br><span class="line"><span class="params"><span class="function">  propertyKey: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  descriptor: PropertyDescriptor</span></span></span><br><span class="line"><span class="params"><span class="function"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> originalGet = descriptor.<span class="keyword">get</span>;</span><br><span class="line">  <span class="keyword">const</span> originalSet = descriptor.<span class="keyword">set</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (originalSet) &#123;</span><br><span class="line">    descriptor.<span class="keyword">set</span> = function (val) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(`Invalid <span class="keyword">value</span> <span class="keyword">for</span> $&#123;propertyKey&#125;`);</span><br><span class="line">      &#125;</span><br><span class="line">      originalSet.call(<span class="keyword">this</span>, val);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">C</span> &#123;</span><br><span class="line">  <span class="meta">#foo!: number;</span></span><br><span class="line"></span><br><span class="line">  @validator</span><br><span class="line">  <span class="function"><span class="keyword">set</span> <span class="title">foo</span>(<span class="params">v</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.<span class="meta">#foo = v;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">get</span> <span class="title">foo</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.<span class="meta">#foo;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> C();</span><br><span class="line">c.foo = <span class="number">150</span>;</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，装饰器用自己定义的存值器，取代了原来的存值器，加入了验证条件。</p><p>TypeScript 不允许对同一个属性的存取器（getter 和 setter）使用同一个装饰器，也就是说只能装饰两个存取器里面的一个，且必须是排在前面的那一个，否则报错。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span><br><span class="line">  <span class="meta">#name:string;</span></span><br><span class="line"></span><br><span class="line">  @Decorator</span><br><span class="line">  <span class="function"><span class="keyword">set</span> <span class="title">name</span>(<span class="params">n:<span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.<span class="meta">#name = n;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Decorator <span class="comment">// 报错</span></span><br><span class="line">  <span class="function"><span class="keyword">get</span> <span class="title">name</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.<span class="meta">#name;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>@Decorator</code>同时装饰<code>name</code>属性的存值器和取值器，所以报错。</p><p>但是，下面的写法不会报错。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span><br><span class="line">  <span class="meta">#name:string;</span></span><br><span class="line"></span><br><span class="line">  @Decorator</span><br><span class="line">  <span class="function"><span class="keyword">set</span> <span class="title">name</span>(<span class="params">n:<span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.<span class="meta">#name = n;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">get</span> <span class="title">name</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.<span class="meta">#name;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>@Decorator</code>只装饰它后面第一个出现的存值器（<code>set name()</code>），并不装饰取值器（<code>get name()</code>），所以不报错。</p><p>装饰器之所以不能同时用于同一个属性的存值器和取值器，原因是装饰器可以从属性描述对象上面，同时拿到取值器和存值器，因此只调用一次就够了。</p><h2 id="参数装饰器">参数装饰器 <a href="about:blank#%E5%8F%82%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8">#</a></h2><p>参数装饰器用来装饰构造方法或者其他方法的参数。它的类型定义如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ParameterDecorator</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  target: <span class="built_in">Object</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  propertyKey: <span class="built_in">string</span>|<span class="built_in">symbol</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  parameterIndex: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参数装饰器接受三个参数。</p><ul><li>target：（对于静态方法）类的构造函数，或者（对于类的实例方法）类的原型对象。</li><li>propertyKey：所装饰的方法的名字，类型为<code>string|symbol</code>。</li><li>parameterIndex：当前参数在方法的参数序列的位置（从0开始）。</li></ul><p>该装饰器不需要返回值，如果有的话会被忽略。</p><p>下面是一个示例。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params"></span></span><br><span class="line"><span class="params">  target: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="params">  propertyKey: <span class="built_in">string</span>|<span class="built_in">symbol</span>,</span></span><br><span class="line"><span class="params">  parameterIndex: <span class="built_in">number</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="built_in">String</span>(propertyKey)&#125;</span> NO.<span class="subst">$&#123;parameterIndex&#125;</span> Parameter`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  <span class="title function_">member</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@log</span> x:<span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">    <span class="meta">@log</span> y:<span class="built_in">number</span></span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`member Parameters: <span class="subst">$&#123;x&#125;</span> <span class="subst">$&#123;y&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br><span class="line">c.<span class="title function_">member</span>(<span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// member NO.1 Parameter</span></span><br><span class="line"><span class="comment">// member NO.0 Parameter </span></span><br><span class="line"><span class="comment">// member Parameters: 5 5 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，参数装饰器会输出参数的位置序号。注意，后面的参数会先输出。</p><p>跟其他装饰器不同，参数装饰器主要用于输出信息，没有办法修改类的行为。</p><h2 id="装饰器的执行顺序">装饰器的执行顺序 <a href="about:blank#%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F">#</a></h2><p>前面说过，装饰器只会执行一次，就是在代码解析时执行，哪怕根本没有调用类新建实例，也会执行，而且从此就不再执行了。</p><p>执行装饰器时，按照如下顺序执行。</p><ol><li>实例相关的装饰器。</li><li>静态相关的装饰器。</li><li>构造方法的参数装饰器。</li><li>类装饰器。</li></ol><p>请看下面的示例。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">function</span> <span class="selector-tag">f</span>(<span class="attribute">key</span>:string):<span class="selector-tag">any</span> &#123;</span><br><span class="line">  <span class="selector-tag">return</span> <span class="selector-tag">function</span> () &#123;</span><br><span class="line">    <span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="string">&#x27;执行：&#x27;</span>, key);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="selector-tag">f</span>(<span class="string">&#x27;类装饰器&#x27;</span>)</span><br><span class="line"><span class="selector-tag">class</span> <span class="selector-tag">C</span> &#123;</span><br><span class="line">  <span class="variable">@f</span>(<span class="string">&#x27;静态方法&#x27;</span>)</span><br><span class="line">  static <span class="built_in">method</span>() &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable">@f</span>(<span class="string">&#x27;实例方法&#x27;</span>)</span><br><span class="line">  <span class="built_in">method</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">constructor</span>(<span class="variable">@f</span>(<span class="string">&#x27;构造方法参数&#x27;</span>) <span class="attribute">foo</span>:any) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加载上面的示例，输出如下。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">执行： 实例方法</span><br><span class="line">执行： 静态方法</span><br><span class="line">执行： 构造方法参数</span><br><span class="line">执行： 类装饰器</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同一级装饰器的执行顺序，是按照它们的代码顺序。但是，参数装饰器的执行总是早于方法装饰器。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">function</span> <span class="selector-tag">f</span>(<span class="attribute">key</span>:string):<span class="selector-tag">any</span> &#123;</span><br><span class="line">  <span class="selector-tag">return</span> <span class="selector-tag">function</span> () &#123;</span><br><span class="line">    <span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="string">&#x27;执行：&#x27;</span>, key);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">class</span> <span class="selector-tag">C</span> &#123;</span><br><span class="line">  <span class="variable">@f</span>(<span class="string">&#x27;方法1&#x27;</span>)</span><br><span class="line">  <span class="built_in">m1</span>(<span class="variable">@f</span>(<span class="string">&#x27;参数1&#x27;</span>) <span class="attribute">foo</span>:any) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">@f</span>(<span class="string">&#x27;属性1&#x27;</span>)</span><br><span class="line">  <span class="attribute">p1</span>: number;</span><br><span class="line"></span><br><span class="line">  <span class="variable">@f</span>(<span class="string">&#x27;方法2&#x27;</span>)</span><br><span class="line">  <span class="built_in">m2</span>(<span class="variable">@f</span>(<span class="string">&#x27;参数2&#x27;</span>) <span class="attribute">foo</span>:any) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">@f</span>(<span class="string">&#x27;属性2&#x27;</span>)</span><br><span class="line">  <span class="attribute">p2</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加载上面的示例，输出如下。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">执行： 参数1</span><br><span class="line">执行： 方法1</span><br><span class="line">执行： 属性1</span><br><span class="line">执行： 参数2</span><br><span class="line">执行： 方法2</span><br><span class="line">执行： 属性2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，实例装饰器的执行顺序，完全是按照代码顺序的。但是，同一个方法的参数装饰器，总是早于该方法的方法装饰器执行。</p><p>如果同一个方法或属性有多个装饰器，那么装饰器将顺序加载、逆序执行。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">function</span> <span class="selector-tag">f</span>(<span class="attribute">key</span>:string):<span class="selector-tag">any</span> &#123;</span><br><span class="line">  <span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="string">&#x27;加载：&#x27;</span>, key);</span><br><span class="line">  <span class="selector-tag">return</span> <span class="selector-tag">function</span> () &#123;</span><br><span class="line">    <span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="string">&#x27;执行：&#x27;</span>, key);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">class</span> <span class="selector-tag">C</span> &#123;</span><br><span class="line">  <span class="variable">@f</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">  <span class="variable">@f</span>(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">  <span class="variable">@f</span>(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">  <span class="built_in">m1</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加载： A</span></span><br><span class="line"><span class="comment">// 加载： B</span></span><br><span class="line"><span class="comment">// 加载： C</span></span><br><span class="line"><span class="comment">// 执行： C</span></span><br><span class="line"><span class="comment">// 执行： B</span></span><br><span class="line"><span class="comment">// 执行： A</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果同一个方法有多个参数，那么参数也是顺序加载、逆序执行。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">function</span> <span class="selector-tag">f</span>(<span class="attribute">key</span>:string):<span class="selector-tag">any</span> &#123;</span><br><span class="line">  <span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="string">&#x27;加载：&#x27;</span>, key);</span><br><span class="line">  <span class="selector-tag">return</span> <span class="selector-tag">function</span> () &#123;</span><br><span class="line">    <span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="string">&#x27;执行：&#x27;</span>, key);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">class</span> <span class="selector-tag">C</span> &#123;</span><br><span class="line">  <span class="selector-tag">method</span>(</span><br><span class="line">    <span class="variable">@f</span>(<span class="string">&#x27;A&#x27;</span>) <span class="attribute">a</span>:any,</span><br><span class="line">    <span class="variable">@f</span>(<span class="string">&#x27;B&#x27;</span>) <span class="attribute">b</span>:any,</span><br><span class="line">    <span class="variable">@f</span>(<span class="string">&#x27;C&#x27;</span>) <span class="attribute">c</span>:any,</span><br><span class="line">  ) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加载： A</span></span><br><span class="line"><span class="comment">// 加载： B</span></span><br><span class="line"><span class="comment">// 加载： C</span></span><br><span class="line"><span class="comment">// 执行： C</span></span><br><span class="line"><span class="comment">// 执行： B</span></span><br><span class="line"><span class="comment">// 执行： A</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="为什么装饰器不能用于函数？">为什么装饰器不能用于函数？ <a href="about:blank#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A3%85%E9%A5%B0%E5%99%A8%E4%B8%8D%E8%83%BD%E7%94%A8%E4%BA%8E%E5%87%BD%E6%95%B0">#</a></h2><p>装饰器只能用于类和类的方法，不能用于函数，主要原因是存在函数提升。</p><p>JavaScript 的函数不管在代码的什么位置，都会提升到代码顶部。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">addOne(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title">addOne</span>(n:number) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">n</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，函数<code>addOne()</code>不会因为在定义之前执行而报错，原因就是函数存在提升，会自动提升到代码顶部。</p><p>如果允许装饰器可以用于普通函数，那么就有可能导致意想不到的情况。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add = <span class="keyword">function</span> (<span class="params">target:any</span>) &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@add</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，本来的意图是装饰器<code>@add</code>每使用一次，变量<code>counter</code>就加<code>1</code>，但是实际上会报错，因为函数提升的存在，使得实际执行的代码是下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@add <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> add = <span class="keyword">function</span> (<span class="params">target:any</span>) &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>@add</code>还没有定义就调用了，从而报错。</p><p>总之，由于存在函数提升，使得装饰器不能用于函数。类是不会提升的，所以就没有这方面的问题。</p><p>另一方面，如果一定要装饰函数，可以采用高阶函数的形式直接执行，没必要写成装饰器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loggingDecorator</span>(<span class="params">wrapped</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Starting&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> result = wrapped.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Finished&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wrapped = <span class="title function_">loggingDecorator</span>(doSomething);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>loggingDecorator()</code>是一个装饰器，只要把原始函数传入它执行，就能起到装饰器的效果。</p><h2 id="多个装饰器的合成">多个装饰器的合成 <a href="about:blank#%E5%A4%9A%E4%B8%AA%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E5%90%88%E6%88%90">#</a></h2><p>多个装饰器可以应用于同一个目标对象，可以写在一行。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@f</span> <span class="variable">@g</span> x</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，装饰器<code>@f</code>和<code>@g</code>同时装饰目标对象<code>x</code>。</p><p>多个装饰器也可以写成多行。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@f</span></span><br><span class="line"><span class="variable">@g</span></span><br><span class="line">x</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>多个装饰器的效果，类似于函数的合成，按照从里到外的顺序执行。对于上例来说，就是执行<code>f(g(x))</code>。</p><p>前面也说过，如果<code>f</code>和<code>g</code>是表达式，那么需要先从外到里求值。</p><h2 id="参考链接">参考链接 <a href="about:blank#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">#</a></h2><ul><li><a href="https://saul-mirone.github.io/a-complete-guide-to-typescript-decorator/">A Complete Guide to TypeScript Decorators</a>, by Saul Mirone</li><li><a href="https://techsparx.com/nodejs/typescript/decorators/introduction.html">Deep introduction to using and implementing TypeScript decorators</a>, by David Herron</li><li><a href="https://techsparx.com/nodejs/typescript/decorators/properties.html">Deep introduction to property decorators in TypeScript</a>, by David Herron</li><li><a href="https://techsparx.com/nodejs/typescript/decorators/accessors.html">Deep introduction to accessor decorators in TypeScript</a>, by David Herron</li><li><a href="https://dev.to/danywalls/using-property-decorators-in-typescript-with-a-real-example-44e">Using Property Decorators in Typescript with a real example</a>, by Dany Paredes</li></ul><p>本文转自 <a href="https://wangdoc.com/typescript/decorator-legacy">https://wangdoc.com/typescript/decorator-legacy</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">??TypeScript 装饰器（旧语法）</summary>
    
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 装饰器</title>
    <link href="https://www.fomal.cc/posts/23.html"/>
    <id>https://www.fomal.cc/posts/23.html</id>
    <published>2023-06-17T10:50:00.000Z</published>
    <updated>2023-06-17T10:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>TypeScript 装饰器</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><h2 id="简介">简介 <a href="about:blank#%E7%AE%80%E4%BB%8B">#</a></h2><p>装饰器（Decorator）是一种语法结构，用来在定义时修改类（class）的行为。</p><p>在语法上，装饰器有如下几个特征。</p><p>（1）第一个字符（或者说前缀）是<code>@</code>，后面是一个表达式。</p><p>（2）<code>@</code>后面的表达式，必须是一个函数（或者执行后可以得到一个函数）。</p><p>（3）这个函数接受所修饰对象的一些相关值作为参数。</p><p>（4）这个函数要么不返回值，要么返回一个新对象取代所修饰的目标对象。</p><p>举例来说，有一个函数<code>Injectable()</code>当作装饰器使用，那么需要写成<code>@Injectable</code>，然后放在某个类的前面。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，由于有了装饰器<code>@Injectable</code>，类<code>A</code>的行为在运行时就会发生改变。</p><p>下面就是一个最简单的装饰器。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">simpleDecorator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@simpleDecorator</span><br><span class="line">class A &#123;&#125; <span class="comment">// &quot;hi&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，函数<code>simpleDecorator()</code>用作装饰器，附加在类<code>A</code>之上，后者在代码解析时就会打印一行日志。</p><p>编译上面的代码会报错，提示没有用到装饰器的参数。现在就为装饰器加上参数，让它更像正式运行的代码。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">simpleDecorator</span>(<span class="params"></span></span><br><span class="line"><span class="params">  value:<span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">  context:<span class="built_in">any</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hi, this is <span class="subst">$&#123;context.kind&#125;</span> <span class="subst">$&#123;context.name&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@simpleDecorator</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125; <span class="comment">// &quot;hi, this is class A&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码就可以顺利通过编译了，代码含义这里先不解释。大家只要理解，类<code>A</code>在执行前会先执行装饰器<code>simpleDecorator()</code>，并且会向装饰器自动传入参数就可以了。</p><p>装饰器有多种形式，基本上只要在<code>@</code>符号后面添加表达式都是可以的。下面都是合法的装饰器。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@myFunc</span></span><br><span class="line"><span class="variable">@myFuncFactory</span>(arg1, arg2)</span><br><span class="line"></span><br><span class="line"><span class="variable">@libraryModule</span>.prop</span><br><span class="line"><span class="variable">@someObj</span>.<span class="built_in">method</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">@(<span class="built_in">wrap</span>(dict[<span class="string">&#x27;prop&#x27;</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，<code>@</code>后面的表达式，最终执行后得到的应该是一个函数。</p><p>相比使用子类改变父类，装饰器更加简洁优雅，缺点是不那么直观，功能也受到一些限制。所以，装饰器一般只用来为类添加某种特定行为。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@frozen</span> class Foo &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable">@configurable</span>(false)</span><br><span class="line">  <span class="variable">@enumerable</span>(true)</span><br><span class="line">  <span class="built_in">method</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">@throttle</span>(<span class="number">500</span>)</span><br><span class="line">  <span class="built_in">expensiveMethod</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，一共有四个装饰器，一个用在类本身（<code>@frozen</code>），另外三个用在类的方法（<code>@configurable</code>、<code>@enumerable</code>、<code>@throttle</code>）。它们不仅增加了代码的可读性，清晰地表达了意图，而且提供一种方便的手段，增加或修改类的功能。</p><h2 id="装饰器的版本">装饰器的版本 <a href="about:blank#%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E7%89%88%E6%9C%AC">#</a></h2><p>TypeScript 从早期开始，就支持装饰器。但是，装饰器的语法后来发生了变化。ECMAScript 标准委员会最终通过的语法标准，与 TypeScript 早期使用的语法有很大差异。</p><p>目前，TypeScript 5.0 同时支持两种装饰器语法。标准语法可以直接使用，传统语法需要打开<code>--experimentalDecorators</code>编译参数。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">$ tsc</span> <span class="literal">--</span><span class="comment">target ES5</span> <span class="literal">--</span><span class="comment">experimentalDecorators</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本章介绍装饰器的标准语法，下一章介绍传统语法。</p><h2 id="装饰器的结构">装饰器的结构 <a href="about:blank#%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E7%BB%93%E6%9E%84">#</a></h2><p>装饰器函数的类型定义如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Decorator</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  value: DecoratedValue,</span></span></span><br><span class="line"><span class="params"><span class="function">  context: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    kind: <span class="built_in">string</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="built_in">string</span> | <span class="built_in">symbol</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    addInitializer?(initializer: () =&gt; <span class="built_in">void</span>): <span class="built_in">void</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">static</span>?: <span class="built_in">boolean</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span>?: <span class="built_in">boolean</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    access: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      get?(): <span class="built_in">unknown</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">      set?(value: <span class="built_in">unknown</span>): <span class="built_in">void</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="built_in">void</span> | <span class="title class_">ReplacementValue</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，<code>Decorator</code>是装饰器的类型定义。它是一个函数，使用时会接收到<code>value</code>和<code>context</code>两个参数。</p><ul><li><code>value</code>：所装饰的对象。</li><li><code>context</code>：上下文对象，TypeScript 提供一个原生接口<code>ClassMethodDecoratorContext</code>，描述这个对象。</li></ul><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">function</span> <span class="title function_">decorator</span>(</span><br><span class="line">  <span class="params">value</span>:<span class="params">any</span>,</span><br><span class="line">  <span class="params">context</span>:<span class="params">ClassMethodDecoratorContext</span></span><br><span class="line">) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面是一个装饰器函数，其中第二个参数<code>context</code>的类型就可以写成<code>ClassMethodDecoratorContext</code>。</p><p><code>context</code>对象的属性，根据所装饰对象的不同而不同，其中只有两个属性（<code>kind</code>和<code>name</code>）是必有的，其他都是可选的。</p><p>（1）<code>kind</code>：字符串，表示所装饰对象的类型，可能取以下的值。</p><ul><li>‘class’</li><li>‘method’</li><li>‘getter’</li><li>‘setter’</li><li>‘field’</li><li>‘accessor’</li></ul><p>这表示一共有六种类型的装饰器。</p><p>（2）<code>name</code>：字符串或者 Symbol 值，所装饰对象的名字，比如类名、属性名等。</p><p>（3）<code>addInitializer()</code>：函数，用来添加类的初始化逻辑。以前，这些逻辑通常放在构造函数里面，对方法进行初始化，现在改成以函数形式传入<code>addInitializer()</code>方法。注意，<code>addInitializer()</code>没有返回值。</p><p>（4）<code>private</code>：布尔值，表示所装饰的对象是否为类的私有成员。</p><p>（5）<code>static</code>：布尔值，表示所装饰的对象是否为类的静态成员。</p><p>（6）<code>access</code>：一个对象，包含了某个值的 get 和 set 方法。</p><h2 id="类装饰器">类装饰器 <a href="about:blank#%E7%B1%BB%E8%A3%85%E9%A5%B0%E5%99%A8">#</a></h2><p>类装饰器的类型描述如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ClassDecorator</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  value: <span class="built_in">Function</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  context: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    kind: <span class="string">&#x27;class&#x27;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    addInitializer(initializer: () =&gt; <span class="built_in">void</span>): <span class="built_in">void</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="title class_">Function</span> | <span class="built_in">void</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>类装饰器接受两个参数：<code>value</code>（当前类本身）和<code>context</code>（上下文对象）。其中，<code>context</code>对象的<code>kind</code>属性固定为字符串<code>class</code>。</p><p>类装饰器一般用来对类进行操作，可以不返回任何值，请看下面的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Greeter</span>(<span class="params">value, context</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (context.<span class="property">kind</span> === <span class="string">&#x27;class&#x27;</span>) &#123;</span><br><span class="line">    value.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">greet</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Greeter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> u = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">u.<span class="title function_">greet</span>(); <span class="comment">// &quot;你好&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类装饰器<code>@Greeter</code>在类<code>User</code>的原型对象上，添加了一个<code>greet()</code>方法，实例就可以直接使用该方法。</p><p>类装饰器可以返回一个函数，替代当前类的构造方法。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countInstances</span><span class="params">(value:any, context:any)</span> &#123;</span><br><span class="line">  let instanceCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> wrapper = <span class="keyword">function</span> <span class="params">(<span class="rest_arg">...args</span>:any[])</span> &#123;</span><br><span class="line">    instanceCount++;</span><br><span class="line">    <span class="keyword">const</span> instance = <span class="keyword">new</span> value(...args);</span><br><span class="line">    instance.count = instanceCount;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125; <span class="keyword">as</span> unknown <span class="keyword">as</span> <span class="keyword">typeof</span> MyClass;</span><br><span class="line"></span><br><span class="line">  wrapper.prototype = value.prototype; <span class="comment">// A</span></span><br><span class="line">  <span class="keyword">return</span> wrapper;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@countInstances</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inst1 = <span class="keyword">new</span> MyClass();</span><br><span class="line">inst1 <span class="keyword">instanceof</span> MyClass <span class="comment">// true</span></span><br><span class="line">inst1.count <span class="comment">// 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类装饰器<code>@countInstances</code>返回一个函数，替换了类<code>MyClass</code>的构造方法。新的构造方法实现了实例的计数，每新建一个实例，计数器就会加一，并且对实例添加<code>count</code>属性，表示当前实例的编号。</p><p>注意，上例为了确保新构造方法继承定义在<code>MyClass</code>的原型之上的成员，特别加入<code>A</code>行，确保两者的原型对象是一致的。否则，新的构造函数<code>wrapper</code>的原型对象，与<code>MyClass</code>不同，通不过<code>instanceof</code>运算符。</p><p>类装饰器也可以返回一个新的类，替代原来所装饰的类。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function countInstances(value:any, context:any) &#123;</span><br><span class="line">  let instanceCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">value</span> </span>&#123;</span><br><span class="line">    constructor(...args:any[]) &#123;</span><br><span class="line">      <span class="keyword">super</span>(...args);</span><br><span class="line">      instanceCount++;</span><br><span class="line">      <span class="keyword">this</span>.count = instanceCount;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@countInstances</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">const inst1 = <span class="keyword">new</span> <span class="type">MyClass</span>();</span><br><span class="line">inst1 instanceof <span class="type">MyClass</span> <span class="comment">// true</span></span><br><span class="line">inst1.count <span class="comment">// 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>@countInstances</code>返回一个<code>MyClass</code>的子类。</p><p>下面的例子是通过类装饰器，禁止使用<code>new</code>命令新建类的实例。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionCallable</span><span class="params">(</span></span><br><span class="line"><span class="params">  value:any, &#123;kind&#125;:any</span></span><br><span class="line"><span class="params">)</span>:any &#123;</span><br><span class="line">  <span class="keyword">if</span> (kind === <span class="string">&#x27;class&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="params">(<span class="rest_arg">...args</span>:any)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">new</span>.target !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TypeError(<span class="string">&#x27;This function can’t be new-invoked&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> value(...args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@functionCallable</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  name:string;</span><br><span class="line">  constructor(name:string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">const</span> robin = Person(<span class="string">&#x27;Robin&#x27;</span>);</span><br><span class="line">robin.name <span class="comment">// &#x27;Robin&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类装饰器<code>@functionCallable</code>返回一个新的构造方法，里面判断<code>new.target</code>是否不为空，如果是的，就表示通过<code>new</code>命令调用，从而报错。</p><p>类装饰器的上下文对象<code>context</code>的<code>addInitializer()</code>方法，用来定义一个类的初始化函数，在类完全定义结束后执行。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">customElement</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;<span class="title class_">Input</span> <span class="keyword">extends</span> <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>&gt;<span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    value: Input,</span></span></span><br><span class="line"><span class="params"><span class="function">    context: ClassDecoratorContext</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>) =&gt;</span> &#123;</span><br><span class="line">    context.<span class="title function_">addInitializer</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      customElements.<span class="title function_">define</span>(name, value);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@customElement</span>(<span class="string">&quot;hello-world&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">connectedCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">innerHTML</span> = <span class="string">`&lt;h1&gt;Hello World&lt;/h1&gt;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类<code>MyComponent</code>定义完成后，会自动执行类装饰器<code>@customElement()</code>给出的初始化函数，该函数会将当前类注册为指定名称（本例为<code>&lt;hello-world&gt;</code>）的自定义 HTML 元素。</p><h2 id="方法装饰器">方法装饰器 <a href="about:blank#%E6%96%B9%E6%B3%95%E8%A3%85%E9%A5%B0%E5%99%A8">#</a></h2><p>方法装饰器用来装饰类的方法（method）。它的类型描述如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ClassMethodDecorator</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  value: <span class="built_in">Function</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  context: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    kind: <span class="string">&#x27;method&#x27;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="built_in">string</span> | <span class="built_in">symbol</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">static</span>: <span class="built_in">boolean</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span>: <span class="built_in">boolean</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    access: &#123; get: () =&gt; <span class="built_in">unknown</span> &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">    addInitializer(initializer: () =&gt; <span class="built_in">void</span>): <span class="built_in">void</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="title class_">Function</span> | <span class="built_in">void</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据上面的类型，方法装饰器是一个函数，接受两个参数：<code>value</code>和<code>context</code>。</p><p>参数<code>value</code>是方法本身，参数<code>context</code>是上下文对象，有以下属性。</p><ul><li><code>kind</code>：值固定为字符串<code>method</code>，表示当前为方法装饰器。</li><li><code>name</code>：所装饰的方法名，类型为字符串或 Symbol 值。</li><li><code>static</code>：布尔值，表示是否为静态方法。该属性为只读属性。</li><li><code>private</code>：布尔值，表示是否为私有方法。该属性为只读属性。</li><li><code>access</code>：对象，包含了方法的存取器，但是只有<code>get()</code>方法用来取值，没有<code>set()</code>方法进行赋值。</li><li><code>addInitializer()</code>：为方法增加初始化函数。</li></ul><p>方法装饰器会改写类的原始方法，实质等同于下面的操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">trace</span>(<span class="params">decoratedMethod</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  @trace</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `@trace` 等同于</span></span><br><span class="line"><span class="comment">// C.prototype.toString = trace(C.prototype.toString);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>@trace</code>是方法<code>toString()</code>的装饰器，它的效果等同于最后一行对<code>toString()</code>的改写。</p><p>如果方法装饰器返回一个新的函数，就会替代所装饰的原始函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replaceMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>?`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @replaceMethod</span><br><span class="line">  <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hi <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>!`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> robin = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Robin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">robin.<span class="title function_">hello</span>() <span class="comment">// &#x27;How are you, Robin?&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，装饰器<code>@replaceMethod</code>返回的函数，就成为了新的<code>hello()</code>方法。</p><p>下面是另一个例子。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@log</span></span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">originalMethod:<span class="built_in">any</span>, context:ClassMethodDecoratorContext</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> methodName = <span class="title class_">String</span>(context.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">replacementMethod</span>(<span class="params"><span class="variable language_">this</span>: <span class="built_in">any</span>, ...args: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`LOG: Entering method &#x27;<span class="subst">$&#123;methodName&#125;</span>&#x27;.`</span>)</span><br><span class="line">    <span class="keyword">const</span> result = originalMethod.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`LOG: Exiting method &#x27;<span class="subst">$&#123;methodName&#125;</span>&#x27;.`</span>)</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> replacementMethod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">person.<span class="title function_">greet</span>()</span><br><span class="line"><span class="comment">// &quot;LOG: Entering method &#x27;greet&#x27;.&quot;</span></span><br><span class="line"><span class="comment">// &quot;Hello, my name is 张三.&quot;</span></span><br><span class="line"><span class="comment">// &quot;LOG: Exiting method &#x27;greet&#x27;.&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，装饰器<code>@log</code>的返回值是一个函数<code>replacementMethod</code>，替代了原始方法<code>greet()</code>。在<code>replacementMethod()</code>内部，通过执行<code>originalMethod.call()</code>完成了对原始方法的调用。</p><p>利用方法装饰器，可以将类的方法变成延迟执行。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">delay</span><span class="params">(milliseconds: number = 0)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="params">(value, context)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (context.kind === <span class="string">&quot;method&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> <span class="params">(<span class="rest_arg">...args</span>: any[])</span> &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          value.apply(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125;, milliseconds);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Logger</span> &#123;</span><br><span class="line">  @delay(<span class="number">1000</span>)</span><br><span class="line">  log(msg: string) &#123;</span><br><span class="line">    console.log(`$&#123;msg&#125;`);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let logger = <span class="keyword">new</span> Logger();</span><br><span class="line">logger.log(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，方法装饰器<code>@delay(1000)</code>将方法<code>log()</code>的执行推迟了1秒（1000毫秒）。这里真正的方法装饰器，是<code>delay()</code>执行后返回的函数，<code>delay()</code>的作用是接收参数，用来设置推迟执行的时间。这种通过高阶函数返回装饰器的做法，称为“工厂模式”，即可以像工厂那样生产出一个模子的装饰器。</p><p>方法装饰器的参数<code>context</code>对象里面，有一个<code>addInitializer()</code>方法。它是一个钩子方法，用来在类的初始化阶段，添加回调函数。这个回调函数就是作为<code>addInitializer()</code>的参数传入的，它会在构造方法执行期间执行，早于属性（field）的初始化。</p><p>下面是<code>addInitializer()</code>方法的一个例子。我们知道，类的方法往往需要在构造方法里面，进行<code>this</code>的绑定。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// greet() 绑定 this</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">greet</span> = <span class="variable language_">this</span>.<span class="property">greet</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>).<span class="property">greet</span>;</span><br><span class="line"><span class="title function_">g</span>() <span class="comment">// &quot;Hello, my name is 张三.&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面例子中，类<code>Person</code>的构造方法内部，将<code>this</code>与<code>greet()</code>方法进行了绑定。如果没有这一行，将<code>greet()</code>赋值给变量<code>g</code>进行调用，就会报错了。</p><p><code>this</code>的绑定必须放在构造方法里面，因为这必须在类的初始化阶段完成。现在，它可以移到方法装饰器的<code>addInitializer()</code>里面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bound</span>(<span class="params"></span></span><br><span class="line"><span class="params">  originalMethod:any, context:ClassMethodDecoratorContext</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> methodName = context.<span class="property">name</span>;</span><br><span class="line">  <span class="keyword">if</span> (context.<span class="property">private</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`不能绑定私有方法 <span class="subst">$&#123;methodName <span class="keyword">as</span> string&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  context.<span class="title function_">addInitializer</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[methodName] = <span class="variable language_">this</span>[methodName].<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，绑定<code>this</code>转移到了<code>addInitializer()</code>方法里面。</p><p>下面再看一个例子，通过<code>addInitializer()</code>将选定的方法名，放入一个集合。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">collect</span>(<span class="params"></span></span><br><span class="line"><span class="params">  value,</span></span><br><span class="line"><span class="params">  &#123;name, addInitializer&#125;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">addInitializer</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">collectedMethodKeys</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">collectedMethodKeys</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">collectedMethodKeys</span>.<span class="title function_">add</span>(name);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  @collect</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  @collect</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inst = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br><span class="line">inst.<span class="property">collectedMethodKeys</span> <span class="comment">// new Set([&#x27;toString&#x27;, Symbol.iterator])</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，方法装饰器<code>@collect</code>会将所装饰的成员名字，加入一个 Set 集合<code>collectedMethodKeys</code>。</p><h2 id="属性装饰器">属性装饰器 <a href="about:blank#%E5%B1%9E%E6%80%A7%E8%A3%85%E9%A5%B0%E5%99%A8">#</a></h2><p>属性装饰器用来装饰定义在类顶部的属性（field）。它的类型描述如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ClassFieldDecorator</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  value: <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  context: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    kind: <span class="string">&#x27;field&#x27;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="built_in">string</span> | <span class="built_in">symbol</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">static</span>: <span class="built_in">boolean</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span>: <span class="built_in">boolean</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    access: &#123; get: () =&gt; <span class="built_in">unknown</span>, set: (value: <span class="built_in">unknown</span>) =&gt; <span class="built_in">void</span> &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">    addInitializer(initializer: () =&gt; <span class="built_in">void</span>): <span class="built_in">void</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="function">(<span class="params">initialValue: <span class="built_in">unknown</span></span>) =&gt;</span> <span class="built_in">unknown</span> | <span class="built_in">void</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，装饰器的第一个参数<code>value</code>的类型是<code>undefined</code>，这意味着这个参数实际上没用的，装饰器不能从<code>value</code>获取所装饰属性的值。另外，第二个参数<code>context</code>对象的<code>kind</code>属性的值为字符串<code>field</code>，而不是“property”或“attribute”，这一点是需要注意的。</p><p>属性装饰器要么不返回值，要么返回一个函数，该函数会自动执行，用来对所装饰属性进行初始化。该函数的参数是所装饰属性的初始值，该函数的返回值是该属性的最终值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logged</span>(<span class="params">value, context</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; kind, name &#125; = context;</span><br><span class="line">  <span class="keyword">if</span> (kind === <span class="string">&#x27;field&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">initialValue</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`initializing <span class="subst">$&#123;name&#125;</span> with value <span class="subst">$&#123;initialValue&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">return</span> initialValue;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  @logged name = <span class="string">&#x27;green&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> color = <span class="keyword">new</span> <span class="title class_">Color</span>();</span><br><span class="line"><span class="comment">// &quot;initializing name with value green&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，属性装饰器<code>@logged</code>装饰属性<code>name</code>。<code>@logged</code>的返回值是一个函数，该函数用来对属性<code>name</code>进行初始化，它的参数<code>initialValue</code>就是属性<code>name</code>的初始值<code>green</code>。新建实例对象<code>color</code>时，该函数会自动执行。</p><p>属性装饰器的返回值函数，可以用来更改属性的初始值。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_"><span class="keyword">function</span> <span class="title">twice</span></span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> initialValue =&gt; initialValue * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">  <span class="meta">@twice</span></span><br><span class="line">  field = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const inst = <span class="keyword">new</span> <span class="type">C</span>();</span><br><span class="line">inst.field <span class="comment">// 6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，属性装饰器<code>@twice</code>返回一个函数，该函数的返回值是属性<code>field</code>的初始值乘以2，所以属性<code>field</code>的最终值是6。</p><p>属性装饰器的上下文对象<code>context</code>的<code>access</code>属性，提供所装饰属性的存取器，请看下面的例子。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">let acc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> exposeAccess(</span><br><span class="line">  <span class="keyword">value</span>, &#123;<span class="keyword">access</span>&#125;</span><br><span class="line">) &#123;</span><br><span class="line">  acc = <span class="keyword">access</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Color &#123;</span><br><span class="line">  @exposeAccess</span><br><span class="line">  <span class="type">name</span> = <span class="string">&#x27;green&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const green = <span class="built_in">new</span> Color();</span><br><span class="line">green.name // <span class="string">&#x27;green&#x27;</span></span><br><span class="line"></span><br><span class="line">acc.<span class="keyword">get</span>(green) // <span class="string">&#x27;green&#x27;</span></span><br><span class="line"></span><br><span class="line">acc.<span class="keyword">set</span>(green, <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">green.name // <span class="string">&#x27;red&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>access</code>包含了属性<code>name</code>的存取器，可以对该属性进行取值和赋值。</p><h2 id="getter-装饰器，setter-装饰器">getter 装饰器，setter 装饰器 <a href="about:blank#getter-%E8%A3%85%E9%A5%B0%E5%99%A8setter-%E8%A3%85%E9%A5%B0%E5%99%A8">#</a></h2><p>getter 装饰器和 setter 装饰器，是分别针对类的取值器（getter）和存值器（setter）的装饰器。它们的类型描述如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ClassGetterDecorator</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  value: <span class="built_in">Function</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  context: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    kind: <span class="string">&#x27;getter&#x27;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="built_in">string</span> | <span class="built_in">symbol</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">static</span>: <span class="built_in">boolean</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span>: <span class="built_in">boolean</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    access: &#123; get: () =&gt; <span class="built_in">unknown</span> &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">    addInitializer(initializer: () =&gt; <span class="built_in">void</span>): <span class="built_in">void</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="title class_">Function</span> | <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ClassSetterDecorator</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  value: <span class="built_in">Function</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  context: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    kind: <span class="string">&#x27;setter&#x27;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="built_in">string</span> | <span class="built_in">symbol</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">static</span>: <span class="built_in">boolean</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span>: <span class="built_in">boolean</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    access: &#123; set: (value: <span class="built_in">unknown</span>) =&gt; <span class="built_in">void</span> &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">    addInitializer(initializer: () =&gt; <span class="built_in">void</span>): <span class="built_in">void</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="title class_">Function</span> | <span class="built_in">void</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，getter 装饰器的上下文对象<code>context</code>的<code>access</code>属性，只包含<code>get()</code>方法；setter 装饰器的<code>access</code>属性，只包含<code>set()</code>方法。</p><p>这两个装饰器要么不返回值，要么返回一个函数，取代原来的取值器或存值器。</p><p>下面的例子是将取值器的结果，保存为一个属性，加快后面的读取。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  <span class="meta">@lazy</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正在计算……&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;开销大的计算结果&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">lazy</span>(<span class="params"></span></span><br><span class="line"><span class="params">  value:<span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">  &#123;kind, name&#125;:<span class="built_in">any</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (kind === <span class="string">&#x27;getter&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"><span class="variable language_">this</span>:<span class="built_in">any</span></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = value.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(</span><br><span class="line">        <span class="variable language_">this</span>, name,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">value</span>: result,</span><br><span class="line">          <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inst = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br><span class="line">inst.<span class="property">value</span></span><br><span class="line"><span class="comment">// 正在计算……</span></span><br><span class="line"><span class="comment">// &#x27;开销大的计算结果&#x27;</span></span><br><span class="line">inst.<span class="property">value</span></span><br><span class="line"><span class="comment">// &#x27;开销大的计算结果&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，第一次读取<code>inst.value</code>，会进行计算，然后装饰器<code>@lazy</code>将结果存入只读属性<code>value</code>，后面再读取这个属性，就不会进行计算了。</p><h2 id="accessor-装饰器">accessor 装饰器 <a href="about:blank#accessor-%E8%A3%85%E9%A5%B0%E5%99%A8">#</a></h2><p>装饰器语法引入了一个新的属性修饰符<code>accessor</code>。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class C &#123;</span><br><span class="line">  accessor x <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>accessor</code>修饰符等同于为公开属性<code>x</code>自动生成取值器和存值器，它们作用于私有属性<code>x</code>。（注意，公开的<code>x</code>与私有的<code>x</code>不是同一个属性。）也就是说，上面的代码等同于下面的代码。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">C</span> &#123;</span><br><span class="line">  <span class="meta">#x = 1;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">get</span> <span class="title">x</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.<span class="meta">#x;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">set</span> <span class="title">x</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.<span class="meta">#x = val;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>accessor</code>也可以与静态属性和私有属性一起使用。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> accessor x = <span class="number">1</span>;</span><br><span class="line">  accessor <span class="meta">#y = 2;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>accessor 装饰器的类型如下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ClassAutoAccessorDecorator</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  value: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    get: () =&gt; <span class="built_in">unknown</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    set: (value: <span class="built_in">unknown</span>) =&gt; <span class="built_in">void</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">  context: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    kind: <span class="string">&quot;accessor&quot;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="built_in">string</span> | <span class="built_in">symbol</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    access: &#123; get(): <span class="built_in">unknown</span>, set(value: <span class="built_in">unknown</span>): <span class="built_in">void</span> &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">static</span>: <span class="built_in">boolean</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span>: <span class="built_in">boolean</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    addInitializer(initializer: () =&gt; <span class="built_in">void</span>): <span class="built_in">void</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">  get?: <span class="function">() =&gt;</span> <span class="built_in">unknown</span>;</span><br><span class="line">  set?: <span class="function">(<span class="params">value: <span class="built_in">unknown</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  init?: <span class="function">(<span class="params">initialValue: <span class="built_in">unknown</span></span>) =&gt;</span> <span class="built_in">unknown</span>;</span><br><span class="line">&#125; | <span class="built_in">void</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>accessor 装饰器的<code>value</code>参数，是一个包含<code>get()</code>方法和<code>set()</code>方法的对象。该装饰器可以不返回值，或者返回一个新的对象，用来取代原来的<code>get()</code>方法和<code>set()</code>方法。此外，装饰器返回的对象还可以包括一个<code>init()</code>方法，用来改变私有属性的初始值。</p><p>下面是一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  @logged accessor x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logged</span>(<span class="params">value, &#123; kind, name &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (kind === <span class="string">&quot;accessor&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; get, set &#125; = value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`getting <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> get.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`setting <span class="subst">$&#123;name&#125;</span> to <span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> set.<span class="title function_">call</span>(<span class="variable language_">this</span>, val);</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="title function_">init</span>(<span class="params">initialValue</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`initializing <span class="subst">$&#123;name&#125;</span> with value <span class="subst">$&#123;initialValue&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> initialValue;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br><span class="line"></span><br><span class="line">c.<span class="property">x</span>;</span><br><span class="line"><span class="comment">// getting x</span></span><br><span class="line"></span><br><span class="line">c.<span class="property">x</span> = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// setting x to 123</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，装饰器<code>@logged</code>为属性<code>x</code>的存值器和取值器，加上了日志输出。</p><h2 id="装饰器的执行顺序">装饰器的执行顺序 <a href="about:blank#%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F">#</a></h2><p>装饰器的执行分为两个阶段。</p><p>（1）评估（evaluation）：计算<code>@</code>符号后面的表达式的值，得到的应该是函数。</p><p>（2）应用（application）：将评估装饰器后得到的函数，应用于所装饰对象。</p><p>也就是说，装饰器的执行顺序是，先评估所有装饰器表达式的值，再将其应用于当前类。</p><p>应用装饰器时，顺序依次为方法装饰器和属性装饰器，然后是类装饰器。</p><p>请看下面的例子。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">d</span>(<span class="params">str:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`评估 @d(): <span class="subst">$&#123;str&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    value:<span class="built_in">any</span>, context:<span class="built_in">any</span></span></span></span><br><span class="line"><span class="params"><span class="function">  </span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`应用 @d(): <span class="subst">$&#123;str&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">str:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@d</span>(<span class="string">&#x27;类装饰器&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line">  <span class="meta">@d</span>(<span class="string">&#x27;静态属性装饰器&#x27;</span>)</span><br><span class="line">  <span class="keyword">static</span> staticField = <span class="title function_">log</span>(<span class="string">&#x27;静态属性值&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@d</span>(<span class="string">&#x27;原型方法&#x27;</span>)</span><br><span class="line">  [<span class="title function_">log</span>(<span class="string">&#x27;计算方法名&#x27;</span>)]() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@d</span>(<span class="string">&#x27;实例属性&#x27;</span>)</span><br><span class="line">  instanceField = <span class="title function_">log</span>(<span class="string">&#x27;实例属性值&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@d</span>(<span class="string">&#x27;静态方法装饰器&#x27;</span>)</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类<code>T</code>有四种装饰器：类装饰器、静态属性装饰器、方法装饰器、属性装饰器。</p><p>它的运行结果如下。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">评估 <span class="variable">@d</span>(): 类装饰器</span><br><span class="line">评估 <span class="variable">@d</span>(): 静态属性装饰器</span><br><span class="line">评估 <span class="variable">@d</span>(): 原型方法</span><br><span class="line">计算方法名</span><br><span class="line">评估 <span class="variable">@d</span>(): 实例属性</span><br><span class="line">评估 <span class="variable">@d</span>(): 静态方法装饰器</span><br><span class="line">应用 <span class="variable">@d</span>(): 静态方法装饰器</span><br><span class="line">应用 <span class="variable">@d</span>(): 原型方法</span><br><span class="line">应用 <span class="variable">@d</span>(): 静态属性装饰器</span><br><span class="line">应用 <span class="variable">@d</span>(): 实例属性</span><br><span class="line">应用 <span class="variable">@d</span>(): 类装饰器</span><br><span class="line">静态属性值</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，类载入的时候，代码按照以下顺序执行。</p><p>（1）装饰器评估：这一步计算装饰器的值，首先是类装饰器，然后是类内部的装饰器，按照它们出现的顺序。</p><p>注意，如果属性名或方法名是计算值（本例是“计算方法名”），则它们在对应的装饰器评估之后，也会进行自身的评估。</p><p>（2）装饰器应用：实际执行装饰器函数，将它们与对应的方法和属性进行结合。</p><p>静态方法装饰器首先应用，然后是原型方法的装饰器和静态属性装饰器，接下来是实例属性装饰器，最后是类装饰器。</p><p>注意，“实例属性值”在类初始化的阶段并不执行，直到类实例化时才会执行。</p><p>如果一个方法或属性有多个装饰器，则内层的装饰器先执行，外层的装饰器后执行。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@bound</span></span><br><span class="line">  <span class="meta">@log</span></span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>greet()</code>有两个装饰器，内层的<code>@log</code>先执行，外层的<code>@bound</code>针对得到的结果再执行。</p><h2 id="参考链接">参考链接 <a href="about:blank#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">#</a></h2><ul><li><a href="https://2ality.com/2022/10/javascript-decorators.html">JavaScript metaprogramming with the 2022-03 decorators API</a></li><li><a href="https://plainenglish.io/blog/ts-5-0-beta-new-decorators-are-here">TS 5.0 Beta: New Decorators Are Here!</a>, Bytefer</li></ul><p>本文转自 <a href="https://wangdoc.com/typescript/decorator">https://wangdoc.com/typescript/decorator</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">??TypeScript 装饰器</summary>
    
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript namespace</title>
    <link href="https://www.fomal.cc/posts/22.html"/>
    <id>https://www.fomal.cc/posts/22.html</id>
    <published>2023-06-16T10:50:00.000Z</published>
    <updated>2023-06-16T10:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>TypeScript namespace</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><p>namespace 是一种将相关代码组织在一起的方式，中文译为“命名空间”。</p><p>它出现在 ES 模块诞生之前，作为 TypeScript 自己的模块格式而发明的。但是，自从有了 ES 模块，官方已经不推荐使用 namespace 了。</p><h2 id="基本用法">基本用法 <a href="about:blank#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">#</a></h2><p>namespace 用来建立一个容器，内部的所有变量和函数，都必须在这个容器里面使用。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Utils &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">isString</span><span class="params">(value:any)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 正确</span></span><br><span class="line">  isString(<span class="string">&#x27;yes&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Utils.isString(<span class="string">&#x27;no&#x27;</span>); <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，命名空间<code>Utils</code>里面定义了一个函数<code>isString()</code>，它只能在<code>Utils</code>里面使用，如果用于外部就会报错。</p><p>如果要在命名空间以外使用内部成员，就必须为该成员加上<code>export</code>前缀，表示对外输出该成员。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">namespace Utility &#123;</span><br><span class="line">  <span class="built_in">export</span> function log(msg:string) &#123;</span><br><span class="line">    console.log(msg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">export</span> function <span class="built_in">error</span>(msg:string) &#123;</span><br><span class="line">    console.<span class="built_in">error</span>(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Utility.log(<span class="string">&#x27;Call me&#x27;</span>);</span><br><span class="line">Utility.<span class="built_in">error</span>(<span class="string">&#x27;maybe!&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，只要加上<code>export</code>前缀，就可以在命名空间外部使用内部成员。</p><p>编译出来的 JavaScript 代码如下。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Utility;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">Utility</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(msg);</span><br><span class="line">  &#125;</span><br><span class="line">  Utility.<span class="built_in">log</span> = <span class="built_in">log</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(msg);</span><br><span class="line">  &#125;</span><br><span class="line">  Utility.error = error;</span><br><span class="line">&#125;)(Utility || (Utility = &#123;&#125;));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，命名空间<code>Utility</code>变成了 JavaScript 的一个对象，凡是<code>export</code>的内部成员，都成了该对象的属性。</p><p>这就是说，namespace 会变成一个值，保留在编译后的代码中。这一点要小心，它不是纯的类型代码。</p><p>namespace 内部还可以使用<code>import</code>命令输入外部成员，相当于为外部成员起别名。当外部成员的名字比较长时，别名能够简化代码。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Utils</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isString</span>(<span class="params">value:<span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> isString = <span class="title class_">Utils</span>.<span class="property">isString</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">isString</span>(<span class="string">&#x27;yes&#x27;</span>);</span><br><span class="line">  <span class="comment">// 等同于</span></span><br><span class="line">  <span class="title class_">Utils</span>.<span class="title function_">isString</span>(<span class="string">&#x27;yes&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>import</code>命令指定在命名空间<code>App</code>里面，外部成员<code>Utils.isString</code>的别名为<code>isString</code>。</p><p><code>import</code>命令也可以在 namespace 外部，指定别名。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Shapes</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">Polygons</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Triangle</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Square</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> polygons = <span class="title class_">Shapes</span>.<span class="property">Polygons</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于 new Shapes.Polygons.Square()</span></span><br><span class="line"><span class="keyword">let</span> sq = <span class="keyword">new</span> polygons.<span class="title class_">Square</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>import</code>命令在命名空间<code>Shapes</code>的外部，指定<code>Shapes.Polygons</code>的别名为<code>polygons</code>。</p><p>namespace 可以嵌套。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Utils</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">Messaging</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">msg:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Utils</span>.<span class="property">Messaging</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>) <span class="comment">// &quot;hello&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，命名空间<code>Utils</code>内部还有一个命名空间<code>Messaging</code>。注意，如果要在外部使用<code>Messaging</code>，必须在它前面加上<code>export</code>命令。</p><p>使用嵌套的命名空间，必须从最外层开始引用，比如<code>Utils.Messaging.log()</code>。</p><p>namespace 不仅可以包含实义代码，还可以包括类型代码。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="symbol">N</span> &#123;</span><br><span class="line">  export <span class="keyword">interface</span> <span class="symbol">MyInterface</span>&#123;&#125;</span><br><span class="line">  export <span class="keyword">class</span> <span class="symbol">MyClass</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，命令空间<code>N</code>不仅对外输出类，还对外输出一个接口，它们都可以用作类型。</p><p>namespace 与模块的作用是一致的，都是把相关代码组织在一起，对外输出接口。区别是一个文件只能有一个模块，但可以有多个 namespace。由于模块可以取代 namespace，而且是 JavaScript 的标准语法，还不需要编译转换，所以建议总是使用模块，替代 namespace。</p><p>如果 namespace 代码放在一个单独的文件里，那么引入这个文件需要使用三斜杠的语法。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;reference path <span class="operator">=</span> <span class="string">&quot;SomeFileName.ts&quot;</span> /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="namespace-的输出">namespace 的输出 <a href="about:blank#namespace-%E7%9A%84%E8%BE%93%E5%87%BA">#</a></h2><p>namespace 本身也可以使用<code>export</code>命令输出，供其他文件使用。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// shapes.ts</span></span><br><span class="line">export <span class="keyword">namespace</span> <span class="symbol">Shapes</span> &#123;</span><br><span class="line">  export <span class="keyword">class</span> <span class="symbol">Triangle</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  export <span class="keyword">class</span> <span class="symbol">Square</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例是一个文件<code>shapes.ts</code>，里面使用<code>export</code>命令，输出了一个命名空间<code>Shapes</code>。</p><p>其他脚本文件使用<code>import</code>命令，加载这个命名空间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Shapes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./shapes&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> <span class="title class_">Shapes</span>.<span class="title class_">Triangle</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> shapes <span class="keyword">from</span> <span class="string">&quot;./shapes&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> shapes.<span class="property">Shapes</span>.<span class="title class_">Triangle</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不过，更好的方法还是建议使用模块，采用模块的输出和输入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// shapes.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Triangle</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shapeConsumer.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> shapes <span class="keyword">from</span> <span class="string">&quot;./shapes&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> shapes.<span class="title class_">Triangle</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，使用模块的输出和输入，改写了前面的例子。</p><h2 id="namespace-的合并">namespace 的合并 <a href="about:blank#namespace-%E7%9A%84%E5%90%88%E5%B9%B6">#</a></h2><p>多个同名的 namespace 会自动合并，这一点跟 interface 一样。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="symbol">Animals</span> &#123;</span><br><span class="line">  export <span class="keyword">class</span> <span class="symbol">Cat</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="symbol">Animals</span> &#123;</span><br><span class="line">  export <span class="keyword">interface</span> <span class="symbol">Legged</span> &#123;</span><br><span class="line">    numberOfLegs: number;</span><br><span class="line">  &#125;</span><br><span class="line">  export <span class="keyword">class</span> <span class="symbol">Dog</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="symbol">Animals</span> &#123;</span><br><span class="line">  export <span class="keyword">interface</span> <span class="symbol">Legged</span> &#123;</span><br><span class="line">    numberOfLegs: number;</span><br><span class="line">  &#125;</span><br><span class="line">  export <span class="keyword">class</span> <span class="symbol">Cat</span> &#123;&#125;</span><br><span class="line">  export <span class="keyword">class</span> <span class="symbol">Dog</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样做的目的是，如果同名的命名空间分布在不同的文件中，TypeScript 最终会将它们合并在一起。这样就比较方便扩展别人的代码。</p><p>合并命名空间时，命名空间中的非<code>export</code>的成员不会被合并，但是它们只能在各自的命名空间中使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> N &#123;</span><br><span class="line">  <span class="type">const</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">export</span> function <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(a);  <span class="comment">// 正确</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> N &#123;</span><br><span class="line">  <span class="function"><span class="keyword">export</span> function <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">foo</span>(); <span class="comment">// 正确</span></span><br><span class="line">    console.<span class="built_in">log</span>(a);  <span class="comment">// 报错</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，变量<code>a</code>是第一个名称空间<code>N</code>的非对外成员，它只在第一个名称空间可用。</p><p>命名空间还可以跟同名函数合并，但是要求同名函数必须在命名空间之前声明。这样做是为了确保先创建出一个函数对象，然后同名的命名空间就相当于给这个函数对象添加额外的属性。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">f</span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> f.<span class="keyword">version</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace f &#123;</span><br><span class="line">  export <span class="keyword">const</span> <span class="keyword">version</span> = &#x27;1.0&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">f</span>()   <span class="comment">// &#x27;1.0&#x27;</span></span><br><span class="line">f.<span class="keyword">version</span> <span class="comment">// &#x27;1.0&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，函数<code>f()</code>与命名空间<code>f</code>合并，相当于命名空间为函数对象<code>f</code>添加属性。</p><p>命名空间也能与同名 class 合并，同样要求class 必须在命名空间之前声明，原因同上。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">C</span> &#123;</span><br><span class="line">  foo = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="symbol">C</span> &#123;</span><br><span class="line">  export <span class="keyword">const</span> bar = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C.bar <span class="comment">// 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，名称空间<code>C</code>为类<code>C</code>添加了一个静态属性<code>bar</code>。</p><p>命名空间还能与同名 Enum 合并。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">E</span> &#123;</span><br><span class="line">  A,</span><br><span class="line">  B,</span><br><span class="line">  C,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> E &#123;</span><br><span class="line">  <span class="function"><span class="keyword">export</span> function <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(E.C);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">E.<span class="built_in">foo</span>() <span class="comment">// 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，命名空间<code>E</code>为枚举<code>E</code>添加了一个<code>foo()</code>方法。</p><p>注意，Enum 成员与命名空间导出成员不允许同名。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">E</span> &#123;</span><br><span class="line">  A, <span class="comment">// 报错</span></span><br><span class="line">  B,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> E &#123;</span><br><span class="line">  <span class="function"><span class="keyword">export</span> function <span class="title">A</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，同名 Enum 与命名空间有同名成员，结果报错。</p><p>本文转自 <a href="https://wangdoc.com/typescript/namespace">https://wangdoc.com/typescript/namespace</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">??TypeScript namespace</summary>
    
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 模块</title>
    <link href="https://www.fomal.cc/posts/21.html"/>
    <id>https://www.fomal.cc/posts/21.html</id>
    <published>2023-06-15T10:50:00.000Z</published>
    <updated>2023-06-15T10:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>TypeScript 模块</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><h2 id="简介">简介 <a href="about:blank#%E7%AE%80%E4%BB%8B">#</a></h2><p>任何包含 import 或 export 语句的文件，就是一个模块（module）。相应地，如果文件不包含 export 语句，就是一个全局的脚本文件。</p><p>模块本身就是一个作用域，不属于全局作用域。模块内部的变量、函数、类只在内部可见，对于模块外部是不可见的。暴露给外部的接口，必须用 export 命令声明；如果其他文件要使用模块的接口，必须用 import 命令来输入。</p><p>如果一个文件不包含 export 语句，但是希望把它当作一个模块（即内部变量对外不可见），可以在脚本头部添加一行语句。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> &#123;&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面这行语句不产生任何实际作用，但会让当前文件被当作模块处理，所有它的代码都变成了内部代码。</p><p>ES 模块的详细介绍，请参考 ES6 教程，这里就不重复了。本章主要介绍 TypeScript 的模块处理。</p><p>TypeScript 模块除了支持所有 ES 模块的语法，特别之处在于允许输出和输入类型。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span><span class="built_in"> type </span>Bool = <span class="literal">true</span> | <span class="literal">false</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，当前脚本输出一个类型别名<code>Bool</code>。这行语句把类型定义和接口输出写在一行，也可以写成两行。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type <span class="built_in">Bool</span> = <span class="literal">true</span> | <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="built_in">Bool</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假定上面的模块文件为<code>a.ts</code>，另一个文件<code>b.ts</code>就可以使用 import 语句，输入这个类型。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="built_in">Bool</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo:<span class="built_in">Bool</span> = true;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，import 语句加载的是一个类型。注意，加载文件写成<code>./a</code>，没有写脚本文件的后缀名。TypeScript 允许加载模块时，省略模块文件的后缀名，它会自动定位，将<code>./a</code>定位到<code>./a.ts</code>。</p><p>编译时，可以两个脚本同时编译。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tsc <span class="selector-tag">a</span><span class="selector-class">.ts</span> <span class="selector-tag">b</span><span class="selector-class">.ts</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面命令会将<code>a.ts</code>和<code>b.ts</code>分别编译成<code>a.js</code>和<code>b.js</code>。</p><p>也可以只编译<code>b.ts</code>，因为它是入口脚本，tsc 会自动编译它依赖的所有脚本。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tsc <span class="selector-tag">b</span><span class="selector-class">.ts</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面命令发现<code>b.ts</code>依赖<code>a.ts</code>，就会自动寻找<code>a.ts</code>，也将其同时编译，因此编译产物还是<code>a.js</code>和<code>b.js</code>两个文件。</p><h2 id="import-type-语句">import type 语句 <a href="about:blank#import-type-%E8%AF%AD%E5%8F%A5">#</a></h2><p>import 在一条语句中，可以同时输入类型和正常接口。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> a = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; A, a &#125; <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，文件<code>a.ts</code>的 export 语句输出了一个类型<code>A</code>和一个正常接口<code>a</code>，另一个文件<code>b.ts</code>则在同一条语句中输入了类型和正常接口。</p><p>这样很不利于区分类型和正常接口，容易造成混淆。为了解决这个问题，TypeScript 引入了两个解决方法。</p><p>第一个方法是在 import 语句输入的类型前面加上<code>type</code>关键字。</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="built_in">type</span> A, a &#125; <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，import 语句输入的类型<code>A</code>前面有<code>type</code>关键字，表示这是一个类型。</p><p>第二个方法是使用 import type 语句，这个语句只用来输入类型，不用来输入正常接口。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; A &#125; <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:A = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; a &#125; <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，import type 输入类型<code>A</code>是正确的，可以把<code>A</code>当作类型使用。但是，输入正常接口<code>a</code>，并把<code>a</code>当作一个值使用，就会报错。这就是说，看到<code>import type</code>，你就知道它输入的肯定是类型。</p><p>import type 语句也可以输入默认类型。</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">type</span> DefaultType <span class="keyword">from</span> <span class="string">&#x27;moduleA&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>import type 在一个名称空间下，输入所有类型的写法如下。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> * <span class="keyword">as</span> TypeNS <span class="keyword">from</span> <span class="string">&#x27;moduleA&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同样的，export 语句也有两种方法，表示输出的是类型。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">A </span>= <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="type">B </span>= <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"></span><br><span class="line">// 方法一</span><br><span class="line">export &#123;<span class="keyword">type</span> <span class="type">A, </span><span class="keyword">type</span> <span class="type">B&#125;;</span></span><br><span class="line"><span class="type"></span></span><br><span class="line"><span class="type"></span>// 方法二</span><br><span class="line">export <span class="keyword">type</span> <span class="type">&#123;A, </span>B&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，方法一是使用<code>type</code>关键字作为前缀，表示输出的是类型；方法二是使用 export type 语句，表示整行输出的都是类型。</p><p>下面是 export type 将一个类作为类型输出的例子。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> &#123; <span class="title class_">Point</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，由于使用了 export type 语句，输出的并不是 Point 这个类，而是 Point 代表的实例类型。输入时，只能作为类型输入。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="type">Point</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./module&#x27;</span>;</span><br><span class="line"></span><br><span class="line">const p:<span class="type">Point</span> = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Point</code>只能作为类型输入，不能当作正常接口使用。</p><h2 id="importsNotUsedAsValues-编译设置">importsNotUsedAsValues 编译设置 <a href="about:blank#importsnotusedasvalues-%E7%BC%96%E8%AF%91%E8%AE%BE%E7%BD%AE">#</a></h2><p>TypeScript 特有的输入类型（type）的 import 语句，编译成 JavaScript 时怎么处理呢？</p><p>TypeScript 提供了<code>importsNotUsedAsValues</code>编译设置项，有三个可能的值。</p><p>（1）<code>remove</code>：这是默认值，自动删除输入类型的 import 语句。</p><p>（2）<code>preserve</code>：保留输入类型的 import 语句。</p><p>（3）<code>error</code>：保留输入类型的 import 语句（与<code>preserve</code>相同），但是必须写成<code>import type</code>的形式，否则报错。</p><p>请看示例，下面是一个输入类型的 import 语句。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TypeA &#125; <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>TypeA</code>是一个类型。</p><p><code>remove</code>的编译结果会将该语句删掉。</p><p><code>preserve</code>的编译结果会保留该语句，但会删掉其中涉及类型的部分。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./a&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面就是<code>preserve</code>的编译结果，可以看到编译后的<code>import</code>语句不从<code>a.js</code>输入任何接口（包括类型），但是会引发<code>a.js</code>的执行，因此会保留<code>a.js</code>里面的副作用。</p><p><code>error</code>的编译结果与<code>preserve</code>相同，但在编译过程中会报错，因为它要求输入类型的<code>import</code>语句必须写成<code>import type</code> 的形式。原始语句改成下面的形式，就不会报错。</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">type</span> &#123; TypeA &#125; <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CommonJS-模块">CommonJS 模块 <a href="about:blank#commonjs-%E6%A8%A1%E5%9D%97">#</a></h2><p>CommonJS 是 Node.js 的专用模块格式，与 ES 模块格式不兼容。</p><h3 id="import-语句">import = 语句 <a href="about:blank#import--%E8%AF%AD%E5%8F%A5">#</a></h3><p>TypeScript 使用<code>import =</code>语句输入 CommonJS 模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> code = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;hello.ts&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，使用<code>import =</code>语句和<code>require()</code>命令输入了一个 CommonJS 模块。模块本身的用法跟 Node.js 是一样的。</p><p>除了使用<code>import =</code>语句，TypeScript 还允许使用<code>import * as [接口名] from &quot;模块文件&quot;</code>输入 CommonJS 模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">import</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="export-语句">export = 语句 <a href="about:blank#export--%E8%AF%AD%E5%8F%A5">#</a></h3><p>TypeScript 使用<code>export =</code>语句，输出 CommonJS 模块的对象，等同于 CommonJS 的<code>module.exports</code>对象。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">let obj</span> = &#123; foo: 123 &#125;;</span><br><span class="line"></span><br><span class="line"><span class="attribute">export</span> = obj;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>export =</code>语句输出的对象，只能使用<code>import =</code>语句加载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> obj = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">foo</span>); <span class="comment">// 123</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模块定位">模块定位 <a href="about:blank#%E6%A8%A1%E5%9D%97%E5%AE%9A%E4%BD%8D">#</a></h2><p>模块定位（module resolution）指的是一种算法，用来确定 import 语句和 export 语句里面的模块文件位置。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相对模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; TypeA &#125; <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非相对模块</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> $ <span class="keyword">from</span> <span class="string">&quot;jquery&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，TypeScript 怎么确定<code>./a</code>或<code>jquery</code>到底是指哪一个模块，具体位置在哪里，用到的算法就叫做“模块定位”。</p><p>编译参数<code>moduleResolution</code>，用来指定具体使用哪一种定位算法。常用的算法有两种：<code>Classic</code>和<code>Node</code>。</p><p>如果没有指定<code>moduleResolution</code>，它的默认值与编译参数<code>module</code>有关。<code>module</code>设为<code>commonjs</code>时（项目脚本采用 CommonJS 模块格式），<code>moduleResolution</code>的默认值为<code>Node</code>，即采用 Node.js 的模块定位算法。其他情况下（<code>module</code>设为 es2015、 esnext、amd, system, umd 等等），就采用<code>Classic</code>定位算法。</p><h3 id="相对模块，非相对模块">相对模块，非相对模块 <a href="about:blank#%E7%9B%B8%E5%AF%B9%E6%A8%A1%E5%9D%97%E9%9D%9E%E7%9B%B8%E5%AF%B9%E6%A8%A1%E5%9D%97">#</a></h3><p>加载模块时，目标模块分为相对模块（relative import）和非相对模块两种（non-relative import）。</p><p>相对模块指的是路径以<code>/</code>、<code>./</code>、<code>../</code>开头的模块。下面 import 语句加载的模块，都是相对模块。</p><ul><li><code>import Entry from &quot;./components/Entry&quot;;</code></li><li><code>import &#123; DefaultHeaders &#125; from &quot;../constants/http&quot;;</code></li><li><code>import &quot;/mod&quot;;</code></li></ul><p>相对模块的定位，是根据当前脚本的位置进行计算的，一般用于保存在当前项目目录结构中的模块脚本。</p><p>非相对模块指的是不带有路径信息的模块。下面 import 语句加载的模块，都是非相对模块。</p><ul><li><code>import * as $ from &quot;jquery&quot;;</code></li><li><code>import &#123; Component &#125; from &quot;@angular/core&quot;;</code></li></ul><p>非相对模块的定位，是由<code>baseUrl</code>属性或模块映射而确定的，通常用于加载外部模块。</p><h3 id="Classic-方法">Classic 方法 <a href="about:blank#classic-%E6%96%B9%E6%B3%95">#</a></h3><p>Classic 方法以当前脚本的路径作为“基准路径”，计算相对模块的位置。比如，脚本<code>a.ts</code>里面有一行代码<code>import &#123; b &#125; from &quot;./b&quot;</code>，那么 TypeScript 就会在<code>a.ts</code>所在的目录，查找<code>b.ts</code>和<code>b.d.ts</code>。</p><p>至于非相对模块，也是以当前脚本的路径作为起点，一层层查找上级目录。比如，脚本<code>a.ts</code>里面有一行代码<code>import &#123; b &#125; from &quot;b&quot;</code>，那么就会依次在每一级上层目录里面，查找<code>b.ts</code>和<code>b.d.ts</code>。</p><h3 id="Node-方法">Node 方法 <a href="about:blank#node-%E6%96%B9%E6%B3%95">#</a></h3><p>Node 方法就是模拟 Node.js 的模块加载方法，也就是<code>require()</code>的实现方法。</p><p>相对模块依然是以当前脚本的路径作为“基准路径”。比如，脚本文件<code>a.ts</code>里面有一行代码<code>let x = require(&quot;./b&quot;);</code>，TypeScript 按照以下顺序查找。</p><ol><li>当前目录是否包含<code>b.ts</code>、<code>b.tsx</code>、<code>b.d.ts</code>。如果不存在就执行下一步。</li><li>当前目录是否存在子目录<code>b</code>，该子目录里面的<code>package.json</code>文件是否有<code>types</code>字段指定了模块入口文件。如果不存在就执行下一步。</li><li>当前目录的子目录<code>b</code>是否包含<code>index.ts</code>、<code>index.tsx</code>、<code>index.d.ts</code>。如果不存在就报错。</li></ol><p>非相对模块则是以当前脚本的路径作为起点，逐级向上层目录查找是否存在子目录<code>node_modules</code>。比如，脚本文件<code>a.js</code>有一行<code>let x = require(&quot;b&quot;);</code>，TypeScript 按照以下顺序进行查找。</p><ol><li>当前目录的子目录<code>node_modules</code>是否包含<code>b.ts</code>、<code>b.tsx</code>、<code>b.d.ts</code>。</li><li>当前目录的子目录<code>node_modules</code>，是否存在文件<code>package.json</code>，该文件的<code>types</code>字段是否指定了入口文件，如果是的就加载该文件。</li><li>当前目录的子目录<code>node_modules</code>里面，是否包含子目录<code>@types</code>，在该目录中查找文件<code>b.d.ts</code>。</li><li>当前目录的子目录<code>node_modules</code>里面，是否包含子目录<code>b</code>，在该目录中查找<code>index.ts</code>、<code>index.tsx</code>、<code>index.d.ts</code>。</li><li>进入上一层目录，重复上面4步，直到找到为止。</li></ol><h3 id="路径映射">路径映射 <a href="about:blank#%E8%B7%AF%E5%BE%84%E6%98%A0%E5%B0%84">#</a></h3><p>TypeScript 允许开发者在<code>tsconfig.json</code>文件里面，手动指定脚本模块的路径。</p><p>（1）baseUrl</p><p><code>baseUrl</code>字段可以手动指定脚本模块的基准目录。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>baseUrl</code>是一个点，表示基准目录就是<code>tsconfig.json</code>所在的目录。</p><p>（2）paths</p><p><code>paths</code>字段指定非相对路径的模块与实际脚本的映射。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;jquery&quot;</span>: [<span class="string">&quot;node_modules/jquery/dist/jquery&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，加载模块<code>jquery</code>时，实际加载的脚本是<code>node_modules/jquery/dist/jquery</code>，它的位置要根据<code>baseUrl</code>字段计算得到。</p><p>注意，上例的<code>jquery</code>属性的值是一个数组，可以指定多个路径。如果第一个脚本路径不存在，那么就加载第二个路径，以此类推。</p><p>（3）rootDirs</p><p><code>rootDirs</code>字段指定模块定位时必须查找的其他目录。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;rootDirs&quot;</span>: [<span class="string">&quot;src/zh&quot;</span>, <span class="string">&quot;src/de&quot;</span>, <span class="string">&quot;src/<span class="subst">#&#123;locale&#125;</span>&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>rootDirs</code>指定了模块定位时，需要查找的不同的国际化目录。</p><h3 id="tsc-的-traceResolution参数">tsc 的<code>--traceResolution</code>参数 <a href="about:blank#tsc-%E7%9A%84--traceresolution%E5%8F%82%E6%95%B0">#</a></h3><p>由于模块定位的过程很复杂，tsc 命令有一个<code>--traceResolution</code>参数，能够在编译时在命令行显示模块定位的每一步。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tsc <span class="comment">--traceResolution</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>traceResolution</code>会输出模块定位的判断过程。</p><h3 id="tsc-的-noResolve参数">tsc 的<code>--noResolve</code>参数 <a href="about:blank#tsc-%E7%9A%84--noresolve%E5%8F%82%E6%95%B0">#</a></h3><p>tsc 命令的<code>--noResolve</code>参数，表示模块定位时，只考虑在命令行传入的模块。</p><p>举例来说，<code>app.ts</code>包含如下两行代码。</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> A <span class="keyword">from</span> <span class="string">&quot;moduleA&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> B <span class="keyword">from</span> <span class="string">&quot;moduleB&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用下面的命令进行编译。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tsc app<span class="selector-class">.ts</span> moduleA<span class="selector-class">.ts</span> <span class="attr">--noResolve</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面命令使用<code>--noResolve</code>参数，因此可以定位到<code>moduleA.ts</code>，因为它从命令行传入了；无法定位到<code>moduleB</code>，因为它没有传入，因此会报错。</p><h2 id="参考链接">参考链接 <a href="about:blank#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">#</a></h2><ul><li><a href="https://blog.51cto.com/u_13028258/5754309">tsconfig 之 importsNotUsedAsValues 属性</a></li></ul><p>本文转自 <a href="https://wangdoc.com/typescript/module">https://wangdoc.com/typescript/module</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">??TypeScript 模块</summary>
    
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 的类型断言</title>
    <link href="https://www.fomal.cc/posts/20.html"/>
    <id>https://www.fomal.cc/posts/20.html</id>
    <published>2023-06-14T10:50:00.000Z</published>
    <updated>2023-06-14T10:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>TypeScript 的类型断言</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><h2 id="简介">简介 <a href="about:blank#%E7%AE%80%E4%BB%8B">#</a></h2><p>对于没有类型声明的值，TypeScript 会进行类型推断，很多时候得到的结果，未必是开发者想要的。</p><figure class="highlight flix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T = <span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;b&#x27;</span>|<span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> foo = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar:T = foo; <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，最后一行报错，原因是 TypeScript 推断变量<code>foo</code>的类型是<code>string</code>，而变量<code>bar</code>的类型是<code>'a'|'b'|'c'</code>，前者是后者的父类型。父类型不能赋值给子类型，所以就报错了。</p><p>TypeScript 提供了“类型断言”这样一种手段，允许开发者在代码中“断言”某个值的类型，告诉编译器此处的值是什么类型。TypeScript 一旦发现存在类型断言，就不再对该值进行类型推断，而是直接采用断言给出的类型。</p><p>这种做法的实质是，允许开发者在某个位置“绕过”编译器的类型推断，让本来通不过类型检查的代码能够通过，避免编译器报错。这样虽然削弱了 TypeScript 类型系统的严格性，但是为开发者带来了方便，毕竟开发者比编译器更了解自己的代码。</p><p>回到上面的例子，解决方法就是进行类型断言，在赋值时断言变量<code>foo</code>的类型。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">T</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span><span class="operator">|</span><span class="string">&#x27;b&#x27;</span><span class="operator">|</span><span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> bar<span class="operator">:</span>T <span class="operator">=</span> foo <span class="keyword">as</span> T; <span class="comment">// 正确</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，最后一行的<code>foo as T</code>表示告诉编译器，变量<code>foo</code>的类型断言为<code>T</code>，所以这一行不再需要类型推断了，编译器直接把<code>foo</code>的类型当作<code>T</code>，就不会报错了。</p><p>总之，类型断言并不是真的改变一个值的类型，而是提示编译器，应该如何处理这个值。</p><p>类型断言有两种语法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法一：&lt;类型&gt;值</span></span><br><span class="line">&lt;<span class="built_in">Type</span>&gt;value</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法二：值 as 类型</span></span><br><span class="line">value <span class="keyword">as</span> <span class="built_in">Type</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面两种语法是等价的，<code>value</code>表示值，<code>Type</code>表示类型。早期只有语法一，后来因为 TypeScript 开始支持 React 的 JSX 语法（尖括号表示 HTML 元素），为了避免两者冲突，就引入了语法二。目前，推荐使用语法二。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法一</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">bar</span>:T = &lt;T&gt;foo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法二</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">bar</span>:T = foo as T;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例是两种类型断言的语法，其中的语法一因为跟 JSX 语法冲突，使用时必须关闭 TypeScript 的 React 支持，否则会无法识别。由于这个原因，现在一般都使用语法二。</p><p>下面看一个例子。《对象》一章提到过，对象类型有严格字面量检查，如果存在额外的属性会报错。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">报错</span></span><br><span class="line"><span class="string">const</span> <span class="string">p:&#123;</span> <span class="attr">x:</span> <span class="string">number</span> <span class="string">&#125;</span> <span class="string">=</span> &#123; <span class="attr">x:</span> <span class="number">0</span>, <span class="attr">y:</span> <span class="number">0</span> &#125;<span class="string">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，等号右侧是一个对象字面量，多出了属性<code>y</code>，导致报错。解决方法就是使用类型断言，可以用两种不同的断言。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p0</span>:&#123; <span class="attr">x</span>: <span class="built_in">number</span> &#125; =</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125; <span class="keyword">as</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>:&#123; <span class="attr">x</span>: <span class="built_in">number</span> &#125; =</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125; <span class="keyword">as</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，两种类型断言都是正确的。第一种断言将类型改成与等号左边一致，第二种断言使得等号右边的类型是左边类型的子类型，子类型可以赋值给父类型，同时因为存在类型断言，就没有严格字面量检查了，所以不报错。</p><p>下面是一个网页编程的实际例子。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (username) &#123;</span><br><span class="line">  (username <span class="keyword">as</span> HTMLInputElement).value; <span class="comment">// 正确</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，变量<code>username</code>的类型是<code>HTMLElement | null</code>，排除了<code>null</code>的情况以后，HTMLElement 类型是没有<code>value</code>属性的。如果<code>username</code>是一个输入框，那么就可以通过类型断言，将它的类型改成<code>HTMLInputElement</code>，就可以读取<code>value</code>属性。</p><p>注意，上例的类型断言的圆括号是必需的，否则<code>username</code>会被断言成<code>HTMLInputElement.value</code>，从而报错。</p><p>类型断言不应滥用，因为它改变了 TypeScript 的类型检查，很可能埋下错误的隐患。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">data</span>:<span class="keyword">object</span> = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span>.length; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">data</span> <span class="keyword">as</span> Array&lt;string&gt;).length; <span class="comment">// 正确</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，变量<code>data</code>是一个对象，没有<code>length</code>属性。但是通过类型断言，可以将它的类型断言为数组，这样使用<code>length</code>属性就能通过类型检查。但是，编译后的代码在运行时依然会报错，所以类型断言可以让错误的代码通过编译。</p><p>类型断言的一大用处是，指定 unknown 类型的变量的具体类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">value</span>:<span class="built_in">unknown</span> = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">s1</span>:<span class="built_in">string</span> = value; <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">s2</span>:<span class="built_in">string</span> = value <span class="keyword">as</span> <span class="built_in">string</span>; <span class="comment">// 正确</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，unknown 类型的变量<code>value</code>不能直接赋值给其他类型的变量，但是可以将它断言为其他类型，这样就可以赋值给别的变量了。</p><h2 id="类型断言的条件">类型断言的条件 <a href="about:blank#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E6%9D%A1%E4%BB%B6">#</a></h2><p>类型断言并不意味着，可以把某个值断言为任意类型。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> m:<span class="built_in">string</span> = n <span class="keyword">as</span> <span class="built_in">string</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，变量<code>n</code>是数值，无法把它断言成字符串，TypeScript 会报错。</p><p>类型断言的使用前提是，值的实际类型与断言的类型必须满足一个条件。</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">expr</span> <span class="keyword">as</span> T</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，<code>expr</code>是实际的值，<code>T</code>是类型断言，它们必须满足下面的条件：<code>expr</code>是<code>T</code>的子类型，或者<code>T</code>是<code>expr</code>的子类型。</p><p>也就是说，类型断言要求实际的类型与断言的类型兼容，实际类型可以断言为一个更加宽泛的类型（父类型），也可以断言为一个更加精确的类型（子类型），但不能断言为一个完全无关的类型。</p><p>但是，如果真的要断言成一个完全无关的类型，也是可以做到的。那就是连续进行两次类型断言，先断言成 unknown 类型或 any 类型，然后再断言为目标类型。因为<code>any</code>类型和<code>unknown</code>类型是所有其他类型的父类型，所以可以作为两种完全无关的类型的中介。</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 或者写成 &lt;T&gt;&lt;unknown&gt;<span class="type">expr</span></span><br><span class="line"><span class="type">expr</span> <span class="keyword">as</span> unknown <span class="keyword">as</span> T</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，<code>expr</code>连续进行了两次类型断言，第一次断言为<code>unknown</code>类型，第二次断言为<code>T</code>类型。这样的话，<code>expr</code>就可以断言成任意类型<code>T</code>，而不报错。</p><p>下面是本小节开头那个例子的改写。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">m</span>:<span class="built_in">string</span> = n <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="built_in">string</span>; <span class="comment">// 正确</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，通过两次类型断言，变量<code>n</code>的类型就从数值，变成了完全无关的字符串，从而赋值时不会报错。</p><h2 id="as-const-断言">as const 断言 <a href="about:blank#as-const-%E6%96%AD%E8%A8%80">#</a></h2><p>如果没有声明变量类型，let 命令声明的变量，会被类型推断为 TypeScript 内置的基本类型之一；const 命令声明的变量，则被推断为值类型常量。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型推断为基本类型 string</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="string">&#x27;JavaScript&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型推断为字符串 “JavaScript”</span></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="string">&#x27;JavaScript&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，变量<code>s1</code>的类型被推断为<code>string</code>，变量<code>s2</code>的类型推断为值类型<code>JavaScript</code>。后者是前者的子类型，相当于 const 命令有更强的限定作用，可以缩小变量的类型范围。</p><p>有些时候，let 变量会出现一些意想不到的报错，变更成 const 变量就能消除报错。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let s = <span class="symbol">&#x27;JavaScript</span>&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="type">Lang </span>=</span><br><span class="line">  |<span class="symbol">&#x27;JavaScript</span>&#x27;</span><br><span class="line">  |<span class="symbol">&#x27;TypeScript</span>&#x27;</span><br><span class="line">  |<span class="symbol">&#x27;Python</span>&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title">setLang</span>(language:Lang) &#123;</span><br><span class="line">  /* ... */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setLang(s); // 报错</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，最后一行报错，原因是函数<code>setLang()</code>的参数<code>language</code>类型是<code>Lang</code>，这是一个联合类型。但是，传入的字符串<code>s</code>的类型被推断为<code>string</code>，属于<code>Lang</code>的父类型。父类型不能替代子类型，导致报错。</p><p>一种解决方法就是把 let 命令改成 const 命令。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">const s</span> = <span class="string">&#x27;JavaScript&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样的话，变量<code>s</code>的类型就是值类型<code>JavaScript</code>，它是联合类型<code>Lang</code>的子类型，传入函数<code>setLang()</code>就不会报错。</p><p>另一种解决方法是使用类型断言。TypeScript 提供了一种特殊的类型断言<code>as const</code>，用于告诉编译器，推断类型时，可以将这个值推断为常量，即把 let 变量断言为 const 变量，从而把内置的基本类型变更为值类型。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;JavaScript&#x27;</span> <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line">setLang(s);  <span class="comment">// 正确</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，变量<code>s</code>虽然是用 let 命令声明的，但是使用了<code>as const</code>断言以后，就等同于是用 const 命令声明的，变量<code>s</code>的类型会被推断为值类型<code>JavaScript</code>。</p><p>使用了<code>as const</code>断言以后，let 变量就不能再改变值了。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;JavaScript&#x27;</span> <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line">s = <span class="string">&#x27;Python&#x27;</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，let 命令声明的变量<code>s</code>，使用<code>as const</code>断言以后，就不能改变值了，否则报错。</p><p>注意，<code>as const</code>断言只能用于字面量，不能用于变量。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;JavaScript&#x27;</span>;</span><br><span class="line">setLang(s <span class="keyword">as</span> <span class="keyword">const</span>); <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>as const</code>断言用于变量<code>s</code>，就报错了。下面的写法可以更清晰地看出这一点。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&#x27;JavaScript&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> s2 = s1 <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另外，<code>as const</code>也不能用于表达式。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = (<span class="string">&#x27;Java&#x27;</span> + <span class="string">&#x27;Script&#x27;</span>) <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>as const</code>用于表达式，导致报错。</p><p><code>as const</code>也可以写成前置的形式。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后置形式</span></span><br><span class="line">expr <span class="keyword">as</span> <span class="keyword">const</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前置形式</span></span><br><span class="line">&lt;<span class="keyword">const</span>&gt;expr</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>as const</code>断言可以用于整个对象，也可以用于对象的单个属性，这时它的类型缩小效果是不一样的。</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const v1 = &#123;</span><br><span class="line">  <span class="attribute">x</span>: 1,</span><br><span class="line">  y: 2,</span><br><span class="line">&#125;; // 类型是 &#123; <span class="attribute">x</span>: number; <span class="attribute">y</span>: number; &#125;</span><br><span class="line"></span><br><span class="line">const v2 = &#123;</span><br><span class="line">  <span class="attribute">x</span>: 1 as const,</span><br><span class="line">  y: 2,</span><br><span class="line">&#125;; // 类型是 &#123; <span class="attribute">x</span>: 1; <span class="attribute">y</span>: number; &#125;</span><br><span class="line"></span><br><span class="line">const v3 = &#123;</span><br><span class="line">  <span class="attribute">x</span>: 1,</span><br><span class="line">  y: 2,</span><br><span class="line">&#125; as const; // 类型是 &#123; <span class="attribute">readonly x</span>: 1; <span class="attribute">readonly y</span>: 2; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，第二种写法是对属性<code>x</code>缩小类型，第三种写法是对整个对象缩小类型。</p><p>总之，<code>as const</code>会将字面量的类型断言为不可变类型，缩小成 TypeScript 允许的最小类型。</p><p>下面是数组的例子。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a1 的类型推断为 number[]</span></span><br><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// a2 的类型推断为 readonly [1, 2, 3]</span></span><br><span class="line"><span class="keyword">const</span> a2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，数组字面量使用<code>as const</code>断言后，类型推断就变成了只读元组。</p><p>由于<code>as const</code>会将数组变成只读元组，所以很适合用于函数的 rest 参数。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x:<span class="built_in">number</span>, y:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> total = <span class="title function_">add</span>(...nums); <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，变量<code>nums</code>的类型推断为<code>number[]</code>，导致使用扩展运算符<code>...</code>传入函数<code>add()</code>会报错，因为<code>add()</code>只能接受两个参数，而<code>...nums</code>并不能保证参数的个数。</p><p>事实上，对于固定参数个数的函数，如果传入的参数包含扩展运算符，那么扩展运算符只能用于元组。只有当函数定义使用了 rest 参数，扩展运算符才能用于数组。</p><p>解决方法就是使用<code>as const</code>断言，将数组变成元组。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">const</span> total = <span class="keyword">add</span>(...nums); <span class="comment">// 正确</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，使用<code>as const</code>断言后，变量<code>nums</code>的类型会被推断为<code>readonly [1, 2]</code>，使用扩展运算符展开后，正好符合函数<code>add()</code>的参数类型。</p><p>Enum 成员也可以使用<code>as const</code>断言。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Foo &#123;</span><br><span class="line">  X,</span><br><span class="line">  Y,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> e1 = Foo.X;            <span class="comment">// Foo</span></span><br><span class="line"><span class="keyword">let</span> e2 = Foo.X <span class="keyword">as</span> <span class="keyword">const</span>;   <span class="comment">// Foo.X</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，如果不使用<code>as const</code>断言，变量<code>e1</code>的类型被推断为整个 Enum 类型；使用了<code>as const</code>断言以后，变量<code>e2</code>的类型被推断为 Enum 的某个成员，这意味着它不能变更为其他成员。</p><h2 id="非空断言">非空断言 <a href="about:blank#%E9%9D%9E%E7%A9%BA%E6%96%AD%E8%A8%80">#</a></h2><p>对于那些可能为空的变量（即可能等于<code>undefined</code>或<code>null</code>），TypeScript 提供了非空断言，保证这些变量不会为空，写法是在变量名后面加上感叹号<code>!</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x?:number|<span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="title function_">validateNumber</span>(x); <span class="comment">// 自定义函数，确保 x 是数值</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x!.<span class="title function_">toFixed</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validateNumber</span>(<span class="params">e?:number|<span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> e !== <span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Not a number&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，函数<code>f()</code>的参数<code>x</code>的类型是<code>number|null</code>，即可能为空。如果为空，就不存在<code>x.toFixed()</code>方法，这样写会报错。但是，开发者可以确认，经过<code>validateNumber()</code>的前置检验，变量<code>x</code>肯定不会为空，这时就可以使用非空断言，为函数体内部的变量<code>x</code>加上后缀<code>!</code>，<code>x!.toFixed()</code>编译就不会报错了。</p><p>非空断言在实际编程中很有用，有时可以省去一些额外的判断。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line">root.addEventListener(<span class="string">&#x27;click&#x27;</span>, e =&gt; &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>getElementById()</code>有可能返回空值<code>null</code>，即变量<code>root</code>可能为空，这时对它调用<code>addEventListener()</code>方法就会报错，通不过编译。但是，开发者如果可以确认<code>root</code>元素肯定会在网页中存在，这时就可以使用非空断言。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)!;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>getElementById()</code>方法加上后缀<code>!</code>，表示这个方法肯定返回非空结果。</p><p>不过，非空断言会造成安全隐患，只有在确定一个表达式的值不为空时才能使用。比较保险的做法还是手动检查一下是否为空。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Unable to find DOM element #root&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">root.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，如果<code>root</code>为空会抛错，比非空断言更保险一点。</p><p>非空断言还可以用于赋值断言。TypeScript 有一个编译设置，要求类的属性必须初始化（即有初始值），如果不对属性赋值就会报错。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>:<span class="built_in">number</span>; <span class="comment">// 报错</span></span><br><span class="line">  <span class="attr">y</span>:<span class="built_in">number</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x:<span class="built_in">number</span>, y:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，属性<code>x</code>和<code>y</code>会报错，因为 TypeScript 认为它们没有初始化。</p><p>这时就可以使用非空断言，表示这两个属性肯定会有值，这样就不会报错了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  x!:<span class="built_in">number</span>; <span class="comment">// 正确</span></span><br><span class="line">  y!:<span class="built_in">number</span>; <span class="comment">// 正确</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x:<span class="built_in">number</span>, y:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另外，非空断言只有在打开编译选项<code>strictNullChecks</code>时才有意义。如果不打开这个选项，编译器就不会检查某个变量是否可能为<code>undefined</code>或<code>null</code>。</p><h2 id="断言函数">断言函数 <a href="about:blank#%E6%96%AD%E8%A8%80%E5%87%BD%E6%95%B0">#</a></h2><p>断言函数是一种特殊函数，用于保证函数参数符合某种类型。如果函数参数达不到要求，就会抛出错误，中断程序执行；如果达到要求，就不进行任何操作，让代码按照正常流程运行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isString</span>(<span class="params">value:unknown</span>):<span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Not a string&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，函数<code>isString()</code>就是一个断言函数，用来保证参数<code>value</code>是一个字符串，否则就会抛出错误，中断程序的执行。</p><p>下面是它的用法。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">toUpper</span>(x: string|number) &#123;</span><br><span class="line">  <span class="keyword">is</span>String(x);</span><br><span class="line">  <span class="keyword">return</span> x.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，函数<code>toUpper()</code>的参数<code>x</code>，可能是字符串，也可能是数值。但是，函数体的最后一行调用<code>toUpperCase()</code>方法，必须保证<code>x</code>是字符串，否则报错。所以，这一行前面调用断言函数<code>isString()</code>，调用以后 TypeScript 就能确定，变量<code>x</code>一定是字符串，不是数值，也就不报错了。</p><p>传统的断言函数<code>isString()</code>的写法有一个缺点，它的参数类型是<code>unknown</code>，返回值类型是<code>void</code>（即没有返回值）。单单从这样的类型声明，很难看出<code>isString()</code>是一个断言函数。</p><p>为了更清晰地表达断言函数，TypeScript 3.7 引入了新的类型写法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isString</span>(<span class="params">value:<span class="built_in">unknown</span></span>):asserts value is <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Not a string&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，函数<code>isString()</code>的返回值类型写成<code>asserts value is string</code>，其中<code>asserts</code>和<code>is</code>都是关键词，<code>value</code>是函数的参数名，<code>string</code>是函数参数的预期类型。它的意思是，该函数用来断言参数<code>value</code>的类型是<code>string</code>，如果达不到要求，程序就会在这里中断。</p><p>使用了断言函数的新写法以后，TypeScript 就会自动识别，只要执行了该函数，对应的变量都为断言的类型。</p><p>注意，函数返回值的断言写法，只是用来更清晰地表达函数意图，真正的检查是需要开发者自己部署的。而且，如果内部的检查与断言不一致，TypeScript 也不会报错。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isString</span>(<span class="params">value:<span class="built_in">unknown</span></span>):asserts value is <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Not a number&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，函数的断言是参数<code>value</code>类型为字符串，但是实际上，内部检查的却是它是否为数值，如果不是就抛错。这段代码能够正常通过编译，表示 TypeScript 并不会检查断言与实际的类型检查是否一致。</p><p>另外，断言函数的<code>asserts</code>语句等同于<code>void</code>类型，所以如果返回除了<code>undefined</code>和<code>null</code>以外的值，都会报错。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isString</span>(<span class="params">value:<span class="built_in">unknown</span></span>):asserts value is <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Not a string&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，断言函数返回了<code>true</code>，导致报错。</p><p>下面是另一个例子。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">AccessLevel </span>= <span class="string">&#x27;r&#x27;</span> | <span class="string">&#x27;w&#x27;</span> | <span class="symbol">&#x27;rw</span>&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title">allowsReadAccess</span>(</span><br><span class="line">  level:AccessLevel</span><br><span class="line">):asserts level <span class="keyword">is</span> <span class="string">&#x27;r&#x27;</span> | <span class="symbol">&#x27;rw</span>&#x27; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!level.includes(<span class="string">&#x27;r&#x27;</span>))</span><br><span class="line">    throw <span class="keyword">new</span> Error(<span class="symbol">&#x27;Read</span> <span class="keyword">not</span> allowed&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，函数<code>allowsReadAccess()</code>用来断言参数<code>level</code>一定等于<code>r</code>或<code>rw</code>。</p><p>如果要断言参数非空，可以使用工具类型<code>NonNullable&lt;T&gt;</code>。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assertIsDefined</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  value:T</span></span></span><br><span class="line"><span class="params"><span class="function"></span>):<span class="title">asserts</span> <span class="title">value</span> <span class="title">is</span> <span class="title">NonNullable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="literal">undefined</span> || value === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;value&#125;</span> is not defined`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，工具类型<code>NonNullable&lt;T&gt;</code>对应类型<code>T</code>去除空类型后的剩余类型。</p><p>如果要将断言函数用于函数表达式，可以采用下面的写法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> assertIsNumber = (</span><br><span class="line">  <span class="attr">value</span>:<span class="built_in">unknown</span></span><br><span class="line">):asserts value is <span class="built_in">number</span> =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;Not a number&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AssertIsNumber</span> =</span><br><span class="line">  <span class="function">(<span class="params">value:<span class="built_in">unknown</span></span>) =&gt;</span> asserts value is <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">assertIsNumber</span>:<span class="title class_">AssertIsNumber</span> = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;Not a number&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，断言函数与类型保护函数（type guard）是两种不同的函数。它们的区别是，断言函数不返回值，而类型保护函数总是返回一个布尔值。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isString</span><span class="params">(</span></span><br><span class="line"><span class="params">  value:unknown</span></span><br><span class="line"><span class="params">)</span>:value <span class="title function_">is</span> <span class="title function_">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例就是一个类型保护函数<code>isString()</code>，作用是检查参数<code>value</code>是否为字符串。如果是的，返回<code>true</code>，否则返回<code>false</code>。该函数的返回值类型是<code>value is string</code>，其中的<code>is</code>是一个类型运算符，如果左侧的值符合右侧的类型，则返回<code>true</code>，否则返回<code>false</code>。</p><p>如果要断言某个参数保证为真（即不等于<code>false</code>、<code>undefined</code>和<code>null</code>），TypeScript 提供了断言函数的一种简写形式。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">assert</span><span class="params">(x:unknown)</span>:asserts <span class="title function_">x</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，函数<code>assert()</code>的断言部分，<code>asserts x</code>省略了谓语和宾语，表示参数<code>x</code>保证为真（<code>true</code>）。</p><p>同样的，参数为真的实际检查需要开发者自己实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">assert</span>(<span class="params">x:unknown</span>):asserts x &#123;</span><br><span class="line">  <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`<span class="subst">$&#123;x&#125;</span> should be a truthy value.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种断言函数的简写形式，通常用来检查某个操作是否成功。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  email?: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadPerson</span>(<span class="params"></span>): <span class="title class_">Person</span> | <span class="literal">null</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="title function_">loadPerson</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">assert</span>(<span class="params"></span></span><br><span class="line"><span class="params">  condition: <span class="built_in">unknown</span>,</span></span><br><span class="line"><span class="params">  message: <span class="built_in">string</span></span></span><br><span class="line"><span class="params"></span>):asserts condition &#123;</span><br><span class="line">  <span class="keyword">if</span> (!condition) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error: Person is not defined</span></span><br><span class="line"><span class="title function_">assert</span>(person, <span class="string">&#x27;Person is not defined&#x27;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，只有<code>loadPerson()</code>返回结果为真（即操作成功），<code>assert()</code>才不会报错。</p><h2 id="参考链接">参考链接 <a href="about:blank#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">#</a></h2><ul><li><a href="https://mariusschulz.com/blog/const-assertions-in-literal-expressions-in-typescript">Const Assertions in Literal Expressions in TypeScript</a>, Marius Schulz</li><li><a href="https://mariusschulz.com/blog/assertion-functions-in-typescript">Assertion Functions in TypeScript</a>, Marius Schulz</li><li><a href="https://blog.logrocket.com/assertion-functions-typescript/">Assertion functions in TypeScript</a>, Matteo Di Pirro</li></ul><p>本文转自 <a href="https://wangdoc.com/typescript/assert">https://wangdoc.com/typescript/assert</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">??TypeScript 的类型断言</summary>
    
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 的 Enum 类型</title>
    <link href="https://www.fomal.cc/posts/19.html"/>
    <id>https://www.fomal.cc/posts/19.html</id>
    <published>2023-06-13T10:50:00.000Z</published>
    <updated>2023-06-13T10:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>TypeScript 的 Enum 类型</h1><p>网道（<a href="http://WangDoc.com">WangDoc.com</a>），互联网文档计划</p><p>Enum 是 TypeScript 新增的一种数据结构和类型，中文译为“枚举”。</p><h2 id="简介">简介 <a href="about:blank#%E7%AE%80%E4%BB%8B">#</a></h2><p>实际开发中，经常需要定义一组相关的常量。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> RED = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> GREEN = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> BLUE = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">color</span> = userInput();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">color</span> === RED) &#123;<span class="comment">/* */</span>&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">color</span> === GREEN) &#123;<span class="comment">/* */</span>&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">color</span> === BLUE) &#123;<span class="comment">/* */</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;wrong color&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，常量<code>RED</code>、<code>GREEN</code>、<code>BLUE</code>是相关的，意为变量<code>color</code>的三个可能的取值。它们具体等于什么值其实并不重要，只要不相等就可以了。</p><p>TypeScript 就设计了 Enum 结构，用来将相关常量放在一个容器里面，方便使用。</p><figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">  Red,     <span class="comment">// 0</span></span><br><span class="line">  Green,   <span class="comment">// 1</span></span><br><span class="line">  Blue     <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例声明了一个 Enum 结构<code>Color</code>，里面包含三个成员<code>Red</code>、<code>Green</code>和<code>Blue</code>。第一个成员的值默认为整数<code>0</code>，第二个为<code>1</code>，第三个为<code>2</code>，以此类推。</p><p>使用时，调用 Enum 的某个成员，与调用对象属性的写法一样，可以使用点运算符，也可以使用方括号运算符。</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = Color.Green; <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> c = Color[<span class="string">&#x27;Green&#x27;</span>]; <span class="comment">// 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Enum 结构本身也是一种类型。比如，上例的变量<code>c</code>等于<code>1</code>，它的类型可以是 Color，也可以是<code>number</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">c</span>:<span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>; <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>:<span class="built_in">number</span> = <span class="title class_">Color</span>.<span class="property">Green</span>; <span class="comment">// 正确</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，变量<code>c</code>的类型写成<code>Color</code>或<code>number</code>都可以。但是，<code>Color</code>类型的语义更好。</p><p>Enum 结构的特别之处在于，它既是一种类型，也是一个值。绝大多数 TypeScript 语法都是类型语法，编译后会全部去除，但是 Enum 结构是一个值，编译后会变成 JavaScript 对象，留在代码中。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译前</span></span><br><span class="line">enum <span class="title class_">Color</span> <span class="punctuation">&#123;</span></span><br><span class="line">  Red,     <span class="comment">// 0</span></span><br><span class="line">  Green,   <span class="comment">// 1</span></span><br><span class="line">  Blue     <span class="comment">// 2</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译后</span></span><br><span class="line">let C<span class="attr">olor</span> <span class="operator">=</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">  Red:</span> <span class="number">0</span>,</span><br><span class="line"><span class="symbol">  Green:</span> <span class="number">1</span>,</span><br><span class="line"><span class="symbol">  Blue:</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例是 Enum 结构编译前后的对比。</p><p>由于 TypeScript 的定位是 JavaScript 语言的类型增强，所以官方建议谨慎使用 Enum 结构，因为它不仅仅是类型，还会为编译后的代码加入一个对象。</p><p>Enum 结构比较适合的场景是，成员的值不重要，名字更重要，从而增加代码的可读性和可维护性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Operator</span> &#123;</span><br><span class="line">  <span class="variable constant_">ADD</span>,</span><br><span class="line">  <span class="variable constant_">DIV</span>,</span><br><span class="line">  <span class="variable constant_">MUL</span>,</span><br><span class="line">  <span class="variable constant_">SUB</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compute</span>(<span class="params"></span></span><br><span class="line"><span class="params">  op:Operator,</span></span><br><span class="line"><span class="params">  a:<span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  b:<span class="built_in">number</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">Operator</span>.<span class="property">ADD</span>:</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">Operator</span>.<span class="property">DIV</span>:</span><br><span class="line">      <span class="keyword">return</span> a / b;</span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">Operator</span>.<span class="property">MUL</span>:</span><br><span class="line">      <span class="keyword">return</span> a * b;</span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">Operator</span>.<span class="property">SUB</span>:</span><br><span class="line">      <span class="keyword">return</span> a - b;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;wrong operator&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">compute</span>(<span class="title class_">Operator</span>.<span class="property">ADD</span>, <span class="number">1</span>, <span class="number">3</span>) <span class="comment">// 4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，Enum 结构<code>Operator</code>的四个成员表示四则运算“加减乘除”。代码根本不需要用到这四个成员的值，只用成员名就够了。</p><p><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-0.html#enum-overhaul">TypeScript 5.0</a> 之前，Enum 有一个 Bug，就是 Enum 类型的变量可以赋值为任何数值。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">enum Bool &#123;</span><br><span class="line">  No,</span><br><span class="line">  Yes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="built_in">foo</span>(noYes:Bool) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">foo</span>(<span class="number">33</span>);  <span class="comment">// TypeScript 5.0 之前不报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，函数<code>foo</code>的参数<code>noYes</code>是 Enum 类型，只有两个可用的值。但是，TypeScript 5.0 之前，任何数值作为函数<code>foo</code>的参数，编译都不会报错，TypeScript 5.0 纠正了这个问题。</p><p>另外，由于 Enum 结构编译后是一个对象，所以不能有与它同名的变量（包括对象、函数、类等）。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;</span><br><span class="line">  Red,</span><br><span class="line">  Green,</span><br><span class="line">  Blue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Color = <span class="string">&#x27;red&#x27;</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例，Enum 结构与变量同名，导致报错。</p><p>很大程度上，Enum 结构可以被对象的<code>as const</code>断言替代。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Foo &#123;</span><br><span class="line">  A,</span><br><span class="line">  B,</span><br><span class="line">  C,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Bar = &#123;</span><br><span class="line">  A: <span class="number">0</span>,</span><br><span class="line">  B: <span class="number">1</span>,</span><br><span class="line">  C: <span class="number">2</span>,</span><br><span class="line">&#125; <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x === Foo.A) &#123;&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">if</span> (x === Bar.A) &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，对象<code>Bar</code>使用了<code>as const</code>断言，作用就是使得它的属性无法修改。这样的话，<code>Foo</code>和<code>Bar</code>的行为就很类似了，前者完全可以用后者替代，而且后者还是 JavaScript 的原生数据结构。</p><h2 id="Enum-成员的值">Enum 成员的值 <a href="about:blank#enum-%E6%88%90%E5%91%98%E7%9A%84%E5%80%BC">#</a></h2><p>Enum 成员默认不必赋值，系统会从零开始逐一递增，按照顺序为每个成员赋值，比如0、1、2……</p><p>但是，也可以为 Enum 成员显式赋值。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">enum</span> <span class="variable">Color</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="built_in">Red</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Green</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Blue</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">//</span> 等同于</span><br><span class="line"><span class="variable">enum</span> <span class="variable">Color</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="built_in">Red</span> <span class="operator">=</span> <span class="number">0</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Green</span> <span class="operator">=</span> <span class="number">1</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Blue</span> <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，Enum 每个成员的值都是显式赋值。</p><p>成员的值可以是任意数值，但不能是大整数（Bigint）。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">enum</span> <span class="variable">Color</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="built_in">Red</span> <span class="operator">=</span> <span class="number">90</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Green</span> <span class="operator">=</span> <span class="number">0.5</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Blue</span> <span class="operator">=</span> <span class="number">7</span><span class="variable">n</span> <span class="operator">//</span> 报错</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，Enum 成员的值可以是小数，但不能是 Bigint。</p><p>成员的值甚至可以相同。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">enum</span> <span class="variable">Color</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="built_in">Red</span> <span class="operator">=</span> <span class="number">0</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Green</span> <span class="operator">=</span> <span class="number">0</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Blue</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果只设定第一个成员的值，后面成员的值就会从这个值开始递增。</p><figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">  Red = <span class="number">7</span>,</span><br><span class="line">  Green,  <span class="comment">// 8</span></span><br><span class="line">  Blue   <span class="comment">// 9</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">  Red, <span class="comment">// 0</span></span><br><span class="line">  Green = <span class="number">7</span>,</span><br><span class="line">  Blue <span class="comment">// 8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Enum 成员的值也可以使用计算式。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">enum Permission &#123;</span><br><span class="line">  UserRead     =<span class="number"> 1 </span>&lt;&lt; 8,</span><br><span class="line">  UserWrite    =<span class="number"> 1 </span>&lt;&lt; 7,</span><br><span class="line">  UserExecute  =<span class="number"> 1 </span>&lt;&lt; 6,</span><br><span class="line">  GroupRead    =<span class="number"> 1 </span>&lt;&lt; 5,</span><br><span class="line">  GroupWrite   =<span class="number"> 1 </span>&lt;&lt; 4,</span><br><span class="line">  GroupExecute =<span class="number"> 1 </span>&lt;&lt; 3,</span><br><span class="line">  AllRead      =<span class="number"> 1 </span>&lt;&lt; 2,</span><br><span class="line">  AllWrite     =<span class="number"> 1 </span>&lt;&lt; 1,</span><br><span class="line">  AllExecute   =<span class="number"> 1 </span>&lt;&lt; 0,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum Bool &#123;</span><br><span class="line">  No = 123,</span><br><span class="line">  Yes = Math.random(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，Enum 成员的值等于一个计算式，或者等于函数的返回值，都是正确的。</p><p>Enum 成员值都是只读的，不能重新赋值。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">enum</span> <span class="variable">Color</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="built_in">Red</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Green</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Blue</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">Color</span><span class="operator">.</span><span class="built_in">Red</span> <span class="operator">=</span> <span class="number">4</span><span class="operator">;</span> <span class="operator">//</span> 报错</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，重新为 Enum 成员赋值就会报错。</p><p>为了让这一点更醒目，通常会在 enum 关键字前面加上<code>const</code>修饰，表示这是常量，不能再次赋值。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">const</span> <span class="variable">enum</span> <span class="variable">Color</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="built_in">Red</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Green</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Blue</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加上<code>const</code>还有一个好处，就是编译为 JavaScript 代码后，代码中 Enum 成员会被替换成对应的值，这样能提高性能表现。</p><figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">enum</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">  Red,</span><br><span class="line">  Green,</span><br><span class="line">  Blue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = Color.Red;</span><br><span class="line"><span class="keyword">const</span> y = Color.Green;</span><br><span class="line"><span class="keyword">const</span> z = Color.Blue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译后</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="number">0</span> <span class="comment">/* Color.Red */</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="number">1</span> <span class="comment">/* Color.Green */</span>;</span><br><span class="line"><span class="keyword">const</span> z = <span class="number">2</span> <span class="comment">/* Color.Blue */</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，由于 Enum 结构前面加了<code>const</code>关键字，所以编译产物里面就没有生成对应的对象，而是把所有 Enum 成员出现的场合，都替换成对应的常量。</p><p>如果希望加上<code>const</code>关键词后，运行时还能访问 Enum 结构（即编译后依然将 Enum 转成对象），需要在编译时打开<code>preserveConstEnums</code>编译选项。</p><h2 id="同名-Enum-的合并">同名 Enum 的合并 <a href="about:blank#%E5%90%8C%E5%90%8D-enum-%E7%9A%84%E5%90%88%E5%B9%B6">#</a></h2><p>多个同名的 Enum 结构会自动合并。</p><figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  A,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  B = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  C = <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  A,</span><br><span class="line">  B = <span class="number">1</span>，</span><br><span class="line">  C = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Foo</code>分成三段定义，系统会自动把它们合并。</p><p>Enum 结构合并时，只允许其中一个的首成员省略初始值，否则报错。</p><figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  A,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  B, <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Foo</code>的两段定义的第一个成员，都没有设置初始值，导致报错。</p><p>同名 Enum 合并时，不能有同名成员，否则报错。</p><figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  A,</span><br><span class="line">  B</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  B = <span class="number">1</span>, <span class="comment">// 报错</span></span><br><span class="line">  C</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Foo</code>的两段定义有一个同名成员<code>B</code>，导致报错。</p><p>同名 Enum 合并的另一个限制是，所有定义必须同为 const 枚举或者非 const 枚举，不允许混合使用。</p><figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">  A,</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">  B = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">enum</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">  A,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">enum</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">  B = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">  A,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">enum</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">  B = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同名 Enum 的合并，最大用处就是补充外部定义的 Enum 结构。</p><h2 id="字符串-Enum">字符串 Enum <a href="about:blank#%E5%AD%97%E7%AC%A6%E4%B8%B2-enum">#</a></h2><p>Enum 成员的值除了设为数值，还可以设为字符串。也就是说，Enum 也可以用作一组相关字符串的集合。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">enum</span> Direction &#123;</span><br><span class="line">  <span class="attribute">Up</span> = <span class="string">&#x27;UP&#x27;</span>,</span><br><span class="line">  Down = <span class="string">&#x27;DOWN&#x27;</span>,</span><br><span class="line">  Left = <span class="string">&#x27;LEFT&#x27;</span>,</span><br><span class="line">  Right = <span class="string">&#x27;RIGHT&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>Direction</code>就是字符串枚举，每个成员的值都是字符串。</p><p>注意，字符串枚举的所有成员值，都必须显式设置。如果没有设置，成员值默认为数值，且位置必须在字符串成员之前。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Foo &#123;</span><br><span class="line">  A, <span class="comment">// 0</span></span><br><span class="line">  B = <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  C <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>A</code>之前没有其他成员，所以可以不设置初始值，默认等于<code>0</code>；<code>C</code>之前有一个字符串成员，所以<code>C</code>必须有初始值，不赋值就报错了。</p><p>Enum 成员可以是字符串和数值混合赋值。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="keyword">Enum</span> &#123;</span><br><span class="line">  One = <span class="string">&#x27;One&#x27;</span>,</span><br><span class="line">  Two = <span class="string">&#x27;Two&#x27;</span>,</span><br><span class="line">  Three = <span class="number">3</span>,</span><br><span class="line">  Four = <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>除了数值和字符串，Enum 成员不允许使用其他值（比如 Symbol 值）。</p><p>变量类型如果是字符串 Enum，就不能再赋值为字符串，这跟数值 Enum 不一样。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enum MyEnum &#123;</span><br><span class="line">  <span class="keyword">One</span> = &#x27;<span class="keyword">One</span>&#x27;,</span><br><span class="line">  <span class="keyword">Two</span> = &#x27;<span class="keyword">Two</span>&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let s = MyEnum.<span class="keyword">One</span>;</span><br><span class="line">s = &#x27;<span class="keyword">One</span>&#x27;; <span class="comment">// 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，变量<code>s</code>的类型是<code>MyEnum</code>，再赋值为字符串就报错。</p><p>由于这个原因，如果函数的参数类型是字符串 Enum，传参时就不能直接传入字符串，而要传入 Enum 成员。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">enum MyEnum &#123;</span><br><span class="line">  One = <span class="symbol">&#x27;One</span>&#x27;,</span><br><span class="line">  Two = <span class="symbol">&#x27;Two</span>&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title">f</span>(arg:MyEnum) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">&#x27;arg</span> <span class="keyword">is</span> &#x27; + arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="symbol">&#x27;One</span>&#x27;) // 报错</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，参数类型是<code>MyEnum</code>，直接传入字符串会报错。</p><p>所以，字符串 Enum 作为一种类型，有限定函数参数的作用。</p><p>前面说过，数值 Enum 的成员值往往不重要。但是有些场合，开发者可能希望 Enum 成员值可以保存一些有用的信息，所以 TypeScript 才设计了字符串 Enum。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> MediaTypes &#123;</span><br><span class="line">  <span class="built_in">JSON</span> = <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">  XML = <span class="string">&#x27;application/xml&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line">fetch(url, &#123;</span><br><span class="line">  headers: &#123;</span><br><span class="line">    Accept: MediaTypes.<span class="built_in">JSON</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).<span class="keyword">then</span>(response =&gt; &#123;</span><br><span class="line">  <span class="regexp">// ...</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br></pre></td></tr></table></figure><p>上面示例中，函数<code>fetch()</code>的参数对象的属性<code>Accept</code>，只能接受一些指定的字符串。这时就很适合把字符串放进一个 Enum 结构，通过成员值来引用这些字符串。</p><p>字符串 Enum 可以使用联合类型（union）代替。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">move</span><span class="params">(</span></span><br><span class="line"><span class="params">  where:<span class="string">&#x27;Up&#x27;</span>|<span class="string">&#x27;Down&#x27;</span>|<span class="string">&#x27;Left&#x27;</span>|<span class="string">&#x27;Right&#x27;</span></span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，函数参数<code>where</code>属于联合类型，效果跟指定为字符串 Enum 是一样的。</p><p>注意，字符串 Enum 的成员值，不能使用表达式赋值。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> MyEnum &#123;</span><br><span class="line">  A = <span class="string">&#x27;one&#x27;</span>,</span><br><span class="line">  B = [<span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;o&#x27;</span>].<span class="keyword">join</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，成员<code>B</code>的值是一个字符串表达式，导致报错。</p><h2 id="keyof-运算符">keyof 运算符 <a href="about:blank#keyof-%E8%BF%90%E7%AE%97%E7%AC%A6">#</a></h2><p>keyof 运算符可以取出 Enum 结构的所有成员名，作为联合类型返回。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enum MyEnum &#123;</span><br><span class="line">  A = <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  B = <span class="string">&#x27;b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="string">&#x27;A&#x27;</span>|<span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="type">Foo </span>= keyof typeof MyEnum;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，<code>keyof typeof MyEnum</code>可以取出<code>MyEnum</code>的所有成员名，所以类型<code>Foo</code>等同于联合类型<code>'A'|'B'</code>。</p><p>注意，这里的<code>typeof</code>是必需的，否则<code>keyof MyEnum</code>相当于<code>keyof string</code>。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">Foo </span>= keyof MyEnum;</span><br><span class="line">// number | typeof Symbol.iterator | <span class="string">&quot;toString&quot;</span> | <span class="string">&quot;charAt&quot;</span> | <span class="string">&quot;charCodeAt&quot;</span> | ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，类型<code>Foo</code>等于类型<code>string</code>的所有原生属性名组成的联合类型。这是<code>MyEnum</code>为字符串 Enum 的结果，如果<code>MyEnum</code>是数值 Enum，那么<code>keyof MyEnum</code>相当于<code>keyof number</code>。</p><p>这是因为 Enum 作为类型，本质上属于<code>number</code>或<code>string</code>的一种变体，而<code>typeof MyEnum</code>会将<code>MyEnum</code>当作一个值处理，从而先其转为对象类型，就可以再用<code>keyof</code>运算符返回该对象的所有属性名。</p><p>如果要返回 Enum 所有的成员值，可以使用<code>in</code>运算符。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">enum</span> <span class="type">MyEnum</span> &#123;</span><br><span class="line">  <span class="type">A</span> = <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="type">B</span> = <span class="string">&#x27;b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// &#123; a: any, b: any &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="type">Foo</span> = &#123; [key in <span class="type">MyEnum</span>]: any &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，采用属性索引可以取出<code>MyEnum</code>的所有成员值。</p><h2 id="反向映射">反向映射 <a href="about:blank#%E5%8F%8D%E5%90%91%E6%98%A0%E5%B0%84">#</a></h2><p>数值 Enum 存在反向映射，即可以通过成员值获得成员名。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">enum</span> <span class="variable">Weekdays</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="built_in">Monday</span> <span class="operator">=</span> <span class="number">1</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Tuesday</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Wednesday</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Thursday</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Friday</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Saturday</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Sunday</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">console</span><span class="operator">.</span><span class="variable">log</span><span class="punctuation">(</span><span class="variable">Weekdays</span><span class="punctuation">[</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">)</span> <span class="operator">//</span> <span class="built_in">Wednesday</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面示例中，Enum 成员<code>Wednesday</code>的值等于3，从而可以从成员值<code>3</code>取到对应的成员名<code>Wednesday</code>，这就叫反向映射。</p><p>这是因为 TypeScript 会将上面的 Enum 结构，编译成下面的 JavaScript 代码。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var <span class="symbol">Weekdays</span>;</span><br><span class="line">(function (<span class="symbol">Weekdays</span>) &#123;</span><br><span class="line">    <span class="symbol">Weekdays</span>[<span class="symbol">Weekdays</span>[<span class="string">&quot;Monday&quot;</span>] = <span class="number">1</span>] = <span class="string">&quot;Monday&quot;</span>;</span><br><span class="line">    <span class="symbol">Weekdays</span>[<span class="symbol">Weekdays</span>[<span class="string">&quot;Tuesday&quot;</span>] = <span class="number">2</span>] = <span class="string">&quot;Tuesday&quot;</span>;</span><br><span class="line">    <span class="symbol">Weekdays</span>[<span class="symbol">Weekdays</span>[<span class="string">&quot;Wednesday&quot;</span>] = <span class="number">3</span>] = <span class="string">&quot;Wednesday&quot;</span>;</span><br><span class="line">    <span class="symbol">Weekdays</span>[<span class="symbol">Weekdays</span>[<span class="string">&quot;Thursday&quot;</span>] = <span class="number">4</span>] = <span class="string">&quot;Thursday&quot;</span>;</span><br><span class="line">    <span class="symbol">Weekdays</span>[<span class="symbol">Weekdays</span>[<span class="string">&quot;Friday&quot;</span>] = <span class="number">5</span>] = <span class="string">&quot;Friday&quot;</span>;</span><br><span class="line">    <span class="symbol">Weekdays</span>[<span class="symbol">Weekdays</span>[<span class="string">&quot;Saturday&quot;</span>] = <span class="number">6</span>] = <span class="string">&quot;Saturday&quot;</span>;</span><br><span class="line">    <span class="symbol">Weekdays</span>[<span class="symbol">Weekdays</span>[<span class="string">&quot;Sunday&quot;</span>] = <span class="number">7</span>] = <span class="string">&quot;Sunday&quot;</span>;</span><br><span class="line">&#125;)(<span class="symbol">Weekdays</span> || (<span class="symbol">Weekdays</span> = &#123;&#125;));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码中，实际进行了两组赋值，以第一个成员为例。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Weekdays[</span><br><span class="line">  Weekdays[<span class="string">&quot;Monday&quot;</span>] <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">] <span class="operator">=</span> <span class="string">&quot;Monday&quot;</span><span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码有两个赋值运算符（<code>=</code>），实际上等同于下面的代码。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Weekdays[<span class="string">&quot;Monday&quot;</span>] <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">Weekdays[<span class="number">1</span>] <span class="operator">=</span> <span class="string">&quot;Monday&quot;</span><span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，这种情况只发生在数值 Enum，对于字符串 Enum，不存在反向映射。这是因为字符串 Enum 编译后只有一组赋值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">MyEnum</span> </span>&#123;</span><br><span class="line">  A = <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  B = <span class="string">&#x27;b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译后</span></span><br><span class="line"><span class="keyword">var</span> MyEnum;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">MyEnum</span>) </span>&#123;</span><br><span class="line">    MyEnum[<span class="string">&quot;A&quot;</span>] = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    MyEnum[<span class="string">&quot;B&quot;</span>] = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">&#125;)(MyEnum || (MyEnum = &#123;&#125;));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本文转自 <a href="https://wangdoc.com/typescript/enum">https://wangdoc.com/typescript/enum</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">??TypeScript 的 Enum 类型</summary>
    
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://www.fomal.cc/tags/TypeScript/"/>
    
  </entry>
  
</feed>
